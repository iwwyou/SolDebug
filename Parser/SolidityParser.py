# Generated from Solidity.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,153,1660,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,5,0,272,8,0,10,0,12,0,275,9,0,1,0,1,0,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,3,3,289,8,3,1,4,1,4,3,4,293,
        8,4,1,4,5,4,296,8,4,10,4,12,4,299,9,4,1,5,1,5,1,6,3,6,304,8,6,1,
        6,1,6,3,6,308,8,6,1,6,3,6,311,8,6,1,7,1,7,1,7,3,7,316,8,7,1,8,1,
        8,1,8,1,8,3,8,322,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,331,8,8,1,
        8,1,8,1,8,1,8,3,8,337,8,8,1,9,1,9,1,10,1,10,1,10,1,10,5,10,345,8,
        10,10,10,12,10,348,9,10,1,10,1,10,1,11,3,11,353,8,11,1,11,1,11,1,
        11,1,11,1,11,1,11,5,11,361,8,11,10,11,12,11,364,9,11,3,11,366,8,
        11,1,11,1,11,5,11,370,8,11,10,11,12,11,373,9,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,5,12,383,8,12,10,12,12,12,386,9,12,3,12,388,
        8,12,1,12,1,12,5,12,392,8,12,10,12,12,12,395,9,12,1,12,1,12,1,13,
        1,13,1,13,1,13,5,13,403,8,13,10,13,12,13,406,9,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,3,14,415,8,14,1,15,1,15,1,15,1,15,5,15,421,8,
        15,10,15,12,15,424,9,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,5,15,436,8,15,10,15,12,15,439,9,15,1,15,1,15,3,15,443,
        8,15,1,15,1,15,1,16,1,16,1,16,5,16,450,8,16,10,16,12,16,453,9,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,3,18,474,8,18,1,19,1,19,1,19,3,19,
        479,8,19,1,19,1,19,1,19,1,19,1,19,5,19,486,8,19,10,19,12,19,489,
        9,19,1,19,1,19,1,20,1,20,1,20,3,20,496,8,20,1,20,1,20,1,20,1,20,
        1,20,1,20,5,20,504,8,20,10,20,12,20,507,9,20,1,20,1,20,1,20,1,20,
        1,20,3,20,514,8,20,1,20,1,20,3,20,518,8,20,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,5,21,528,8,21,10,21,12,21,531,9,21,1,21,1,21,3,
        21,535,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,544,8,22,10,
        22,12,22,547,9,22,1,22,1,22,1,22,3,22,552,8,22,1,22,1,22,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,3,23,563,8,23,1,23,1,23,1,23,1,24,1,
        24,3,24,570,8,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,578,8,25,1,25,
        1,25,1,25,1,25,3,25,584,8,25,1,25,1,25,3,25,588,8,25,1,25,1,25,1,
        25,3,25,593,8,25,1,25,3,25,596,8,25,1,25,1,25,1,26,1,26,1,27,1,27,
        1,27,1,27,4,27,606,8,27,11,27,12,27,607,1,27,1,27,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,3,29,620,8,29,1,29,3,29,623,8,29,1,29,1,
        29,5,29,627,8,29,10,29,12,29,630,9,29,1,29,1,29,3,29,634,8,29,1,
        30,1,30,1,31,1,31,3,31,640,8,31,1,32,1,32,1,32,1,32,3,32,646,8,32,
        1,32,1,32,1,32,1,32,1,32,1,32,5,32,654,8,32,10,32,12,32,657,9,32,
        1,32,1,32,1,32,1,32,1,32,3,32,664,8,32,1,32,1,32,3,32,668,8,32,1,
        33,1,33,1,33,1,33,1,33,1,33,5,33,676,8,33,10,33,12,33,679,9,33,3,
        33,681,8,33,1,33,3,33,684,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,
        1,34,5,34,694,8,34,10,34,12,34,697,9,34,1,34,1,34,1,35,1,35,3,35,
        703,8,35,1,35,3,35,706,8,35,1,35,1,35,1,35,3,35,711,8,35,1,35,3,
        35,714,8,35,5,35,716,8,35,10,35,12,35,719,9,35,1,36,1,36,3,36,723,
        8,36,1,37,1,37,3,37,727,8,37,1,37,1,37,1,38,1,38,4,38,733,8,38,11,
        38,12,38,734,3,38,737,8,38,1,38,1,38,1,38,3,38,742,8,38,5,38,744,
        8,38,10,38,12,38,747,9,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,3,39,
        756,8,39,1,39,1,39,1,39,3,39,761,8,39,1,39,5,39,764,8,39,10,39,12,
        39,767,9,39,1,40,1,40,1,40,1,40,3,40,773,8,40,1,40,1,40,1,40,3,40,
        778,8,40,1,40,1,40,1,41,1,41,3,41,784,8,41,1,42,1,42,1,42,3,42,789,
        8,42,1,42,1,42,1,42,5,42,794,8,42,10,42,12,42,797,9,42,1,42,1,42,
        1,42,1,42,1,42,3,42,804,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        5,43,813,8,43,10,43,12,43,816,9,43,1,43,1,43,1,44,5,44,821,8,44,
        10,44,12,44,824,9,44,1,44,1,44,1,45,5,45,829,8,45,10,45,12,45,832,
        9,45,1,45,1,45,1,46,5,46,837,8,46,10,46,12,46,840,9,46,1,46,1,46,
        1,47,5,47,845,8,47,10,47,12,47,848,9,47,1,47,1,47,1,48,5,48,853,
        8,48,10,48,12,48,856,9,48,1,48,1,48,1,49,5,49,861,8,49,10,49,12,
        49,864,9,49,1,49,1,49,1,50,1,50,1,50,5,50,871,8,50,10,50,12,50,874,
        9,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,3,51,883,8,51,1,51,1,51,
        1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,896,8,52,1,53,
        1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,
        5,55,912,8,55,10,55,12,55,915,9,55,1,56,1,56,1,56,1,56,1,56,1,56,
        3,56,923,8,56,1,57,1,57,3,57,927,8,57,1,57,1,57,1,57,3,57,932,8,
        57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
        57,3,57,947,8,57,1,57,3,57,950,8,57,1,58,1,58,1,58,1,58,1,58,5,58,
        957,8,58,10,58,12,58,960,9,58,3,58,962,8,58,1,58,1,58,1,59,3,59,
        967,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,977,8,59,10,
        59,12,59,980,9,59,1,59,1,59,3,59,984,8,59,1,60,1,60,3,60,988,8,60,
        1,61,1,61,1,61,3,61,993,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,3,61,1003,8,61,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,
        3,63,1014,8,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,
        1,66,1,66,1,66,5,66,1029,8,66,10,66,12,66,1032,9,66,1,67,1,67,1,
        67,1,67,1,67,1,67,1,67,3,67,1041,8,67,1,68,1,68,3,68,1045,8,68,1,
        69,1,69,1,70,1,70,1,71,1,71,1,71,5,71,1054,8,71,10,71,12,71,1057,
        9,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1079,8,73,1,74,1,74,
        1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1091,8,75,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,3,76,1100,8,76,1,76,1,76,4,76,1104,8,76,
        11,76,12,76,1105,1,77,1,77,3,77,1110,8,77,1,77,1,77,1,77,1,77,3,
        77,1116,8,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,3,
        79,1128,8,79,1,80,1,80,1,80,1,80,3,80,1134,8,80,1,80,1,80,3,80,1138,
        8,80,1,80,3,80,1141,8,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,5,81,
        1150,8,81,10,81,12,81,1153,9,81,1,81,1,81,1,82,1,82,3,82,1159,8,
        82,1,82,3,82,1162,8,82,1,82,1,82,5,82,1166,8,82,10,82,12,82,1169,
        9,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1193,8,85,
        1,86,1,86,5,86,1197,8,86,10,86,12,86,1200,9,86,1,86,1,86,1,87,1,
        87,1,87,1,87,3,87,1208,8,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,
        87,1217,8,87,3,87,1219,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,4,
        88,1228,8,88,11,88,12,88,1229,1,88,1,88,1,88,3,88,1235,8,88,1,89,
        1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,
        1,91,1,91,4,91,1253,8,91,11,91,12,91,1254,1,91,1,91,3,91,1259,8,
        91,1,91,1,91,3,91,1263,8,91,1,92,1,92,1,92,1,92,1,92,1,92,5,92,1271,
        8,92,10,92,12,92,1274,9,92,3,92,1276,8,92,1,92,1,92,1,92,1,92,1,
        92,5,92,1283,8,92,10,92,12,92,1286,9,92,3,92,1288,8,92,1,92,1,92,
        1,93,1,93,1,93,5,93,1295,8,93,10,93,12,93,1298,9,93,1,94,1,94,1,
        94,1,94,1,94,5,94,1305,8,94,10,94,12,94,1308,9,94,3,94,1310,8,94,
        1,94,1,94,1,95,1,95,1,96,1,96,1,96,1,96,1,96,3,96,1321,8,96,1,97,
        1,97,1,97,3,97,1326,8,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
        1,99,1,99,1,99,1,100,1,100,1,100,1,101,1,101,3,101,1344,8,101,1,
        101,1,101,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,3,103,
        1356,8,103,1,103,1,103,1,103,1,103,3,103,1362,8,103,1,103,1,103,
        1,104,1,104,1,104,1,104,1,104,3,104,1371,8,104,1,104,1,104,1,104,
        1,105,1,105,1,105,1,105,1,105,1,105,1,106,1,106,1,106,3,106,1385,
        8,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1393,8,106,1,107,
        1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,
        1,107,1,107,3,107,1409,8,107,1,108,1,108,1,108,1,108,1,108,1,108,
        1,108,1,109,1,109,1,109,1,109,3,109,1422,8,109,1,110,1,110,1,110,
        1,110,3,110,1428,8,110,1,110,1,110,3,110,1432,8,110,1,110,3,110,
        1435,8,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,
        1,111,1,111,1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,
        1,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,1465,8,114,
        1,114,1,114,1,114,1,115,1,115,3,115,1472,8,115,1,115,1,115,1,115,
        1,115,3,115,1478,8,115,1,115,1,115,1,115,1,116,1,116,1,117,1,117,
        1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,
        1,117,1,117,1,117,1,117,1,117,3,117,1503,8,117,1,117,1,117,1,117,
        1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,
        1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,
        1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,
        1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,1550,
        8,117,1,117,1,117,1,117,1,117,3,117,1556,8,117,1,117,1,117,3,117,
        1560,8,117,1,117,1,117,1,117,1,117,1,117,3,117,1567,8,117,1,117,
        1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,5,117,1579,
        8,117,10,117,12,117,1582,9,117,3,117,1584,8,117,1,117,1,117,1,117,
        1,117,1,117,5,117,1591,8,117,10,117,12,117,1594,9,117,1,118,1,118,
        1,118,1,118,1,118,3,118,1601,8,118,1,119,1,119,1,119,1,120,1,120,
        1,120,1,120,5,120,1610,8,120,10,120,12,120,1613,9,120,3,120,1615,
        8,120,1,120,1,120,1,121,1,121,1,122,1,122,1,123,1,123,1,123,1,123,
        1,123,1,123,1,124,1,124,1,125,4,125,1632,8,125,11,125,12,125,1633,
        1,126,4,126,1637,8,126,11,126,12,126,1638,1,127,4,127,1642,8,127,
        11,127,12,127,1643,1,128,1,128,1,128,1,128,1,128,5,128,1651,8,128,
        10,128,12,128,1654,9,128,1,128,1,128,3,128,1658,8,128,1,128,0,2,
        78,234,129,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
        40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
        84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,0,19,1,0,5,11,3,0,3,3,5,10,31,38,3,0,128,128,
        130,130,132,133,1,0,55,57,1,0,60,62,3,0,131,131,135,135,137,137,
        1,0,148,149,1,0,55,56,2,0,83,88,112,116,3,0,6,6,34,34,89,92,2,0,
        3,3,35,36,1,0,33,34,1,0,94,96,1,0,7,10,1,0,37,38,2,0,11,11,99,109,
        1,0,89,90,2,0,117,117,120,120,1,0,143,144,1839,0,273,1,0,0,0,2,278,
        1,0,0,0,4,283,1,0,0,0,6,288,1,0,0,0,8,290,1,0,0,0,10,300,1,0,0,0,
        12,310,1,0,0,0,14,312,1,0,0,0,16,336,1,0,0,0,18,338,1,0,0,0,20,340,
        1,0,0,0,22,352,1,0,0,0,24,376,1,0,0,0,26,398,1,0,0,0,28,409,1,0,
        0,0,30,416,1,0,0,0,32,446,1,0,0,0,34,454,1,0,0,0,36,473,1,0,0,0,
        38,475,1,0,0,0,40,492,1,0,0,0,42,519,1,0,0,0,44,536,1,0,0,0,46,555,
        1,0,0,0,48,567,1,0,0,0,50,571,1,0,0,0,52,599,1,0,0,0,54,601,1,0,
        0,0,56,611,1,0,0,0,58,615,1,0,0,0,60,635,1,0,0,0,62,637,1,0,0,0,
        64,641,1,0,0,0,66,669,1,0,0,0,68,687,1,0,0,0,70,700,1,0,0,0,72,720,
        1,0,0,0,74,724,1,0,0,0,76,730,1,0,0,0,78,755,1,0,0,0,80,768,1,0,
        0,0,82,783,1,0,0,0,84,785,1,0,0,0,86,814,1,0,0,0,88,822,1,0,0,0,
        90,830,1,0,0,0,92,838,1,0,0,0,94,846,1,0,0,0,96,854,1,0,0,0,98,862,
        1,0,0,0,100,872,1,0,0,0,102,877,1,0,0,0,104,895,1,0,0,0,106,897,
        1,0,0,0,108,903,1,0,0,0,110,909,1,0,0,0,112,922,1,0,0,0,114,949,
        1,0,0,0,116,951,1,0,0,0,118,983,1,0,0,0,120,987,1,0,0,0,122,1002,
        1,0,0,0,124,1004,1,0,0,0,126,1013,1,0,0,0,128,1015,1,0,0,0,130,1020,
        1,0,0,0,132,1025,1,0,0,0,134,1040,1,0,0,0,136,1044,1,0,0,0,138,1046,
        1,0,0,0,140,1048,1,0,0,0,142,1050,1,0,0,0,144,1060,1,0,0,0,146,1078,
        1,0,0,0,148,1080,1,0,0,0,150,1083,1,0,0,0,152,1092,1,0,0,0,154,1107,
        1,0,0,0,156,1119,1,0,0,0,158,1127,1,0,0,0,160,1129,1,0,0,0,162,1145,
        1,0,0,0,164,1156,1,0,0,0,166,1172,1,0,0,0,168,1179,1,0,0,0,170,1192,
        1,0,0,0,172,1194,1,0,0,0,174,1218,1,0,0,0,176,1234,1,0,0,0,178,1236,
        1,0,0,0,180,1240,1,0,0,0,182,1246,1,0,0,0,184,1264,1,0,0,0,186,1291,
        1,0,0,0,188,1299,1,0,0,0,190,1313,1,0,0,0,192,1320,1,0,0,0,194,1325,
        1,0,0,0,196,1327,1,0,0,0,198,1335,1,0,0,0,200,1338,1,0,0,0,202,1341,
        1,0,0,0,204,1347,1,0,0,0,206,1352,1,0,0,0,208,1365,1,0,0,0,210,1375,
        1,0,0,0,212,1392,1,0,0,0,214,1408,1,0,0,0,216,1410,1,0,0,0,218,1417,
        1,0,0,0,220,1423,1,0,0,0,222,1440,1,0,0,0,224,1447,1,0,0,0,226,1451,
        1,0,0,0,228,1457,1,0,0,0,230,1469,1,0,0,0,232,1482,1,0,0,0,234,1502,
        1,0,0,0,236,1600,1,0,0,0,238,1602,1,0,0,0,240,1605,1,0,0,0,242,1618,
        1,0,0,0,244,1620,1,0,0,0,246,1622,1,0,0,0,248,1628,1,0,0,0,250,1631,
        1,0,0,0,252,1636,1,0,0,0,254,1641,1,0,0,0,256,1645,1,0,0,0,258,272,
        3,2,1,0,259,272,3,16,8,0,260,272,3,50,25,0,261,272,3,22,11,0,262,
        272,3,24,12,0,263,272,3,26,13,0,264,272,3,64,32,0,265,272,3,34,17,
        0,266,272,3,54,27,0,267,272,3,68,34,0,268,272,3,246,123,0,269,272,
        3,46,23,0,270,272,3,66,33,0,271,258,1,0,0,0,271,259,1,0,0,0,271,
        260,1,0,0,0,271,261,1,0,0,0,271,262,1,0,0,0,271,263,1,0,0,0,271,
        264,1,0,0,0,271,265,1,0,0,0,271,266,1,0,0,0,271,267,1,0,0,0,271,
        268,1,0,0,0,271,269,1,0,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,
        271,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,
        277,5,0,0,1,277,1,1,0,0,0,278,279,5,1,0,0,279,280,3,4,2,0,280,281,
        3,6,3,0,281,282,5,2,0,0,282,3,1,0,0,0,283,284,3,244,122,0,284,5,
        1,0,0,0,285,289,5,3,0,0,286,289,3,8,4,0,287,289,3,234,117,0,288,
        285,1,0,0,0,288,286,1,0,0,0,288,287,1,0,0,0,289,7,1,0,0,0,290,297,
        3,12,6,0,291,293,5,4,0,0,292,291,1,0,0,0,292,293,1,0,0,0,293,294,
        1,0,0,0,294,296,3,12,6,0,295,292,1,0,0,0,296,299,1,0,0,0,297,295,
        1,0,0,0,297,298,1,0,0,0,298,9,1,0,0,0,299,297,1,0,0,0,300,301,7,
        0,0,0,301,11,1,0,0,0,302,304,3,10,5,0,303,302,1,0,0,0,303,304,1,
        0,0,0,304,305,1,0,0,0,305,311,5,146,0,0,306,308,3,10,5,0,307,306,
        1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,311,5,117,0,0,310,303,
        1,0,0,0,310,307,1,0,0,0,311,13,1,0,0,0,312,315,3,244,122,0,313,314,
        5,12,0,0,314,316,3,244,122,0,315,313,1,0,0,0,315,316,1,0,0,0,316,
        15,1,0,0,0,317,318,5,13,0,0,318,321,3,18,9,0,319,320,5,12,0,0,320,
        322,3,244,122,0,321,319,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,
        323,324,5,2,0,0,324,337,1,0,0,0,325,330,5,13,0,0,326,331,3,20,10,
        0,327,328,5,3,0,0,328,329,5,12,0,0,329,331,3,244,122,0,330,326,1,
        0,0,0,330,327,1,0,0,0,331,332,1,0,0,0,332,333,5,14,0,0,333,334,3,
        18,9,0,334,335,5,2,0,0,335,337,1,0,0,0,336,317,1,0,0,0,336,325,1,
        0,0,0,337,17,1,0,0,0,338,339,3,254,127,0,339,19,1,0,0,0,340,341,
        5,15,0,0,341,346,3,14,7,0,342,343,5,16,0,0,343,345,3,14,7,0,344,
        342,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,
        349,1,0,0,0,348,346,1,0,0,0,349,350,5,17,0,0,350,21,1,0,0,0,351,
        353,5,18,0,0,352,351,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,
        355,5,19,0,0,355,365,3,244,122,0,356,357,5,20,0,0,357,362,3,28,14,
        0,358,359,5,16,0,0,359,361,3,28,14,0,360,358,1,0,0,0,361,364,1,0,
        0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,366,1,0,0,0,364,362,1,0,
        0,0,365,356,1,0,0,0,365,366,1,0,0,0,366,367,1,0,0,0,367,371,5,15,
        0,0,368,370,3,36,18,0,369,368,1,0,0,0,370,373,1,0,0,0,371,369,1,
        0,0,0,371,372,1,0,0,0,372,374,1,0,0,0,373,371,1,0,0,0,374,375,5,
        17,0,0,375,23,1,0,0,0,376,377,5,21,0,0,377,387,3,244,122,0,378,379,
        5,20,0,0,379,384,3,28,14,0,380,381,5,16,0,0,381,383,3,28,14,0,382,
        380,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,
        388,1,0,0,0,386,384,1,0,0,0,387,378,1,0,0,0,387,388,1,0,0,0,388,
        389,1,0,0,0,389,393,5,15,0,0,390,392,3,36,18,0,391,390,1,0,0,0,392,
        395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,395,
        393,1,0,0,0,396,397,5,17,0,0,397,25,1,0,0,0,398,399,5,22,0,0,399,
        400,3,244,122,0,400,404,5,15,0,0,401,403,3,36,18,0,402,401,1,0,0,
        0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,
        0,406,404,1,0,0,0,407,408,5,17,0,0,408,27,1,0,0,0,409,414,3,32,16,
        0,410,411,5,23,0,0,411,412,3,30,15,0,412,413,5,24,0,0,413,415,1,
        0,0,0,414,410,1,0,0,0,414,415,1,0,0,0,415,29,1,0,0,0,416,442,5,23,
        0,0,417,422,3,234,117,0,418,419,5,16,0,0,419,421,3,234,117,0,420,
        418,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,
        443,1,0,0,0,424,422,1,0,0,0,425,426,5,15,0,0,426,427,3,244,122,0,
        427,428,5,25,0,0,428,429,3,234,117,0,429,437,1,0,0,0,430,431,5,16,
        0,0,431,432,3,244,122,0,432,433,5,25,0,0,433,434,3,234,117,0,434,
        436,1,0,0,0,435,430,1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,
        438,1,0,0,0,438,440,1,0,0,0,439,437,1,0,0,0,440,441,5,17,0,0,441,
        443,1,0,0,0,442,417,1,0,0,0,442,425,1,0,0,0,442,443,1,0,0,0,443,
        444,1,0,0,0,444,445,5,24,0,0,445,31,1,0,0,0,446,451,3,244,122,0,
        447,448,5,26,0,0,448,450,3,244,122,0,449,447,1,0,0,0,450,453,1,0,
        0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,33,1,0,0,0,453,451,1,0,0,
        0,454,455,3,78,39,0,455,456,5,124,0,0,456,457,3,244,122,0,457,458,
        5,11,0,0,458,459,3,234,117,0,459,460,5,2,0,0,460,35,1,0,0,0,461,
        474,3,38,19,0,462,474,3,64,32,0,463,474,3,58,29,0,464,474,3,40,20,
        0,465,474,3,42,21,0,466,474,3,54,27,0,467,474,3,68,34,0,468,474,
        3,246,123,0,469,474,3,44,22,0,470,474,3,66,33,0,471,474,3,46,23,
        0,472,474,3,50,25,0,473,461,1,0,0,0,473,462,1,0,0,0,473,463,1,0,
        0,0,473,464,1,0,0,0,473,465,1,0,0,0,473,466,1,0,0,0,473,467,1,0,
        0,0,473,468,1,0,0,0,473,469,1,0,0,0,473,470,1,0,0,0,473,471,1,0,
        0,0,473,472,1,0,0,0,474,37,1,0,0,0,475,476,5,139,0,0,476,478,5,23,
        0,0,477,479,3,70,35,0,478,477,1,0,0,0,478,479,1,0,0,0,479,480,1,
        0,0,0,480,487,5,24,0,0,481,486,3,62,31,0,482,486,5,131,0,0,483,486,
        5,130,0,0,484,486,5,133,0,0,485,481,1,0,0,0,485,482,1,0,0,0,485,
        483,1,0,0,0,485,484,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,
        488,1,0,0,0,488,490,1,0,0,0,489,487,1,0,0,0,490,491,3,142,71,0,491,
        39,1,0,0,0,492,493,5,140,0,0,493,495,5,23,0,0,494,496,3,70,35,0,
        495,494,1,0,0,0,495,496,1,0,0,0,496,497,1,0,0,0,497,505,5,24,0,0,
        498,504,5,128,0,0,499,504,3,140,70,0,500,504,3,62,31,0,501,504,5,
        134,0,0,502,504,3,256,128,0,503,498,1,0,0,0,503,499,1,0,0,0,503,
        500,1,0,0,0,503,501,1,0,0,0,503,502,1,0,0,0,504,507,1,0,0,0,505,
        503,1,0,0,0,505,506,1,0,0,0,506,513,1,0,0,0,507,505,1,0,0,0,508,
        509,5,27,0,0,509,510,5,23,0,0,510,511,3,70,35,0,511,512,5,24,0,0,
        512,514,1,0,0,0,513,508,1,0,0,0,513,514,1,0,0,0,514,517,1,0,0,0,
        515,518,5,2,0,0,516,518,3,142,71,0,517,515,1,0,0,0,517,516,1,0,0,
        0,518,41,1,0,0,0,519,520,5,141,0,0,520,521,5,23,0,0,521,529,5,24,
        0,0,522,528,5,128,0,0,523,528,5,131,0,0,524,528,3,62,31,0,525,528,
        5,134,0,0,526,528,3,256,128,0,527,522,1,0,0,0,527,523,1,0,0,0,527,
        524,1,0,0,0,527,525,1,0,0,0,527,526,1,0,0,0,528,531,1,0,0,0,529,
        527,1,0,0,0,529,530,1,0,0,0,530,534,1,0,0,0,531,529,1,0,0,0,532,
        535,5,2,0,0,533,535,3,142,71,0,534,532,1,0,0,0,534,533,1,0,0,0,535,
        43,1,0,0,0,536,545,3,78,39,0,537,544,5,133,0,0,538,544,5,130,0,0,
        539,544,5,132,0,0,540,544,5,124,0,0,541,544,5,125,0,0,542,544,3,
        256,128,0,543,537,1,0,0,0,543,538,1,0,0,0,543,539,1,0,0,0,543,540,
        1,0,0,0,543,541,1,0,0,0,543,542,1,0,0,0,544,547,1,0,0,0,545,543,
        1,0,0,0,545,546,1,0,0,0,546,548,1,0,0,0,547,545,1,0,0,0,548,551,
        3,244,122,0,549,550,5,11,0,0,550,552,3,234,117,0,551,549,1,0,0,0,
        551,552,1,0,0,0,552,553,1,0,0,0,553,554,5,2,0,0,554,45,1,0,0,0,555,
        556,5,28,0,0,556,557,3,244,122,0,557,562,5,23,0,0,558,559,3,48,24,
        0,559,560,5,16,0,0,560,561,3,48,24,0,561,563,1,0,0,0,562,558,1,0,
        0,0,562,563,1,0,0,0,563,564,1,0,0,0,564,565,5,24,0,0,565,566,5,2,
        0,0,566,47,1,0,0,0,567,569,3,78,39,0,568,570,3,244,122,0,569,568,
        1,0,0,0,569,570,1,0,0,0,570,49,1,0,0,0,571,587,5,29,0,0,572,588,
        3,32,16,0,573,574,5,15,0,0,574,577,3,32,16,0,575,576,5,12,0,0,576,
        578,3,52,26,0,577,575,1,0,0,0,577,578,1,0,0,0,578,579,1,0,0,0,579,
        580,5,16,0,0,580,583,3,32,16,0,581,582,5,12,0,0,582,584,3,52,26,
        0,583,581,1,0,0,0,583,584,1,0,0,0,584,585,1,0,0,0,585,586,5,17,0,
        0,586,588,1,0,0,0,587,572,1,0,0,0,587,573,1,0,0,0,588,589,1,0,0,
        0,589,592,5,30,0,0,590,593,5,3,0,0,591,593,3,78,39,0,592,590,1,0,
        0,0,592,591,1,0,0,0,593,595,1,0,0,0,594,596,5,138,0,0,595,594,1,
        0,0,0,595,596,1,0,0,0,596,597,1,0,0,0,597,598,5,2,0,0,598,51,1,0,
        0,0,599,600,7,1,0,0,600,53,1,0,0,0,601,602,5,39,0,0,602,603,3,244,
        122,0,603,605,5,15,0,0,604,606,3,56,28,0,605,604,1,0,0,0,606,607,
        1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,609,1,0,0,0,609,610,
        5,17,0,0,610,55,1,0,0,0,611,612,3,78,39,0,612,613,3,244,122,0,613,
        614,5,2,0,0,614,57,1,0,0,0,615,616,5,40,0,0,616,622,3,244,122,0,
        617,619,5,23,0,0,618,620,3,70,35,0,619,618,1,0,0,0,619,620,1,0,0,
        0,620,621,1,0,0,0,621,623,5,24,0,0,622,617,1,0,0,0,622,623,1,0,0,
        0,623,628,1,0,0,0,624,627,5,134,0,0,625,627,3,256,128,0,626,624,
        1,0,0,0,626,625,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,0,628,629,
        1,0,0,0,629,633,1,0,0,0,630,628,1,0,0,0,631,634,5,2,0,0,632,634,
        3,142,71,0,633,631,1,0,0,0,633,632,1,0,0,0,634,59,1,0,0,0,635,636,
        7,2,0,0,636,61,1,0,0,0,637,639,3,32,16,0,638,640,3,30,15,0,639,638,
        1,0,0,0,639,640,1,0,0,0,640,63,1,0,0,0,641,642,5,41,0,0,642,643,
        3,244,122,0,643,645,5,23,0,0,644,646,3,70,35,0,645,644,1,0,0,0,645,
        646,1,0,0,0,646,647,1,0,0,0,647,655,5,24,0,0,648,654,3,60,30,0,649,
        654,3,140,70,0,650,654,3,62,31,0,651,654,5,134,0,0,652,654,3,256,
        128,0,653,648,1,0,0,0,653,649,1,0,0,0,653,650,1,0,0,0,653,651,1,
        0,0,0,653,652,1,0,0,0,654,657,1,0,0,0,655,653,1,0,0,0,655,656,1,
        0,0,0,656,663,1,0,0,0,657,655,1,0,0,0,658,659,5,27,0,0,659,660,5,
        23,0,0,660,661,3,70,35,0,661,662,5,24,0,0,662,664,1,0,0,0,663,658,
        1,0,0,0,663,664,1,0,0,0,664,667,1,0,0,0,665,668,5,2,0,0,666,668,
        3,142,71,0,667,665,1,0,0,0,667,666,1,0,0,0,668,65,1,0,0,0,669,670,
        5,42,0,0,670,671,3,244,122,0,671,680,5,23,0,0,672,677,3,72,36,0,
        673,674,5,16,0,0,674,676,3,72,36,0,675,673,1,0,0,0,676,679,1,0,0,
        0,677,675,1,0,0,0,677,678,1,0,0,0,678,681,1,0,0,0,679,677,1,0,0,
        0,680,672,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,684,5,122,
        0,0,683,682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,686,5,2,
        0,0,686,67,1,0,0,0,687,688,5,43,0,0,688,689,3,244,122,0,689,690,
        5,15,0,0,690,695,3,244,122,0,691,692,5,16,0,0,692,694,3,244,122,
        0,693,691,1,0,0,0,694,697,1,0,0,0,695,693,1,0,0,0,695,696,1,0,0,
        0,696,698,1,0,0,0,697,695,1,0,0,0,698,699,5,17,0,0,699,69,1,0,0,
        0,700,702,3,78,39,0,701,703,3,138,69,0,702,701,1,0,0,0,702,703,1,
        0,0,0,703,705,1,0,0,0,704,706,3,244,122,0,705,704,1,0,0,0,705,706,
        1,0,0,0,706,717,1,0,0,0,707,708,5,16,0,0,708,710,3,78,39,0,709,711,
        3,138,69,0,710,709,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,0,712,714,
        3,244,122,0,713,712,1,0,0,0,713,714,1,0,0,0,714,716,1,0,0,0,715,
        707,1,0,0,0,716,719,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,
        71,1,0,0,0,719,717,1,0,0,0,720,722,3,78,39,0,721,723,3,244,122,0,
        722,721,1,0,0,0,722,723,1,0,0,0,723,73,1,0,0,0,724,726,3,78,39,0,
        725,727,3,138,69,0,726,725,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,
        0,728,729,3,244,122,0,729,75,1,0,0,0,730,736,5,23,0,0,731,733,5,
        16,0,0,732,731,1,0,0,0,733,734,1,0,0,0,734,732,1,0,0,0,734,735,1,
        0,0,0,735,737,1,0,0,0,736,732,1,0,0,0,736,737,1,0,0,0,737,738,1,
        0,0,0,738,745,3,74,37,0,739,741,5,16,0,0,740,742,3,74,37,0,741,740,
        1,0,0,0,741,742,1,0,0,0,742,744,1,0,0,0,743,739,1,0,0,0,744,747,
        1,0,0,0,745,743,1,0,0,0,745,746,1,0,0,0,746,748,1,0,0,0,747,745,
        1,0,0,0,748,749,5,24,0,0,749,77,1,0,0,0,750,751,6,39,-1,0,751,756,
        3,232,116,0,752,756,3,84,42,0,753,756,3,80,40,0,754,756,3,32,16,
        0,755,750,1,0,0,0,755,752,1,0,0,0,755,753,1,0,0,0,755,754,1,0,0,
        0,756,765,1,0,0,0,757,758,10,1,0,0,758,760,5,44,0,0,759,761,3,234,
        117,0,760,759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,764,5,
        45,0,0,763,757,1,0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,765,766,1,
        0,0,0,766,79,1,0,0,0,767,765,1,0,0,0,768,769,5,46,0,0,769,770,5,
        23,0,0,770,772,3,82,41,0,771,773,3,244,122,0,772,771,1,0,0,0,772,
        773,1,0,0,0,773,774,1,0,0,0,774,775,5,47,0,0,775,777,3,78,39,0,776,
        778,3,244,122,0,777,776,1,0,0,0,777,778,1,0,0,0,778,779,1,0,0,0,
        779,780,5,24,0,0,780,81,1,0,0,0,781,784,3,232,116,0,782,784,3,32,
        16,0,783,781,1,0,0,0,783,782,1,0,0,0,784,83,1,0,0,0,785,786,5,41,
        0,0,786,788,5,23,0,0,787,789,3,70,35,0,788,787,1,0,0,0,788,789,1,
        0,0,0,789,790,1,0,0,0,790,795,5,24,0,0,791,794,3,60,30,0,792,794,
        3,140,70,0,793,791,1,0,0,0,793,792,1,0,0,0,794,797,1,0,0,0,795,793,
        1,0,0,0,795,796,1,0,0,0,796,803,1,0,0,0,797,795,1,0,0,0,798,799,
        5,27,0,0,799,800,5,23,0,0,800,801,3,70,35,0,801,802,5,24,0,0,802,
        804,1,0,0,0,803,798,1,0,0,0,803,804,1,0,0,0,804,85,1,0,0,0,805,813,
        3,126,63,0,806,813,3,134,67,0,807,813,3,24,12,0,808,813,3,26,13,
        0,809,813,3,22,11,0,810,813,3,2,1,0,811,813,3,16,8,0,812,805,1,0,
        0,0,812,806,1,0,0,0,812,807,1,0,0,0,812,808,1,0,0,0,812,809,1,0,
        0,0,812,810,1,0,0,0,812,811,1,0,0,0,813,816,1,0,0,0,814,812,1,0,
        0,0,814,815,1,0,0,0,815,817,1,0,0,0,816,814,1,0,0,0,817,818,5,0,
        0,1,818,87,1,0,0,0,819,821,3,132,66,0,820,819,1,0,0,0,821,824,1,
        0,0,0,822,820,1,0,0,0,822,823,1,0,0,0,823,825,1,0,0,0,824,822,1,
        0,0,0,825,826,5,0,0,1,826,89,1,0,0,0,827,829,3,56,28,0,828,827,1,
        0,0,0,829,832,1,0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,833,1,
        0,0,0,832,830,1,0,0,0,833,834,5,0,0,1,834,91,1,0,0,0,835,837,3,136,
        68,0,836,835,1,0,0,0,837,840,1,0,0,0,838,836,1,0,0,0,838,839,1,0,
        0,0,839,841,1,0,0,0,840,838,1,0,0,0,841,842,5,0,0,1,842,93,1,0,0,
        0,843,845,3,226,113,0,844,843,1,0,0,0,845,848,1,0,0,0,846,844,1,
        0,0,0,846,847,1,0,0,0,847,849,1,0,0,0,848,846,1,0,0,0,849,850,5,
        0,0,1,850,95,1,0,0,0,851,853,3,218,109,0,852,851,1,0,0,0,853,856,
        1,0,0,0,854,852,1,0,0,0,854,855,1,0,0,0,855,857,1,0,0,0,856,854,
        1,0,0,0,857,858,5,0,0,1,858,97,1,0,0,0,859,861,3,230,115,0,860,859,
        1,0,0,0,861,864,1,0,0,0,862,860,1,0,0,0,862,863,1,0,0,0,863,865,
        1,0,0,0,864,862,1,0,0,0,865,866,5,0,0,1,866,99,1,0,0,0,867,871,3,
        102,51,0,868,871,3,106,53,0,869,871,3,108,54,0,870,867,1,0,0,0,870,
        868,1,0,0,0,870,869,1,0,0,0,871,874,1,0,0,0,872,870,1,0,0,0,872,
        873,1,0,0,0,873,875,1,0,0,0,874,872,1,0,0,0,875,876,5,0,0,1,876,
        101,1,0,0,0,877,878,5,48,0,0,878,879,5,49,0,0,879,882,3,244,122,
        0,880,881,5,26,0,0,881,883,3,244,122,0,882,880,1,0,0,0,882,883,1,
        0,0,0,883,884,1,0,0,0,884,885,5,11,0,0,885,886,3,104,52,0,886,103,
        1,0,0,0,887,888,5,44,0,0,888,889,3,242,121,0,889,890,5,16,0,0,890,
        891,3,242,121,0,891,892,5,45,0,0,892,896,1,0,0,0,893,894,5,50,0,
        0,894,896,3,242,121,0,895,887,1,0,0,0,895,893,1,0,0,0,896,105,1,
        0,0,0,897,898,5,48,0,0,898,899,5,51,0,0,899,900,3,110,55,0,900,901,
        5,11,0,0,901,902,3,114,57,0,902,107,1,0,0,0,903,904,5,48,0,0,904,
        905,5,52,0,0,905,906,3,110,55,0,906,907,5,11,0,0,907,908,3,114,57,
        0,908,109,1,0,0,0,909,913,3,244,122,0,910,912,3,112,56,0,911,910,
        1,0,0,0,912,915,1,0,0,0,913,911,1,0,0,0,913,914,1,0,0,0,914,111,
        1,0,0,0,915,913,1,0,0,0,916,917,5,26,0,0,917,923,3,244,122,0,918,
        919,5,44,0,0,919,920,3,234,117,0,920,921,5,45,0,0,921,923,1,0,0,
        0,922,916,1,0,0,0,922,918,1,0,0,0,923,113,1,0,0,0,924,926,5,44,0,
        0,925,927,5,34,0,0,926,925,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,
        0,928,929,3,242,121,0,929,931,5,16,0,0,930,932,5,34,0,0,931,930,
        1,0,0,0,931,932,1,0,0,0,932,933,1,0,0,0,933,934,3,242,121,0,934,
        935,5,45,0,0,935,950,1,0,0,0,936,937,5,50,0,0,937,950,3,242,121,
        0,938,939,5,53,0,0,939,950,3,250,125,0,940,941,5,54,0,0,941,950,
        3,250,125,0,942,950,7,3,0,0,943,946,3,244,122,0,944,945,5,26,0,0,
        945,947,3,244,122,0,946,944,1,0,0,0,946,947,1,0,0,0,947,950,1,0,
        0,0,948,950,3,116,58,0,949,924,1,0,0,0,949,936,1,0,0,0,949,938,1,
        0,0,0,949,940,1,0,0,0,949,942,1,0,0,0,949,943,1,0,0,0,949,948,1,
        0,0,0,950,115,1,0,0,0,951,952,5,58,0,0,952,961,5,44,0,0,953,958,
        3,118,59,0,954,955,5,16,0,0,955,957,3,118,59,0,956,954,1,0,0,0,957,
        960,1,0,0,0,958,956,1,0,0,0,958,959,1,0,0,0,959,962,1,0,0,0,960,
        958,1,0,0,0,961,953,1,0,0,0,961,962,1,0,0,0,962,963,1,0,0,0,963,
        964,5,45,0,0,964,117,1,0,0,0,965,967,5,34,0,0,966,965,1,0,0,0,966,
        967,1,0,0,0,967,968,1,0,0,0,968,984,3,242,121,0,969,970,5,58,0,0,
        970,984,3,116,58,0,971,972,5,59,0,0,972,973,5,44,0,0,973,978,3,242,
        121,0,974,975,5,16,0,0,975,977,3,242,121,0,976,974,1,0,0,0,977,980,
        1,0,0,0,978,976,1,0,0,0,978,979,1,0,0,0,979,981,1,0,0,0,980,978,
        1,0,0,0,981,982,5,45,0,0,982,984,1,0,0,0,983,966,1,0,0,0,983,969,
        1,0,0,0,983,971,1,0,0,0,984,119,1,0,0,0,985,988,3,122,61,0,986,988,
        3,124,62,0,987,985,1,0,0,0,987,986,1,0,0,0,988,121,1,0,0,0,989,992,
        3,74,37,0,990,991,5,11,0,0,991,993,3,234,117,0,992,990,1,0,0,0,992,
        993,1,0,0,0,993,994,1,0,0,0,994,995,5,2,0,0,995,1003,1,0,0,0,996,
        997,3,76,38,0,997,998,5,11,0,0,998,999,3,234,117,0,999,1000,1,0,
        0,0,1000,1001,5,2,0,0,1001,1003,1,0,0,0,1002,989,1,0,0,0,1002,996,
        1,0,0,0,1003,123,1,0,0,0,1004,1005,3,234,117,0,1005,1006,5,2,0,0,
        1006,125,1,0,0,0,1007,1014,3,128,64,0,1008,1014,3,130,65,0,1009,
        1014,3,44,22,0,1010,1014,3,246,123,0,1011,1014,3,50,25,0,1012,1014,
        3,34,17,0,1013,1007,1,0,0,0,1013,1008,1,0,0,0,1013,1009,1,0,0,0,
        1013,1010,1,0,0,0,1013,1011,1,0,0,0,1013,1012,1,0,0,0,1014,127,1,
        0,0,0,1015,1016,5,43,0,0,1016,1017,3,244,122,0,1017,1018,5,15,0,
        0,1018,1019,5,17,0,0,1019,129,1,0,0,0,1020,1021,5,39,0,0,1021,1022,
        3,244,122,0,1022,1023,5,15,0,0,1023,1024,5,17,0,0,1024,131,1,0,0,
        0,1025,1030,3,244,122,0,1026,1027,5,16,0,0,1027,1029,3,244,122,0,
        1028,1026,1,0,0,0,1029,1032,1,0,0,0,1030,1028,1,0,0,0,1030,1031,
        1,0,0,0,1031,133,1,0,0,0,1032,1030,1,0,0,0,1033,1041,3,38,19,0,1034,
        1041,3,66,33,0,1035,1041,3,46,23,0,1036,1041,3,64,32,0,1037,1041,
        3,40,20,0,1038,1041,3,58,29,0,1039,1041,3,42,21,0,1040,1033,1,0,
        0,0,1040,1034,1,0,0,0,1040,1035,1,0,0,0,1040,1036,1,0,0,0,1040,1037,
        1,0,0,0,1040,1038,1,0,0,0,1040,1039,1,0,0,0,1041,135,1,0,0,0,1042,
        1045,3,214,107,0,1043,1045,3,144,72,0,1044,1042,1,0,0,0,1044,1043,
        1,0,0,0,1045,137,1,0,0,0,1046,1047,7,4,0,0,1047,139,1,0,0,0,1048,
        1049,7,5,0,0,1049,141,1,0,0,0,1050,1055,5,15,0,0,1051,1054,3,146,
        73,0,1052,1054,3,144,72,0,1053,1051,1,0,0,0,1053,1052,1,0,0,0,1054,
        1057,1,0,0,0,1055,1053,1,0,0,0,1055,1056,1,0,0,0,1056,1058,1,0,0,
        0,1057,1055,1,0,0,0,1058,1059,5,17,0,0,1059,143,1,0,0,0,1060,1061,
        5,63,0,0,1061,1062,3,142,71,0,1062,145,1,0,0,0,1063,1079,3,142,71,
        0,1064,1079,3,158,79,0,1065,1079,3,150,75,0,1066,1079,3,160,80,0,
        1067,1079,3,156,78,0,1068,1079,3,196,98,0,1069,1079,3,198,99,0,1070,
        1079,3,200,100,0,1071,1079,3,152,76,0,1072,1079,3,202,101,0,1073,
        1079,3,204,102,0,1074,1079,3,206,103,0,1075,1079,3,208,104,0,1076,
        1079,3,210,105,0,1077,1079,3,164,82,0,1078,1063,1,0,0,0,1078,1064,
        1,0,0,0,1078,1065,1,0,0,0,1078,1066,1,0,0,0,1078,1067,1,0,0,0,1078,
        1068,1,0,0,0,1078,1069,1,0,0,0,1078,1070,1,0,0,0,1078,1071,1,0,0,
        0,1078,1072,1,0,0,0,1078,1073,1,0,0,0,1078,1074,1,0,0,0,1078,1075,
        1,0,0,0,1078,1076,1,0,0,0,1078,1077,1,0,0,0,1079,147,1,0,0,0,1080,
        1081,3,234,117,0,1081,1082,5,2,0,0,1082,149,1,0,0,0,1083,1084,5,
        64,0,0,1084,1085,5,23,0,0,1085,1086,3,234,117,0,1086,1087,5,24,0,
        0,1087,1090,3,146,73,0,1088,1089,5,65,0,0,1089,1091,3,146,73,0,1090,
        1088,1,0,0,0,1090,1091,1,0,0,0,1091,151,1,0,0,0,1092,1093,5,66,0,
        0,1093,1099,3,234,117,0,1094,1095,5,27,0,0,1095,1096,5,23,0,0,1096,
        1097,3,70,35,0,1097,1098,5,24,0,0,1098,1100,1,0,0,0,1099,1094,1,
        0,0,0,1099,1100,1,0,0,0,1100,1101,1,0,0,0,1101,1103,3,142,71,0,1102,
        1104,3,154,77,0,1103,1102,1,0,0,0,1104,1105,1,0,0,0,1105,1103,1,
        0,0,0,1105,1106,1,0,0,0,1106,153,1,0,0,0,1107,1115,5,67,0,0,1108,
        1110,3,244,122,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,1111,1,
        0,0,0,1111,1112,5,23,0,0,1112,1113,3,70,35,0,1113,1114,5,24,0,0,
        1114,1116,1,0,0,0,1115,1109,1,0,0,0,1115,1116,1,0,0,0,1116,1117,
        1,0,0,0,1117,1118,3,142,71,0,1118,155,1,0,0,0,1119,1120,5,68,0,0,
        1120,1121,5,23,0,0,1121,1122,3,234,117,0,1122,1123,5,24,0,0,1123,
        1124,3,146,73,0,1124,157,1,0,0,0,1125,1128,3,212,106,0,1126,1128,
        3,148,74,0,1127,1125,1,0,0,0,1127,1126,1,0,0,0,1128,159,1,0,0,0,
        1129,1130,5,30,0,0,1130,1133,5,23,0,0,1131,1134,3,158,79,0,1132,
        1134,5,2,0,0,1133,1131,1,0,0,0,1133,1132,1,0,0,0,1134,1137,1,0,0,
        0,1135,1138,3,148,74,0,1136,1138,5,2,0,0,1137,1135,1,0,0,0,1137,
        1136,1,0,0,0,1138,1140,1,0,0,0,1139,1141,3,234,117,0,1140,1139,1,
        0,0,0,1140,1141,1,0,0,0,1141,1142,1,0,0,0,1142,1143,5,24,0,0,1143,
        1144,3,146,73,0,1144,161,1,0,0,0,1145,1146,5,44,0,0,1146,1151,3,
        234,117,0,1147,1148,5,16,0,0,1148,1150,3,234,117,0,1149,1147,1,0,
        0,0,1150,1153,1,0,0,0,1151,1149,1,0,0,0,1151,1152,1,0,0,0,1152,1154,
        1,0,0,0,1153,1151,1,0,0,0,1154,1155,5,45,0,0,1155,163,1,0,0,0,1156,
        1158,5,69,0,0,1157,1159,5,70,0,0,1158,1157,1,0,0,0,1158,1159,1,0,
        0,0,1159,1161,1,0,0,0,1160,1162,3,166,83,0,1161,1160,1,0,0,0,1161,
        1162,1,0,0,0,1162,1163,1,0,0,0,1163,1167,5,15,0,0,1164,1166,3,170,
        85,0,1165,1164,1,0,0,0,1166,1169,1,0,0,0,1167,1165,1,0,0,0,1167,
        1168,1,0,0,0,1168,1170,1,0,0,0,1169,1167,1,0,0,0,1170,1171,5,17,
        0,0,1171,165,1,0,0,0,1172,1173,5,23,0,0,1173,1174,3,168,84,0,1174,
        1175,5,16,0,0,1175,1176,3,168,84,0,1176,1177,1,0,0,0,1177,1178,5,
        24,0,0,1178,167,1,0,0,0,1179,1180,3,254,127,0,1180,169,1,0,0,0,1181,
        1193,3,172,86,0,1182,1193,3,174,87,0,1183,1193,3,176,88,0,1184,1193,
        3,188,94,0,1185,1193,3,178,89,0,1186,1193,3,180,90,0,1187,1193,3,
        182,91,0,1188,1193,5,127,0,0,1189,1193,5,123,0,0,1190,1193,5,126,
        0,0,1191,1193,3,184,92,0,1192,1181,1,0,0,0,1192,1182,1,0,0,0,1192,
        1183,1,0,0,0,1192,1184,1,0,0,0,1192,1185,1,0,0,0,1192,1186,1,0,0,
        0,1192,1187,1,0,0,0,1192,1188,1,0,0,0,1192,1189,1,0,0,0,1192,1190,
        1,0,0,0,1192,1191,1,0,0,0,1193,171,1,0,0,0,1194,1198,5,15,0,0,1195,
        1197,3,170,85,0,1196,1195,1,0,0,0,1197,1200,1,0,0,0,1198,1196,1,
        0,0,0,1198,1199,1,0,0,0,1199,1201,1,0,0,0,1200,1198,1,0,0,0,1201,
        1202,5,17,0,0,1202,173,1,0,0,0,1203,1204,5,71,0,0,1204,1207,5,149,
        0,0,1205,1206,5,72,0,0,1206,1208,3,194,97,0,1207,1205,1,0,0,0,1207,
        1208,1,0,0,0,1208,1219,1,0,0,0,1209,1210,5,71,0,0,1210,1211,5,149,
        0,0,1211,1212,5,16,0,0,1212,1213,5,149,0,0,1213,1216,1,0,0,0,1214,
        1215,5,72,0,0,1215,1217,3,188,94,0,1216,1214,1,0,0,0,1216,1217,1,
        0,0,0,1217,1219,1,0,0,0,1218,1203,1,0,0,0,1218,1209,1,0,0,0,1219,
        175,1,0,0,0,1220,1221,3,186,93,0,1221,1222,5,72,0,0,1222,1223,3,
        194,97,0,1223,1235,1,0,0,0,1224,1227,3,186,93,0,1225,1226,5,16,0,
        0,1226,1228,3,186,93,0,1227,1225,1,0,0,0,1228,1229,1,0,0,0,1229,
        1227,1,0,0,0,1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,1232,5,72,
        0,0,1232,1233,3,188,94,0,1233,1235,1,0,0,0,1234,1220,1,0,0,0,1234,
        1224,1,0,0,0,1235,177,1,0,0,0,1236,1237,5,64,0,0,1237,1238,3,194,
        97,0,1238,1239,3,172,86,0,1239,179,1,0,0,0,1240,1241,5,30,0,0,1241,
        1242,3,172,86,0,1242,1243,3,194,97,0,1243,1244,3,172,86,0,1244,1245,
        3,172,86,0,1245,181,1,0,0,0,1246,1247,5,73,0,0,1247,1262,3,194,97,
        0,1248,1249,5,74,0,0,1249,1250,3,192,96,0,1250,1251,3,172,86,0,1251,
        1253,1,0,0,0,1252,1248,1,0,0,0,1253,1254,1,0,0,0,1254,1252,1,0,0,
        0,1254,1255,1,0,0,0,1255,1258,1,0,0,0,1256,1257,5,75,0,0,1257,1259,
        3,172,86,0,1258,1256,1,0,0,0,1258,1259,1,0,0,0,1259,1263,1,0,0,0,
        1260,1261,5,75,0,0,1261,1263,3,172,86,0,1262,1252,1,0,0,0,1262,1260,
        1,0,0,0,1263,183,1,0,0,0,1264,1265,5,41,0,0,1265,1266,5,149,0,0,
        1266,1275,5,23,0,0,1267,1272,5,149,0,0,1268,1269,5,16,0,0,1269,1271,
        5,149,0,0,1270,1268,1,0,0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,
        1272,1273,1,0,0,0,1273,1276,1,0,0,0,1274,1272,1,0,0,0,1275,1267,
        1,0,0,0,1275,1276,1,0,0,0,1276,1277,1,0,0,0,1277,1287,5,24,0,0,1278,
        1279,5,76,0,0,1279,1284,5,149,0,0,1280,1281,5,16,0,0,1281,1283,5,
        149,0,0,1282,1280,1,0,0,0,1283,1286,1,0,0,0,1284,1282,1,0,0,0,1284,
        1285,1,0,0,0,1285,1288,1,0,0,0,1286,1284,1,0,0,0,1287,1278,1,0,0,
        0,1287,1288,1,0,0,0,1288,1289,1,0,0,0,1289,1290,3,172,86,0,1290,
        185,1,0,0,0,1291,1296,5,149,0,0,1292,1293,5,26,0,0,1293,1295,7,6,
        0,0,1294,1292,1,0,0,0,1295,1298,1,0,0,0,1296,1294,1,0,0,0,1296,1297,
        1,0,0,0,1297,187,1,0,0,0,1298,1296,1,0,0,0,1299,1300,7,6,0,0,1300,
        1309,5,23,0,0,1301,1306,3,194,97,0,1302,1303,5,16,0,0,1303,1305,
        3,194,97,0,1304,1302,1,0,0,0,1305,1308,1,0,0,0,1306,1304,1,0,0,0,
        1306,1307,1,0,0,0,1307,1310,1,0,0,0,1308,1306,1,0,0,0,1309,1301,
        1,0,0,0,1309,1310,1,0,0,0,1310,1311,1,0,0,0,1311,1312,5,24,0,0,1312,
        189,1,0,0,0,1313,1314,7,7,0,0,1314,191,1,0,0,0,1315,1321,5,151,0,
        0,1316,1321,5,152,0,0,1317,1321,5,150,0,0,1318,1321,3,190,95,0,1319,
        1321,5,119,0,0,1320,1315,1,0,0,0,1320,1316,1,0,0,0,1320,1317,1,0,
        0,0,1320,1318,1,0,0,0,1320,1319,1,0,0,0,1321,193,1,0,0,0,1322,1326,
        3,186,93,0,1323,1326,3,188,94,0,1324,1326,3,192,96,0,1325,1322,1,
        0,0,0,1325,1323,1,0,0,0,1325,1324,1,0,0,0,1326,195,1,0,0,0,1327,
        1328,5,77,0,0,1328,1329,3,146,73,0,1329,1330,5,68,0,0,1330,1331,
        5,23,0,0,1331,1332,3,234,117,0,1332,1333,5,24,0,0,1333,1334,5,2,
        0,0,1334,197,1,0,0,0,1335,1336,5,126,0,0,1336,1337,5,2,0,0,1337,
        199,1,0,0,0,1338,1339,5,123,0,0,1339,1340,5,2,0,0,1340,201,1,0,0,
        0,1341,1343,5,78,0,0,1342,1344,3,234,117,0,1343,1342,1,0,0,0,1343,
        1344,1,0,0,0,1344,1345,1,0,0,0,1345,1346,5,2,0,0,1346,203,1,0,0,
        0,1347,1348,5,79,0,0,1348,1349,3,234,117,0,1349,1350,3,30,15,0,1350,
        1351,5,2,0,0,1351,205,1,0,0,0,1352,1361,5,80,0,0,1353,1355,3,244,
        122,0,1354,1356,3,30,15,0,1355,1354,1,0,0,0,1355,1356,1,0,0,0,1356,
        1362,1,0,0,0,1357,1358,5,23,0,0,1358,1359,3,254,127,0,1359,1360,
        5,24,0,0,1360,1362,1,0,0,0,1361,1353,1,0,0,0,1361,1357,1,0,0,0,1361,
        1362,1,0,0,0,1362,1363,1,0,0,0,1363,1364,5,2,0,0,1364,207,1,0,0,
        0,1365,1366,5,81,0,0,1366,1367,5,23,0,0,1367,1370,3,234,117,0,1368,
        1369,5,16,0,0,1369,1371,3,254,127,0,1370,1368,1,0,0,0,1370,1371,
        1,0,0,0,1371,1372,1,0,0,0,1372,1373,5,24,0,0,1373,1374,5,2,0,0,1374,
        209,1,0,0,0,1375,1376,5,82,0,0,1376,1377,5,23,0,0,1377,1378,3,234,
        117,0,1378,1379,5,24,0,0,1379,1380,5,2,0,0,1380,211,1,0,0,0,1381,
        1384,3,74,37,0,1382,1383,5,11,0,0,1383,1385,3,234,117,0,1384,1382,
        1,0,0,0,1384,1385,1,0,0,0,1385,1393,1,0,0,0,1386,1387,3,76,38,0,
        1387,1388,5,11,0,0,1388,1389,3,234,117,0,1389,1390,1,0,0,0,1390,
        1391,5,2,0,0,1391,1393,1,0,0,0,1392,1381,1,0,0,0,1392,1386,1,0,0,
        0,1393,213,1,0,0,0,1394,1409,3,120,60,0,1395,1409,3,216,108,0,1396,
        1409,3,220,110,0,1397,1409,3,222,111,0,1398,1409,3,224,112,0,1399,
        1409,3,198,99,0,1400,1409,3,200,100,0,1401,1409,3,228,114,0,1402,
        1409,3,202,101,0,1403,1409,3,204,102,0,1404,1409,3,206,103,0,1405,
        1409,3,208,104,0,1406,1409,3,210,105,0,1407,1409,3,164,82,0,1408,
        1394,1,0,0,0,1408,1395,1,0,0,0,1408,1396,1,0,0,0,1408,1397,1,0,0,
        0,1408,1398,1,0,0,0,1408,1399,1,0,0,0,1408,1400,1,0,0,0,1408,1401,
        1,0,0,0,1408,1402,1,0,0,0,1408,1403,1,0,0,0,1408,1404,1,0,0,0,1408,
        1405,1,0,0,0,1408,1406,1,0,0,0,1408,1407,1,0,0,0,1409,215,1,0,0,
        0,1410,1411,5,64,0,0,1411,1412,5,23,0,0,1412,1413,3,234,117,0,1413,
        1414,5,24,0,0,1414,1415,5,15,0,0,1415,1416,5,17,0,0,1416,217,1,0,
        0,0,1417,1421,5,65,0,0,1418,1422,3,216,108,0,1419,1420,5,15,0,0,
        1420,1422,5,17,0,0,1421,1418,1,0,0,0,1421,1419,1,0,0,0,1422,219,
        1,0,0,0,1423,1424,5,30,0,0,1424,1427,5,23,0,0,1425,1428,3,158,79,
        0,1426,1428,5,2,0,0,1427,1425,1,0,0,0,1427,1426,1,0,0,0,1428,1431,
        1,0,0,0,1429,1432,3,148,74,0,1430,1432,5,2,0,0,1431,1429,1,0,0,0,
        1431,1430,1,0,0,0,1432,1434,1,0,0,0,1433,1435,3,234,117,0,1434,1433,
        1,0,0,0,1434,1435,1,0,0,0,1435,1436,1,0,0,0,1436,1437,5,24,0,0,1437,
        1438,5,15,0,0,1438,1439,5,17,0,0,1439,221,1,0,0,0,1440,1441,5,68,
        0,0,1441,1442,5,23,0,0,1442,1443,3,234,117,0,1443,1444,5,24,0,0,
        1444,1445,5,15,0,0,1445,1446,5,17,0,0,1446,223,1,0,0,0,1447,1448,
        5,77,0,0,1448,1449,5,15,0,0,1449,1450,5,17,0,0,1450,225,1,0,0,0,
        1451,1452,5,68,0,0,1452,1453,5,23,0,0,1453,1454,3,234,117,0,1454,
        1455,5,24,0,0,1455,1456,5,2,0,0,1456,227,1,0,0,0,1457,1458,5,66,
        0,0,1458,1464,3,234,117,0,1459,1460,5,27,0,0,1460,1461,5,23,0,0,
        1461,1462,3,70,35,0,1462,1463,5,24,0,0,1463,1465,1,0,0,0,1464,1459,
        1,0,0,0,1464,1465,1,0,0,0,1465,1466,1,0,0,0,1466,1467,5,15,0,0,1467,
        1468,5,17,0,0,1468,229,1,0,0,0,1469,1477,5,67,0,0,1470,1472,3,244,
        122,0,1471,1470,1,0,0,0,1471,1472,1,0,0,0,1472,1473,1,0,0,0,1473,
        1474,5,23,0,0,1474,1475,3,70,35,0,1475,1476,5,24,0,0,1476,1478,1,
        0,0,0,1477,1471,1,0,0,0,1477,1478,1,0,0,0,1478,1479,1,0,0,0,1479,
        1480,5,15,0,0,1480,1481,5,17,0,0,1481,231,1,0,0,0,1482,1483,7,8,
        0,0,1483,233,1,0,0,0,1484,1485,6,117,-1,0,1485,1486,5,131,0,0,1486,
        1503,3,30,15,0,1487,1488,3,232,116,0,1488,1489,5,23,0,0,1489,1490,
        3,244,122,0,1490,1491,5,24,0,0,1491,1503,1,0,0,0,1492,1493,7,9,0,
        0,1493,1503,3,234,117,22,1494,1495,5,110,0,0,1495,1503,3,78,39,0,
        1496,1503,3,240,120,0,1497,1503,3,162,81,0,1498,1503,3,244,122,0,
        1499,1503,3,236,118,0,1500,1503,3,238,119,0,1501,1503,3,232,116,
        0,1502,1484,1,0,0,0,1502,1487,1,0,0,0,1502,1492,1,0,0,0,1502,1494,
        1,0,0,0,1502,1496,1,0,0,0,1502,1497,1,0,0,0,1502,1498,1,0,0,0,1502,
        1499,1,0,0,0,1502,1500,1,0,0,0,1502,1501,1,0,0,0,1503,1592,1,0,0,
        0,1504,1505,10,20,0,0,1505,1506,5,93,0,0,1506,1591,3,234,117,21,
        1507,1508,10,19,0,0,1508,1509,7,10,0,0,1509,1591,3,234,117,20,1510,
        1511,10,18,0,0,1511,1512,7,11,0,0,1512,1591,3,234,117,19,1513,1514,
        10,17,0,0,1514,1515,7,12,0,0,1515,1591,3,234,117,18,1516,1517,10,
        16,0,0,1517,1518,5,32,0,0,1518,1591,3,234,117,17,1519,1520,10,15,
        0,0,1520,1521,5,5,0,0,1521,1591,3,234,117,16,1522,1523,10,14,0,0,
        1523,1524,5,31,0,0,1524,1591,3,234,117,15,1525,1526,10,13,0,0,1526,
        1527,7,13,0,0,1527,1591,3,234,117,14,1528,1529,10,12,0,0,1529,1530,
        7,14,0,0,1530,1591,3,234,117,13,1531,1532,10,11,0,0,1532,1533,5,
        97,0,0,1533,1591,3,234,117,12,1534,1535,10,10,0,0,1535,1536,5,4,
        0,0,1536,1591,3,234,117,11,1537,1538,10,9,0,0,1538,1539,5,98,0,0,
        1539,1540,3,234,117,0,1540,1541,5,25,0,0,1541,1542,3,234,117,10,
        1542,1591,1,0,0,0,1543,1544,10,8,0,0,1544,1545,7,15,0,0,1545,1591,
        3,234,117,9,1546,1547,10,29,0,0,1547,1549,5,44,0,0,1548,1550,3,234,
        117,0,1549,1548,1,0,0,0,1549,1550,1,0,0,0,1550,1551,1,0,0,0,1551,
        1591,5,45,0,0,1552,1553,10,28,0,0,1553,1555,5,44,0,0,1554,1556,3,
        234,117,0,1555,1554,1,0,0,0,1555,1556,1,0,0,0,1556,1557,1,0,0,0,
        1557,1559,5,25,0,0,1558,1560,3,234,117,0,1559,1558,1,0,0,0,1559,
        1560,1,0,0,0,1560,1561,1,0,0,0,1561,1591,5,45,0,0,1562,1563,10,27,
        0,0,1563,1566,5,26,0,0,1564,1567,3,244,122,0,1565,1567,5,83,0,0,
        1566,1564,1,0,0,0,1566,1565,1,0,0,0,1567,1591,1,0,0,0,1568,1569,
        10,26,0,0,1569,1583,5,15,0,0,1570,1571,3,244,122,0,1571,1572,5,25,
        0,0,1572,1580,3,234,117,0,1573,1574,5,16,0,0,1574,1575,3,244,122,
        0,1575,1576,5,25,0,0,1576,1577,3,234,117,0,1577,1579,1,0,0,0,1578,
        1573,1,0,0,0,1579,1582,1,0,0,0,1580,1578,1,0,0,0,1580,1581,1,0,0,
        0,1581,1584,1,0,0,0,1582,1580,1,0,0,0,1583,1570,1,0,0,0,1583,1584,
        1,0,0,0,1584,1585,1,0,0,0,1585,1591,5,17,0,0,1586,1587,10,25,0,0,
        1587,1591,3,30,15,0,1588,1589,10,21,0,0,1589,1591,7,16,0,0,1590,
        1504,1,0,0,0,1590,1507,1,0,0,0,1590,1510,1,0,0,0,1590,1513,1,0,0,
        0,1590,1516,1,0,0,0,1590,1519,1,0,0,0,1590,1522,1,0,0,0,1590,1525,
        1,0,0,0,1590,1528,1,0,0,0,1590,1531,1,0,0,0,1590,1534,1,0,0,0,1590,
        1537,1,0,0,0,1590,1543,1,0,0,0,1590,1546,1,0,0,0,1590,1552,1,0,0,
        0,1590,1562,1,0,0,0,1590,1568,1,0,0,0,1590,1586,1,0,0,0,1590,1588,
        1,0,0,0,1591,1594,1,0,0,0,1592,1590,1,0,0,0,1592,1593,1,0,0,0,1593,
        235,1,0,0,0,1594,1592,1,0,0,0,1595,1601,3,254,127,0,1596,1601,3,
        242,121,0,1597,1601,3,248,124,0,1598,1601,3,250,125,0,1599,1601,
        3,252,126,0,1600,1595,1,0,0,0,1600,1596,1,0,0,0,1600,1597,1,0,0,
        0,1600,1598,1,0,0,0,1600,1599,1,0,0,0,1601,237,1,0,0,0,1602,1603,
        3,242,121,0,1603,1604,5,118,0,0,1604,239,1,0,0,0,1605,1614,5,23,
        0,0,1606,1611,3,234,117,0,1607,1608,5,16,0,0,1608,1610,3,234,117,
        0,1609,1607,1,0,0,0,1610,1613,1,0,0,0,1611,1609,1,0,0,0,1611,1612,
        1,0,0,0,1612,1615,1,0,0,0,1613,1611,1,0,0,0,1614,1606,1,0,0,0,1614,
        1615,1,0,0,0,1615,1616,1,0,0,0,1616,1617,5,24,0,0,1617,241,1,0,0,
        0,1618,1619,7,17,0,0,1619,243,1,0,0,0,1620,1621,5,142,0,0,1621,245,
        1,0,0,0,1622,1623,5,136,0,0,1623,1624,3,244,122,0,1624,1625,5,20,
        0,0,1625,1626,3,232,116,0,1626,1627,5,2,0,0,1627,247,1,0,0,0,1628,
        1629,7,7,0,0,1629,249,1,0,0,0,1630,1632,5,119,0,0,1631,1630,1,0,
        0,0,1632,1633,1,0,0,0,1633,1631,1,0,0,0,1633,1634,1,0,0,0,1634,251,
        1,0,0,0,1635,1637,5,145,0,0,1636,1635,1,0,0,0,1637,1638,1,0,0,0,
        1638,1636,1,0,0,0,1638,1639,1,0,0,0,1639,253,1,0,0,0,1640,1642,7,
        18,0,0,1641,1640,1,0,0,0,1642,1643,1,0,0,0,1643,1641,1,0,0,0,1643,
        1644,1,0,0,0,1644,255,1,0,0,0,1645,1657,5,111,0,0,1646,1647,5,23,
        0,0,1647,1652,3,32,16,0,1648,1649,5,16,0,0,1649,1651,3,32,16,0,1650,
        1648,1,0,0,0,1651,1654,1,0,0,0,1652,1650,1,0,0,0,1652,1653,1,0,0,
        0,1653,1655,1,0,0,0,1654,1652,1,0,0,0,1655,1656,5,24,0,0,1656,1658,
        1,0,0,0,1657,1646,1,0,0,0,1657,1658,1,0,0,0,1658,257,1,0,0,0,181,
        271,273,288,292,297,303,307,310,315,321,330,336,346,352,362,365,
        371,384,387,393,404,414,422,437,442,451,473,478,485,487,495,503,
        505,513,517,527,529,534,543,545,551,562,569,577,583,587,592,595,
        607,619,622,626,628,633,639,645,653,655,663,667,677,680,683,695,
        702,705,710,713,717,722,726,734,736,741,745,755,760,765,772,777,
        783,788,793,795,803,812,814,822,830,838,846,854,862,870,872,882,
        895,913,922,926,931,946,949,958,961,966,978,983,987,992,1002,1013,
        1030,1040,1044,1053,1055,1078,1090,1099,1105,1109,1115,1127,1133,
        1137,1140,1151,1158,1161,1167,1192,1198,1207,1216,1218,1229,1234,
        1254,1258,1262,1272,1275,1284,1287,1296,1306,1309,1320,1325,1343,
        1355,1361,1370,1384,1392,1408,1421,1427,1431,1434,1464,1471,1477,
        1502,1549,1555,1559,1566,1580,1583,1590,1592,1600,1611,1614,1633,
        1638,1643,1652,1657
    ]

class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'*'", "'||'", "'^'", 
                     "'~'", "'>='", "'>'", "'<'", "'<='", "'='", "'as'", 
                     "'import'", "'from'", "'{'", "','", "'}'", "'abstract'", 
                     "'contract'", "'is'", "'interface'", "'library'", "'('", 
                     "')'", "':'", "'.'", "'returns'", "'error'", "'using'", 
                     "'for'", "'|'", "'&'", "'+'", "'-'", "'/'", "'%'", 
                     "'=='", "'!='", "'struct'", "'modifier'", "'function'", 
                     "'event'", "'enum'", "'['", "']'", "'mapping'", "'=>'", 
                     "'//'", "'@GlobalVar'", "'symbolicAddress'", "'@StateVar'", 
                     "'@LocalVar'", "'symbolicBytes'", "'symbolicString'", 
                     "'true'", "'false'", "'any'", "'array'", "'arrayAddress'", 
                     "'memory'", "'storage'", "'calldata'", "'unchecked'", 
                     "'if'", "'else'", "'try'", "'catch'", "'while'", "'assembly'", 
                     "'evamasm'", "'let'", "':='", "'switch'", "'case'", 
                     "'default'", "'->'", "'do'", "'return'", "'emit'", 
                     "'revert'", "'require'", "'assert'", "'address'", "'address payable'", 
                     "'bool'", "'string'", "'var'", "'bytes'", "'++'", "'--'", 
                     "'!'", "'delete'", "'**'", "'<<'", "'>>'", "'>>>'", 
                     "'&&'", "'?'", "'|='", "'^='", "'&='", "'<<='", "'>>='", 
                     "'>>>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'new'", 
                     "'override'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'anonymous'", 
                     "'break'", "'constant'", "'immutable'", "'continue'", 
                     "'leave'", "'external'", "'indexed'", "'internal'", 
                     "'payable'", "'private'", "'public'", "'virtual'", 
                     "'pure'", "'type'", "'view'", "'global'", "'constructor'", 
                     "'fallback'", "'receive'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "Int", "Uint", "Byte", "Fixed", "Ufixed", "DecimalNumber", 
                      "SubDenomination", "HexString", "HexNumber", "ReservedKeyword", 
                      "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", 
                      "ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", 
                      "ExternalKeyword", "IndexedKeyword", "InternalKeyword", 
                      "PayableKeyword", "PrivateKeyword", "PublicKeyword", 
                      "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", 
                      "GlobalKeyword", "ConstructorKeyword", "FallbackKeyword", 
                      "ReceiveKeyword", "Identifier", "NonEmptyStringLiteral", 
                      "EmptyStringLiteral", "UnicodeStringLiteral", "VersionLiteral", 
                      "WS", "YulEvmBuiltin", "YulIdentifier", "YulHexNumber", 
                      "YulDecimalNumber", "YulStringLiteral", "COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_importPath = 9
    RULE_symbolAliases = 10
    RULE_contractDefinition = 11
    RULE_interfaceDefinition = 12
    RULE_libraryDefinition = 13
    RULE_inheritanceSpecifier = 14
    RULE_callArgumentList = 15
    RULE_identifierPath = 16
    RULE_constantVariableDeclaration = 17
    RULE_contractBodyElement = 18
    RULE_constructorDefinition = 19
    RULE_fallbackFunctionDefinition = 20
    RULE_receiveFunctionDefinition = 21
    RULE_stateVariableDeclaration = 22
    RULE_errorDefinition = 23
    RULE_errorParameter = 24
    RULE_usingDirective = 25
    RULE_userDefinableOperators = 26
    RULE_structDefinition = 27
    RULE_structMember = 28
    RULE_modifierDefinition = 29
    RULE_visibility = 30
    RULE_modifierInvocation = 31
    RULE_functionDefinition = 32
    RULE_eventDefinition = 33
    RULE_enumDefinition = 34
    RULE_parameterList = 35
    RULE_eventParameter = 36
    RULE_variableDeclaration = 37
    RULE_variableDeclarationTuple = 38
    RULE_typeName = 39
    RULE_mapping = 40
    RULE_mappingKeyType = 41
    RULE_functionTypeName = 42
    RULE_interactiveSourceUnit = 43
    RULE_interactiveEnumUnit = 44
    RULE_interactiveStructUnit = 45
    RULE_interactiveBlockUnit = 46
    RULE_interactiveDoWhileUnit = 47
    RULE_interactiveIfElseUnit = 48
    RULE_interactiveCatchClauseUnit = 49
    RULE_debugUnit = 50
    RULE_debugGlobalVar = 51
    RULE_globalValue = 52
    RULE_debugStateVar = 53
    RULE_debugLocalVar = 54
    RULE_testingExpression = 55
    RULE_subAccess = 56
    RULE_stateLocalValue = 57
    RULE_inlineArrayAnnotation = 58
    RULE_inlineElement = 59
    RULE_interactiveSimpleStatement = 60
    RULE_interactiveVariableDeclarationStatement = 61
    RULE_interactiveExpressionStatement = 62
    RULE_interactiveStateVariableElement = 63
    RULE_interactiveEnumDefinition = 64
    RULE_interactiveStructDefinition = 65
    RULE_interactiveEnumItems = 66
    RULE_interactiveFunctionElement = 67
    RULE_interactiveBlockItem = 68
    RULE_dataLocation = 69
    RULE_stateMutability = 70
    RULE_block = 71
    RULE_uncheckedBlock = 72
    RULE_statement = 73
    RULE_expressionStatement = 74
    RULE_ifStatement = 75
    RULE_tryStatement = 76
    RULE_catchClause = 77
    RULE_whileStatement = 78
    RULE_simpleStatement = 79
    RULE_forStatement = 80
    RULE_inlineArrayExpression = 81
    RULE_assemblyStatement = 82
    RULE_assemblyFlags = 83
    RULE_assemblyFlagString = 84
    RULE_yulStatement = 85
    RULE_yulBlock = 86
    RULE_yulVariableDeclaration = 87
    RULE_yulAssignment = 88
    RULE_yulIfStatement = 89
    RULE_yulForStatement = 90
    RULE_yulSwitchStatement = 91
    RULE_yulFunctionDefinition = 92
    RULE_yulPath = 93
    RULE_yulFunctionCall = 94
    RULE_yulBoolean = 95
    RULE_yulLiteral = 96
    RULE_yulExpression = 97
    RULE_doWhileStatement = 98
    RULE_continueStatement = 99
    RULE_breakStatement = 100
    RULE_returnStatement = 101
    RULE_emitStatement = 102
    RULE_revertStatement = 103
    RULE_requireStatement = 104
    RULE_assertStatement = 105
    RULE_variableDeclarationStatement = 106
    RULE_interactiveStatement = 107
    RULE_interactiveIfStatement = 108
    RULE_interactiveElseStatement = 109
    RULE_interactiveForStatement = 110
    RULE_interactiveWhileStatement = 111
    RULE_interactiveDoWhileDoStatement = 112
    RULE_interactiveDoWhileWhileStatement = 113
    RULE_interactiveTryStatement = 114
    RULE_interactiveCatchClause = 115
    RULE_elementaryTypeName = 116
    RULE_expression = 117
    RULE_literal = 118
    RULE_literalWithSubDenomination = 119
    RULE_tupleExpression = 120
    RULE_numberLiteral = 121
    RULE_identifier = 122
    RULE_userDefinedValueTypeDefinition = 123
    RULE_booleanLiteral = 124
    RULE_hexStringLiteral = 125
    RULE_unicodeStringLiteral = 126
    RULE_stringLiteral = 127
    RULE_overrideSpecifier = 128

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "importPath", "symbolAliases", "contractDefinition", 
                   "interfaceDefinition", "libraryDefinition", "inheritanceSpecifier", 
                   "callArgumentList", "identifierPath", "constantVariableDeclaration", 
                   "contractBodyElement", "constructorDefinition", "fallbackFunctionDefinition", 
                   "receiveFunctionDefinition", "stateVariableDeclaration", 
                   "errorDefinition", "errorParameter", "usingDirective", 
                   "userDefinableOperators", "structDefinition", "structMember", 
                   "modifierDefinition", "visibility", "modifierInvocation", 
                   "functionDefinition", "eventDefinition", "enumDefinition", 
                   "parameterList", "eventParameter", "variableDeclaration", 
                   "variableDeclarationTuple", "typeName", "mapping", "mappingKeyType", 
                   "functionTypeName", "interactiveSourceUnit", "interactiveEnumUnit", 
                   "interactiveStructUnit", "interactiveBlockUnit", "interactiveDoWhileUnit", 
                   "interactiveIfElseUnit", "interactiveCatchClauseUnit", 
                   "debugUnit", "debugGlobalVar", "globalValue", "debugStateVar", 
                   "debugLocalVar", "testingExpression", "subAccess", "stateLocalValue", 
                   "inlineArrayAnnotation", "inlineElement", "interactiveSimpleStatement", 
                   "interactiveVariableDeclarationStatement", "interactiveExpressionStatement", 
                   "interactiveStateVariableElement", "interactiveEnumDefinition", 
                   "interactiveStructDefinition", "interactiveEnumItems", 
                   "interactiveFunctionElement", "interactiveBlockItem", 
                   "dataLocation", "stateMutability", "block", "uncheckedBlock", 
                   "statement", "expressionStatement", "ifStatement", "tryStatement", 
                   "catchClause", "whileStatement", "simpleStatement", "forStatement", 
                   "inlineArrayExpression", "assemblyStatement", "assemblyFlags", 
                   "assemblyFlagString", "yulStatement", "yulBlock", "yulVariableDeclaration", 
                   "yulAssignment", "yulIfStatement", "yulForStatement", 
                   "yulSwitchStatement", "yulFunctionDefinition", "yulPath", 
                   "yulFunctionCall", "yulBoolean", "yulLiteral", "yulExpression", 
                   "doWhileStatement", "continueStatement", "breakStatement", 
                   "returnStatement", "emitStatement", "revertStatement", 
                   "requireStatement", "assertStatement", "variableDeclarationStatement", 
                   "interactiveStatement", "interactiveIfStatement", "interactiveElseStatement", 
                   "interactiveForStatement", "interactiveWhileStatement", 
                   "interactiveDoWhileDoStatement", "interactiveDoWhileWhileStatement", 
                   "interactiveTryStatement", "interactiveCatchClause", 
                   "elementaryTypeName", "expression", "literal", "literalWithSubDenomination", 
                   "tupleExpression", "numberLiteral", "identifier", "userDefinedValueTypeDefinition", 
                   "booleanLiteral", "hexStringLiteral", "unicodeStringLiteral", 
                   "stringLiteral", "overrideSpecifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    Int=112
    Uint=113
    Byte=114
    Fixed=115
    Ufixed=116
    DecimalNumber=117
    SubDenomination=118
    HexString=119
    HexNumber=120
    ReservedKeyword=121
    AnonymousKeyword=122
    BreakKeyword=123
    ConstantKeyword=124
    ImmutableKeyword=125
    ContinueKeyword=126
    LeaveKeyword=127
    ExternalKeyword=128
    IndexedKeyword=129
    InternalKeyword=130
    PayableKeyword=131
    PrivateKeyword=132
    PublicKeyword=133
    VirtualKeyword=134
    PureKeyword=135
    TypeKeyword=136
    ViewKeyword=137
    GlobalKeyword=138
    ConstructorKeyword=139
    FallbackKeyword=140
    ReceiveKeyword=141
    Identifier=142
    NonEmptyStringLiteral=143
    EmptyStringLiteral=144
    UnicodeStringLiteral=145
    VersionLiteral=146
    WS=147
    YulEvmBuiltin=148
    YulIdentifier=149
    YulHexNumber=150
    YulDecimalNumber=151
    YulStringLiteral=152
    COMMENT=153

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def usingDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UsingDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UsingDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def interfaceDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InterfaceDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InterfaceDefinitionContext,i)


        def libraryDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.LibraryDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.LibraryDefinitionContext,i)


        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,i)


        def constantVariableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ConstantVariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ConstantVariableDeclarationContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,i)


        def userDefinedValueTypeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedValueTypeDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedValueTypeDefinitionContext,i)


        def errorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ErrorDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ErrorDefinitionContext,i)


        def eventDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceUnit" ):
                return visitor.visitSourceUnit(self)
            else:
                return visitor.visitChildren(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 86312475172866) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 585467968201162815) != 0):
                self.state = 271
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 258
                    self.pragmaDirective()
                    pass

                elif la_ == 2:
                    self.state = 259
                    self.importDirective()
                    pass

                elif la_ == 3:
                    self.state = 260
                    self.usingDirective()
                    pass

                elif la_ == 4:
                    self.state = 261
                    self.contractDefinition()
                    pass

                elif la_ == 5:
                    self.state = 262
                    self.interfaceDefinition()
                    pass

                elif la_ == 6:
                    self.state = 263
                    self.libraryDefinition()
                    pass

                elif la_ == 7:
                    self.state = 264
                    self.functionDefinition()
                    pass

                elif la_ == 8:
                    self.state = 265
                    self.constantVariableDeclaration()
                    pass

                elif la_ == 9:
                    self.state = 266
                    self.structDefinition()
                    pass

                elif la_ == 10:
                    self.state = 267
                    self.enumDefinition()
                    pass

                elif la_ == 11:
                    self.state = 268
                    self.userDefinedValueTypeDefinition()
                    pass

                elif la_ == 12:
                    self.state = 269
                    self.errorDefinition()
                    pass

                elif la_ == 13:
                    self.state = 270
                    self.eventDefinition()
                    pass


                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 276
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaDirective" ):
                return visitor.visitPragmaDirective(self)
            else:
                return visitor.visitChildren(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(SolidityParser.T__0)
            self.state = 279
            self.pragmaName()
            self.state = 280
            self.pragmaValue()
            self.state = 281
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaName" ):
                return visitor.visitPragmaName(self)
            else:
                return visitor.visitChildren(self)




    def pragmaName(self):

        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaValue" ):
                return visitor.visitPragmaValue(self)
            else:
                return visitor.visitChildren(self)




    def pragmaValue(self):

        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 285
                self.match(SolidityParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 286
                self.version()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 287
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.versionConstraint()
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4080) != 0) or _la==117 or _la==146:
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 291
                    self.match(SolidityParser.T__3)


                self.state = 294
                self.versionConstraint()
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionOperator" ):
                return visitor.visitVersionOperator(self)
            else:
                return visitor.visitChildren(self)




    def versionOperator(self):

        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4064) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionConstraint" ):
                return visitor.visitVersionConstraint(self)
            else:
                return visitor.visitChildren(self)




    def versionConstraint(self):

        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.state = 310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4064) != 0):
                    self.state = 302
                    self.versionOperator()


                self.state = 305
                self.match(SolidityParser.VersionLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4064) != 0):
                    self.state = 306
                    self.versionOperator()


                self.state = 309
                self.match(SolidityParser.DecimalNumber)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.identifier()
            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 313
                self.match(SolidityParser.T__11)
                self.state = 314
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importPath(self):
            return self.getTypedRuleContext(SolidityParser.ImportPathContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def symbolAliases(self):
            return self.getTypedRuleContext(SolidityParser.SymbolAliasesContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDirective" ):
                return visitor.visitImportDirective(self)
            else:
                return visitor.visitChildren(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self.match(SolidityParser.T__12)
                self.state = 318
                self.importPath()
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 319
                    self.match(SolidityParser.T__11)
                    self.state = 320
                    self.identifier()


                self.state = 323
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 325
                self.match(SolidityParser.T__12)
                self.state = 330
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 326
                    self.symbolAliases()
                    pass
                elif token in [3]:
                    self.state = 327
                    self.match(SolidityParser.T__2)
                    self.state = 328
                    self.match(SolidityParser.T__11)
                    self.state = 329
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 332
                self.match(SolidityParser.T__13)
                self.state = 333
                self.importPath()
                self.state = 334
                self.match(SolidityParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_importPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportPath" ):
                listener.enterImportPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportPath" ):
                listener.exitImportPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportPath" ):
                return visitor.visitImportPath(self)
            else:
                return visitor.visitChildren(self)




    def importPath(self):

        localctx = SolidityParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_symbolAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolAliases" ):
                listener.enterSymbolAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolAliases" ):
                listener.exitSymbolAliases(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolAliases" ):
                return visitor.visitSymbolAliases(self)
            else:
                return visitor.visitChildren(self)




    def symbolAliases(self):

        localctx = SolidityParser.SymbolAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_symbolAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(SolidityParser.T__14)
            self.state = 341
            self.importDeclaration()
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 342
                self.match(SolidityParser.T__15)
                self.state = 343
                self.importDeclaration()
                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 349
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractBodyElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractBodyElementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractDefinition" ):
                return visitor.visitContractDefinition(self)
            else:
                return visitor.visitChildren(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 351
                self.match(SolidityParser.T__17)


            self.state = 354
            self.match(SolidityParser.T__18)
            self.state = 355
            self.identifier()
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 356
                self.match(SolidityParser.T__19)
                self.state = 357
                self.inheritanceSpecifier()
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 358
                    self.match(SolidityParser.T__15)
                    self.state = 359
                    self.inheritanceSpecifier()
                    self.state = 364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 367
            self.match(SolidityParser.T__14)
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 87411979714560) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 1089871126466658367) != 0):
                self.state = 368
                self.contractBodyElement()
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 374
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractBodyElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractBodyElementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interfaceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDefinition" ):
                listener.enterInterfaceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDefinition" ):
                listener.exitInterfaceDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDefinition" ):
                return visitor.visitInterfaceDefinition(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDefinition(self):

        localctx = SolidityParser.InterfaceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_interfaceDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(SolidityParser.T__20)
            self.state = 377
            self.identifier()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 378
                self.match(SolidityParser.T__19)
                self.state = 379
                self.inheritanceSpecifier()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 380
                    self.match(SolidityParser.T__15)
                    self.state = 381
                    self.inheritanceSpecifier()
                    self.state = 386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 389
            self.match(SolidityParser.T__14)
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 87411979714560) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 1089871126466658367) != 0):
                self.state = 390
                self.contractBodyElement()
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 396
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def contractBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractBodyElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractBodyElementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_libraryDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryDefinition" ):
                listener.enterLibraryDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryDefinition" ):
                listener.exitLibraryDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryDefinition" ):
                return visitor.visitLibraryDefinition(self)
            else:
                return visitor.visitChildren(self)




    def libraryDefinition(self):

        localctx = SolidityParser.LibraryDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_libraryDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.match(SolidityParser.T__21)
            self.state = 399
            self.identifier()
            self.state = 400
            self.match(SolidityParser.T__14)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 87411979714560) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 1089871126466658367) != 0):
                self.state = 401
                self.contractBodyElement()
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 407
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritanceSpecifier" ):
                return visitor.visitInheritanceSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.identifierPath()
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 410
                self.match(SolidityParser.T__22)
                self.state = 411
                self.callArgumentList()
                self.state = 412
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_callArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallArgumentList" ):
                listener.enterCallArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallArgumentList" ):
                listener.exitCallArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallArgumentList" ):
                return visitor.visitCallArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def callArgumentList(self):

        localctx = SolidityParser.CallArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_callArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(SolidityParser.T__22)
            self.state = 442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 34, 44, 55, 56, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 110, 112, 113, 114, 115, 116, 117, 119, 120, 131, 142, 143, 144, 145]:
                self.state = 417
                self.expression(0)
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 418
                    self.match(SolidityParser.T__15)
                    self.state = 419
                    self.expression(0)
                    self.state = 424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [15]:
                self.state = 425
                self.match(SolidityParser.T__14)

                self.state = 426
                self.identifier()
                self.state = 427
                self.match(SolidityParser.T__24)
                self.state = 428
                self.expression(0)
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 430
                    self.match(SolidityParser.T__15)
                    self.state = 431
                    self.identifier()
                    self.state = 432
                    self.match(SolidityParser.T__24)
                    self.state = 433
                    self.expression(0)
                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 440
                self.match(SolidityParser.T__16)
                pass
            elif token in [24]:
                pass
            else:
                pass
            self.state = 444
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_identifierPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierPath" ):
                listener.enterIdentifierPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierPath" ):
                listener.exitIdentifierPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierPath" ):
                return visitor.visitIdentifierPath(self)
            else:
                return visitor.visitChildren(self)




    def identifierPath(self):

        localctx = SolidityParser.IdentifierPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_identifierPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.identifier()
            self.state = 451
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 447
                    self.match(SolidityParser.T__25)
                    self.state = 448
                    self.identifier() 
                self.state = 453
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_constantVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantVariableDeclaration" ):
                listener.enterConstantVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantVariableDeclaration" ):
                listener.exitConstantVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantVariableDeclaration" ):
                return visitor.visitConstantVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constantVariableDeclaration(self):

        localctx = SolidityParser.ConstantVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_constantVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.typeName(0)
            self.state = 455
            self.match(SolidityParser.ConstantKeyword)
            self.state = 456
            self.identifier()
            self.state = 457
            self.match(SolidityParser.T__10)
            self.state = 458
            self.expression(0)
            self.state = 459
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractBodyElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ConstructorDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def fallbackFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FallbackFunctionDefinitionContext,0)


        def receiveFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ReceiveFunctionDefinitionContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def userDefinedValueTypeDefinition(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedValueTypeDefinitionContext,0)


        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def errorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ErrorDefinitionContext,0)


        def usingDirective(self):
            return self.getTypedRuleContext(SolidityParser.UsingDirectiveContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractBodyElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractBodyElement" ):
                listener.enterContractBodyElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractBodyElement" ):
                listener.exitContractBodyElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractBodyElement" ):
                return visitor.visitContractBodyElement(self)
            else:
                return visitor.visitChildren(self)




    def contractBodyElement(self):

        localctx = SolidityParser.ContractBodyElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_contractBodyElement)
        try:
            self.state = 473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.constructorDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 462
                self.functionDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 463
                self.modifierDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 464
                self.fallbackFunctionDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 465
                self.receiveFunctionDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 466
                self.structDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 467
                self.enumDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 468
                self.userDefinedValueTypeDefinition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 469
                self.stateVariableDeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 470
                self.eventDefinition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 471
                self.errorDefinition()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 472
                self.usingDirective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def PayableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PayableKeyword)
            else:
                return self.getToken(SolidityParser.PayableKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_constructorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDefinition" ):
                listener.enterConstructorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDefinition" ):
                listener.exitConstructorDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDefinition" ):
                return visitor.visitConstructorDefinition(self)
            else:
                return visitor.visitChildren(self)




    def constructorDefinition(self):

        localctx = SolidityParser.ConstructorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_constructorDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(SolidityParser.ConstructorKeyword)
            self.state = 476
            self.match(SolidityParser.T__22)
            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==46 or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 576460768946421823) != 0):
                self.state = 477
                self.parameterList()


            self.state = 480
            self.match(SolidityParser.T__23)
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 4107) != 0):
                self.state = 485
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [142]:
                    self.state = 481
                    self.modifierInvocation()
                    pass
                elif token in [131]:
                    self.state = 482
                    self.match(SolidityParser.PayableKeyword)
                    pass
                elif token in [130]:
                    self.state = 483
                    self.match(SolidityParser.InternalKeyword)
                    pass
                elif token in [133]:
                    self.state = 484
                    self.match(SolidityParser.PublicKeyword)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 490
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FallbackFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FallbackKeyword(self):
            return self.getToken(SolidityParser.FallbackKeyword, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterListContext,i)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_fallbackFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFallbackFunctionDefinition" ):
                listener.enterFallbackFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFallbackFunctionDefinition" ):
                listener.exitFallbackFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFallbackFunctionDefinition" ):
                return visitor.visitFallbackFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def fallbackFunctionDefinition(self):

        localctx = SolidityParser.FallbackFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fallbackFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.match(SolidityParser.FallbackKeyword)
            self.state = 493
            self.match(SolidityParser.T__22)
            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==46 or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 576460768946421823) != 0):
                self.state = 494
                self.parameterList()


            self.state = 497
            self.match(SolidityParser.T__23)
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & 2240937985) != 0):
                self.state = 503
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [128]:
                    self.state = 498
                    self.match(SolidityParser.ExternalKeyword)
                    pass
                elif token in [131, 135, 137]:
                    self.state = 499
                    self.stateMutability()
                    pass
                elif token in [142]:
                    self.state = 500
                    self.modifierInvocation()
                    pass
                elif token in [134]:
                    self.state = 501
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [111]:
                    self.state = 502
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 508
                self.match(SolidityParser.T__26)
                self.state = 509
                self.match(SolidityParser.T__22)
                self.state = 510
                self.parameterList()
                self.state = 511
                self.match(SolidityParser.T__23)


            self.state = 517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 515
                self.match(SolidityParser.T__1)
                pass
            elif token in [15]:
                self.state = 516
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def PayableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PayableKeyword)
            else:
                return self.getToken(SolidityParser.PayableKeyword, i)

        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_receiveFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveFunctionDefinition" ):
                listener.enterReceiveFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveFunctionDefinition" ):
                listener.exitReceiveFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveFunctionDefinition" ):
                return visitor.visitReceiveFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def receiveFunctionDefinition(self):

        localctx = SolidityParser.ReceiveFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_receiveFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(SolidityParser.ReceiveKeyword)
            self.state = 520
            self.match(SolidityParser.T__22)
            self.state = 521
            self.match(SolidityParser.T__23)
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & 2157051905) != 0):
                self.state = 527
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [128]:
                    self.state = 522
                    self.match(SolidityParser.ExternalKeyword)
                    pass
                elif token in [131]:
                    self.state = 523
                    self.match(SolidityParser.PayableKeyword)
                    pass
                elif token in [142]:
                    self.state = 524
                    self.modifierInvocation()
                    pass
                elif token in [134]:
                    self.state = 525
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [111]:
                    self.state = 526
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 532
                self.match(SolidityParser.T__1)
                pass
            elif token in [15]:
                self.state = 533
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def ImmutableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ImmutableKeyword)
            else:
                return self.getToken(SolidityParser.ImmutableKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateVariableDeclaration" ):
                return visitor.visitStateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.typeName(0)
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & 6840321) != 0):
                self.state = 543
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [133]:
                    self.state = 537
                    self.match(SolidityParser.PublicKeyword)
                    pass
                elif token in [130]:
                    self.state = 538
                    self.match(SolidityParser.InternalKeyword)
                    pass
                elif token in [132]:
                    self.state = 539
                    self.match(SolidityParser.PrivateKeyword)
                    pass
                elif token in [124]:
                    self.state = 540
                    self.match(SolidityParser.ConstantKeyword)
                    pass
                elif token in [125]:
                    self.state = 541
                    self.match(SolidityParser.ImmutableKeyword)
                    pass
                elif token in [111]:
                    self.state = 542
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 548
            self.identifier()
            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 549
                self.match(SolidityParser.T__10)
                self.state = 550
                self.expression(0)


            self.state = 553
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def errorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ErrorParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ErrorParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_errorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorDefinition" ):
                listener.enterErrorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorDefinition" ):
                listener.exitErrorDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorDefinition" ):
                return visitor.visitErrorDefinition(self)
            else:
                return visitor.visitChildren(self)




    def errorDefinition(self):

        localctx = SolidityParser.ErrorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_errorDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.match(SolidityParser.T__27)
            self.state = 556
            self.identifier()
            self.state = 557
            self.match(SolidityParser.T__22)
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==46 or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 576460768946421823) != 0):
                self.state = 558
                self.errorParameter()

                self.state = 559
                self.match(SolidityParser.T__15)
                self.state = 560
                self.errorParameter()


            self.state = 564
            self.match(SolidityParser.T__23)
            self.state = 565
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_errorParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorParameter" ):
                listener.enterErrorParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorParameter" ):
                listener.exitErrorParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorParameter" ):
                return visitor.visitErrorParameter(self)
            else:
                return visitor.visitChildren(self)




    def errorParameter(self):

        localctx = SolidityParser.ErrorParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_errorParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.typeName(0)
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 568
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierPathContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,i)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def GlobalKeyword(self):
            return self.getToken(SolidityParser.GlobalKeyword, 0)

        def userDefinableOperators(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinableOperatorsContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinableOperatorsContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingDirective" ):
                listener.enterUsingDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingDirective" ):
                listener.exitUsingDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingDirective" ):
                return visitor.visitUsingDirective(self)
            else:
                return visitor.visitChildren(self)




    def usingDirective(self):

        localctx = SolidityParser.UsingDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_usingDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(SolidityParser.T__28)
            self.state = 587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [142]:
                self.state = 572
                self.identifierPath()
                pass
            elif token in [15]:
                self.state = 573
                self.match(SolidityParser.T__14)

                self.state = 574
                self.identifierPath()
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 575
                    self.match(SolidityParser.T__11)
                    self.state = 576
                    self.userDefinableOperators()


                self.state = 579
                self.match(SolidityParser.T__15)
                self.state = 580
                self.identifierPath()
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 581
                    self.match(SolidityParser.T__11)
                    self.state = 582
                    self.userDefinableOperators()


                self.state = 585
                self.match(SolidityParser.T__16)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 589
            self.match(SolidityParser.T__29)
            self.state = 592
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.state = 590
                self.match(SolidityParser.T__2)
                pass
            elif token in [41, 46, 83, 84, 85, 86, 87, 88, 112, 113, 114, 115, 116, 142]:
                self.state = 591
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==138:
                self.state = 594
                self.match(SolidityParser.GlobalKeyword)


            self.state = 597
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinableOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinableOperators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinableOperators" ):
                listener.enterUserDefinableOperators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinableOperators" ):
                listener.exitUserDefinableOperators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinableOperators" ):
                return visitor.visitUserDefinableOperators(self)
            else:
                return visitor.visitChildren(self)




    def userDefinableOperators(self):

        localctx = SolidityParser.UserDefinableOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_userDefinableOperators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 547608332264) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def structMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructMemberContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructMemberContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefinition" ):
                return visitor.visitStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(SolidityParser.T__38)
            self.state = 602
            self.identifier()
            self.state = 603
            self.match(SolidityParser.T__14)
            self.state = 605 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 604
                self.structMember()
                self.state = 607 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==41 or _la==46 or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 576460768946421823) != 0)):
                    break

            self.state = 609
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_structMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructMember" ):
                listener.enterStructMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructMember" ):
                listener.exitStructMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructMember" ):
                return visitor.visitStructMember(self)
            else:
                return visitor.visitChildren(self)




    def structMember(self):

        localctx = SolidityParser.StructMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_structMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.typeName(0)
            self.state = 612
            self.identifier()
            self.state = 613
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierDefinition" ):
                return visitor.visitModifierDefinition(self)
            else:
                return visitor.visitChildren(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(SolidityParser.T__39)
            self.state = 616
            self.identifier()
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 617
                self.match(SolidityParser.T__22)
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41 or _la==46 or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 576460768946421823) != 0):
                    self.state = 618
                    self.parameterList()


                self.state = 621
                self.match(SolidityParser.T__23)


            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==111 or _la==134:
                self.state = 626
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [134]:
                    self.state = 624
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [111]:
                    self.state = 625
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 633
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 631
                self.match(SolidityParser.T__1)
                pass
            elif token in [15]:
                self.state = 632
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def InternalKeyword(self):
            return self.getToken(SolidityParser.InternalKeyword, 0)

        def ExternalKeyword(self):
            return self.getToken(SolidityParser.ExternalKeyword, 0)

        def PrivateKeyword(self):
            return self.getToken(SolidityParser.PrivateKeyword, 0)

        def PublicKeyword(self):
            return self.getToken(SolidityParser.PublicKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = SolidityParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            _la = self._input.LA(1)
            if not(((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 53) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierInvocation" ):
                return visitor.visitModifierInvocation(self)
            else:
                return visitor.visitChildren(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.identifierPath()
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 638
                self.callArgumentList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterListContext,i)


        def visibility(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VisibilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VisibilityContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(SolidityParser.T__40)
            self.state = 642
            self.identifier()
            self.state = 643
            self.match(SolidityParser.T__22)
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==46 or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 576460768946421823) != 0):
                self.state = 644
                self.parameterList()


            self.state = 647
            self.match(SolidityParser.T__23)
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & 2247753729) != 0):
                self.state = 653
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [128, 130, 132, 133]:
                    self.state = 648
                    self.visibility()
                    pass
                elif token in [131, 135, 137]:
                    self.state = 649
                    self.stateMutability()
                    pass
                elif token in [142]:
                    self.state = 650
                    self.modifierInvocation()
                    pass
                elif token in [134]:
                    self.state = 651
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [111]:
                    self.state = 652
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 658
                self.match(SolidityParser.T__26)
                self.state = 659
                self.match(SolidityParser.T__22)
                self.state = 660
                self.parameterList()
                self.state = 661
                self.match(SolidityParser.T__23)


            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 665
                self.match(SolidityParser.T__1)
                pass
            elif token in [15]:
                self.state = 666
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDefinition" ):
                return visitor.visitEventDefinition(self)
            else:
                return visitor.visitChildren(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(SolidityParser.T__41)
            self.state = 670
            self.identifier()
            self.state = 671
            self.match(SolidityParser.T__22)
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==46 or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 576460768946421823) != 0):
                self.state = 672
                self.eventParameter()
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 673
                    self.match(SolidityParser.T__15)
                    self.state = 674
                    self.eventParameter()
                    self.state = 679
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 682
                self.match(SolidityParser.AnonymousKeyword)


            self.state = 685
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDefinition" ):
                return visitor.visitEnumDefinition(self)
            else:
                return visitor.visitChildren(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(SolidityParser.T__42)
            self.state = 688
            self.identifier()
            self.state = 689
            self.match(SolidityParser.T__14)
            self.state = 690
            self.identifier()
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 691
                self.match(SolidityParser.T__15)
                self.state = 692
                self.identifier()
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 698
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.TypeNameContext)
            else:
                return self.getTypedRuleContext(SolidityParser.TypeNameContext,i)


        def dataLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.DataLocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.DataLocationContext,i)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.typeName(0)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8070450532247928832) != 0):
                self.state = 701
                self.dataLocation()


            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 704
                self.identifier()


            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 707
                self.match(SolidityParser.T__15)
                self.state = 708
                self.typeName(0)
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8070450532247928832) != 0):
                    self.state = 709
                    self.dataLocation()


                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 712
                    self.identifier()


                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameter" ):
                return visitor.visitEventParameter(self)
            else:
                return visitor.visitChildren(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.typeName(0)
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 721
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def dataLocation(self):
            return self.getTypedRuleContext(SolidityParser.DataLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.typeName(0)
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8070450532247928832) != 0):
                self.state = 725
                self.dataLocation()


            self.state = 728
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationTupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationTuple" ):
                listener.enterVariableDeclarationTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationTuple" ):
                listener.exitVariableDeclarationTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationTuple" ):
                return visitor.visitVariableDeclarationTuple(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationTuple(self):

        localctx = SolidityParser.VariableDeclarationTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_variableDeclarationTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(SolidityParser.T__22)
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 732 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 731
                    self.match(SolidityParser.T__15)
                    self.state = 734 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==16):
                        break



            self.state = 738
            self.variableDeclaration()
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 739
                self.match(SolidityParser.T__15)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41 or _la==46 or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 576460768946421823) != 0):
                    self.state = 740
                    self.variableDeclaration()


                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 748
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ArrayTypeContext(TypeNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.TypeNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)


    class BasicTypeContext(TypeNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.TypeNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)


    class FunctionTypeContext(TypeNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.TypeNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionType" ):
                return visitor.visitFunctionType(self)
            else:
                return visitor.visitChildren(self)


    class UserDefinedTypeContext(TypeNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.TypeNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedType" ):
                listener.enterUserDefinedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedType" ):
                listener.exitUserDefinedType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedType" ):
                return visitor.visitUserDefinedType(self)
            else:
                return visitor.visitChildren(self)


    class MapTypeContext(TypeNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.TypeNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapType" ):
                listener.enterMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapType" ):
                listener.exitMapType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapType" ):
                return visitor.visitMapType(self)
            else:
                return visitor.visitChildren(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83, 84, 85, 86, 87, 88, 112, 113, 114, 115, 116]:
                localctx = SolidityParser.BasicTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 751
                self.elementaryTypeName()
                pass
            elif token in [41]:
                localctx = SolidityParser.FunctionTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 752
                self.functionTypeName()
                pass
            elif token in [46]:
                localctx = SolidityParser.MapTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 753
                self.mapping()
                pass
            elif token in [142]:
                localctx = SolidityParser.UserDefinedTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 754
                self.identifierPath()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 765
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.ArrayTypeContext(self, SolidityParser.TypeNameContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 757
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 758
                    self.match(SolidityParser.T__43)
                    self.state = 760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 108104000431194176) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 8647192999643579391) != 0):
                        self.state = 759
                        self.expression(0)


                    self.state = 762
                    self.match(SolidityParser.T__44) 
                self.state = 767
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mappingKeyType(self):
            return self.getTypedRuleContext(SolidityParser.MappingKeyTypeContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping" ):
                return visitor.visitMapping(self)
            else:
                return visitor.visitChildren(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_mapping)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(SolidityParser.T__45)
            self.state = 769
            self.match(SolidityParser.T__22)
            self.state = 770
            self.mappingKeyType()
            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 771
                self.identifier()


            self.state = 774
            self.match(SolidityParser.T__46)
            self.state = 775
            self.typeName(0)
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 776
                self.identifier()


            self.state = 779
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingKeyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingKeyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingKeyType" ):
                listener.enterMappingKeyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingKeyType" ):
                listener.exitMappingKeyType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMappingKeyType" ):
                return visitor.visitMappingKeyType(self)
            else:
                return visitor.visitChildren(self)




    def mappingKeyType(self):

        localctx = SolidityParser.MappingKeyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_mappingKeyType)
        try:
            self.state = 783
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83, 84, 85, 86, 87, 88, 112, 113, 114, 115, 116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 781
                self.elementaryTypeName()
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.identifierPath()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterListContext,i)


        def visibility(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VisibilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VisibilityContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeName" ):
                return visitor.visitFunctionTypeName(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_functionTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(SolidityParser.T__40)
            self.state = 786
            self.match(SolidityParser.T__22)
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==46 or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 576460768946421823) != 0):
                self.state = 787
                self.parameterList()


            self.state = 790
            self.match(SolidityParser.T__23)
            self.state = 795
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 793
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [128, 130, 132, 133]:
                        self.state = 791
                        self.visibility()
                        pass
                    elif token in [131, 135, 137]:
                        self.state = 792
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 797
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 798
                self.match(SolidityParser.T__26)
                self.state = 799
                self.match(SolidityParser.T__22)
                self.state = 800
                self.parameterList()
                self.state = 801
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveSourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def interactiveStateVariableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveStateVariableElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveStateVariableElementContext,i)


        def interactiveFunctionElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveFunctionElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveFunctionElementContext,i)


        def interfaceDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InterfaceDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InterfaceDefinitionContext,i)


        def libraryDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.LibraryDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.LibraryDefinitionContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveSourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveSourceUnit" ):
                listener.enterInteractiveSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveSourceUnit" ):
                listener.exitInteractiveSourceUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveSourceUnit" ):
                return visitor.visitInteractiveSourceUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveSourceUnit(self):

        localctx = SolidityParser.InteractiveSourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_interactiveSourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 87411986800642) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 1089871126466658367) != 0):
                self.state = 812
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 805
                    self.interactiveStateVariableElement()
                    pass

                elif la_ == 2:
                    self.state = 806
                    self.interactiveFunctionElement()
                    pass

                elif la_ == 3:
                    self.state = 807
                    self.interfaceDefinition()
                    pass

                elif la_ == 4:
                    self.state = 808
                    self.libraryDefinition()
                    pass

                elif la_ == 5:
                    self.state = 809
                    self.contractDefinition()
                    pass

                elif la_ == 6:
                    self.state = 810
                    self.pragmaDirective()
                    pass

                elif la_ == 7:
                    self.state = 811
                    self.importDirective()
                    pass


                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 817
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveEnumUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def interactiveEnumItems(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveEnumItemsContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveEnumItemsContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveEnumUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveEnumUnit" ):
                listener.enterInteractiveEnumUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveEnumUnit" ):
                listener.exitInteractiveEnumUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveEnumUnit" ):
                return visitor.visitInteractiveEnumUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveEnumUnit(self):

        localctx = SolidityParser.InteractiveEnumUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_interactiveEnumUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==142:
                self.state = 819
                self.interactiveEnumItems()
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 825
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveStructUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def structMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructMemberContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructMemberContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveStructUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveStructUnit" ):
                listener.enterInteractiveStructUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveStructUnit" ):
                listener.exitInteractiveStructUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveStructUnit" ):
                return visitor.visitInteractiveStructUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveStructUnit(self):

        localctx = SolidityParser.InteractiveStructUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_interactiveStructUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==41 or _la==46 or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 576460768946421823) != 0):
                self.state = 827
                self.structMember()
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 833
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveBlockUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def interactiveBlockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveBlockItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveBlockItemContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveBlockUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveBlockUnit" ):
                listener.enterInteractiveBlockUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveBlockUnit" ):
                listener.exitInteractiveBlockUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveBlockUnit" ):
                return visitor.visitInteractiveBlockUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveBlockUnit(self):

        localctx = SolidityParser.InteractiveBlockUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_interactiveBlockUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -9115195467582406592) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 5314036454601515061) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 30721) != 0):
                self.state = 835
                self.interactiveBlockItem()
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 841
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveDoWhileUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def interactiveDoWhileWhileStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveDoWhileWhileStatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveDoWhileWhileStatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveDoWhileUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveDoWhileUnit" ):
                listener.enterInteractiveDoWhileUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveDoWhileUnit" ):
                listener.exitInteractiveDoWhileUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveDoWhileUnit" ):
                return visitor.visitInteractiveDoWhileUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveDoWhileUnit(self):

        localctx = SolidityParser.InteractiveDoWhileUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_interactiveDoWhileUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 843
                self.interactiveDoWhileWhileStatement()
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 849
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveIfElseUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def interactiveElseStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveElseStatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveElseStatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveIfElseUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveIfElseUnit" ):
                listener.enterInteractiveIfElseUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveIfElseUnit" ):
                listener.exitInteractiveIfElseUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveIfElseUnit" ):
                return visitor.visitInteractiveIfElseUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveIfElseUnit(self):

        localctx = SolidityParser.InteractiveIfElseUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_interactiveIfElseUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==65:
                self.state = 851
                self.interactiveElseStatement()
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 857
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveCatchClauseUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def interactiveCatchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveCatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveCatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveCatchClauseUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveCatchClauseUnit" ):
                listener.enterInteractiveCatchClauseUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveCatchClauseUnit" ):
                listener.exitInteractiveCatchClauseUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveCatchClauseUnit" ):
                return visitor.visitInteractiveCatchClauseUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveCatchClauseUnit(self):

        localctx = SolidityParser.InteractiveCatchClauseUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_interactiveCatchClauseUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==67:
                self.state = 859
                self.interactiveCatchClause()
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 865
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DebugUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def debugGlobalVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.DebugGlobalVarContext)
            else:
                return self.getTypedRuleContext(SolidityParser.DebugGlobalVarContext,i)


        def debugStateVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.DebugStateVarContext)
            else:
                return self.getTypedRuleContext(SolidityParser.DebugStateVarContext,i)


        def debugLocalVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.DebugLocalVarContext)
            else:
                return self.getTypedRuleContext(SolidityParser.DebugLocalVarContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_debugUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDebugUnit" ):
                listener.enterDebugUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDebugUnit" ):
                listener.exitDebugUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDebugUnit" ):
                return visitor.visitDebugUnit(self)
            else:
                return visitor.visitChildren(self)




    def debugUnit(self):

        localctx = SolidityParser.DebugUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_debugUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==48:
                self.state = 870
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 867
                    self.debugGlobalVar()
                    pass

                elif la_ == 2:
                    self.state = 868
                    self.debugStateVar()
                    pass

                elif la_ == 3:
                    self.state = 869
                    self.debugLocalVar()
                    pass


                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 875
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DebugGlobalVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def globalValue(self):
            return self.getTypedRuleContext(SolidityParser.GlobalValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_debugGlobalVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDebugGlobalVar" ):
                listener.enterDebugGlobalVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDebugGlobalVar" ):
                listener.exitDebugGlobalVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDebugGlobalVar" ):
                return visitor.visitDebugGlobalVar(self)
            else:
                return visitor.visitChildren(self)




    def debugGlobalVar(self):

        localctx = SolidityParser.DebugGlobalVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_debugGlobalVar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(SolidityParser.T__47)
            self.state = 878
            self.match(SolidityParser.T__48)
            self.state = 879
            self.identifier()
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 880
                self.match(SolidityParser.T__25)
                self.state = 881
                self.identifier()


            self.state = 884
            self.match(SolidityParser.T__10)
            self.state = 885
            self.globalValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_globalValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GlobalAddressValueContext(GlobalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.GlobalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalAddressValue" ):
                listener.enterGlobalAddressValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalAddressValue" ):
                listener.exitGlobalAddressValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalAddressValue" ):
                return visitor.visitGlobalAddressValue(self)
            else:
                return visitor.visitChildren(self)


    class GlobalIntValueContext(GlobalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.GlobalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalIntValue" ):
                listener.enterGlobalIntValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalIntValue" ):
                listener.exitGlobalIntValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalIntValue" ):
                return visitor.visitGlobalIntValue(self)
            else:
                return visitor.visitChildren(self)



    def globalValue(self):

        localctx = SolidityParser.GlobalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_globalValue)
        try:
            self.state = 895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                localctx = SolidityParser.GlobalIntValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 887
                self.match(SolidityParser.T__43)
                self.state = 888
                self.numberLiteral()
                self.state = 889
                self.match(SolidityParser.T__15)
                self.state = 890
                self.numberLiteral()
                self.state = 891
                self.match(SolidityParser.T__44)
                pass
            elif token in [50]:
                localctx = SolidityParser.GlobalAddressValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 893
                self.match(SolidityParser.T__49)
                self.state = 894
                self.numberLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DebugStateVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testingExpression(self):
            return self.getTypedRuleContext(SolidityParser.TestingExpressionContext,0)


        def stateLocalValue(self):
            return self.getTypedRuleContext(SolidityParser.StateLocalValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_debugStateVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDebugStateVar" ):
                listener.enterDebugStateVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDebugStateVar" ):
                listener.exitDebugStateVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDebugStateVar" ):
                return visitor.visitDebugStateVar(self)
            else:
                return visitor.visitChildren(self)




    def debugStateVar(self):

        localctx = SolidityParser.DebugStateVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_debugStateVar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(SolidityParser.T__47)
            self.state = 898
            self.match(SolidityParser.T__50)
            self.state = 899
            self.testingExpression()
            self.state = 900
            self.match(SolidityParser.T__10)
            self.state = 901
            self.stateLocalValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DebugLocalVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testingExpression(self):
            return self.getTypedRuleContext(SolidityParser.TestingExpressionContext,0)


        def stateLocalValue(self):
            return self.getTypedRuleContext(SolidityParser.StateLocalValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_debugLocalVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDebugLocalVar" ):
                listener.enterDebugLocalVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDebugLocalVar" ):
                listener.exitDebugLocalVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDebugLocalVar" ):
                return visitor.visitDebugLocalVar(self)
            else:
                return visitor.visitChildren(self)




    def debugLocalVar(self):

        localctx = SolidityParser.DebugLocalVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_debugLocalVar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(SolidityParser.T__47)
            self.state = 904
            self.match(SolidityParser.T__51)
            self.state = 905
            self.testingExpression()
            self.state = 906
            self.match(SolidityParser.T__10)
            self.state = 907
            self.stateLocalValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestingExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def subAccess(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.SubAccessContext)
            else:
                return self.getTypedRuleContext(SolidityParser.SubAccessContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_testingExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestingExpression" ):
                listener.enterTestingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestingExpression" ):
                listener.exitTestingExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestingExpression" ):
                return visitor.visitTestingExpression(self)
            else:
                return visitor.visitChildren(self)




    def testingExpression(self):

        localctx = SolidityParser.TestingExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_testingExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.identifier()
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26 or _la==44:
                self.state = 910
                self.subAccess()
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_subAccess

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TestingMemberAccessContext(SubAccessContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.SubAccessContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestingMemberAccess" ):
                listener.enterTestingMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestingMemberAccess" ):
                listener.exitTestingMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestingMemberAccess" ):
                return visitor.visitTestingMemberAccess(self)
            else:
                return visitor.visitChildren(self)


    class TestingIndexAccessContext(SubAccessContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.SubAccessContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestingIndexAccess" ):
                listener.enterTestingIndexAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestingIndexAccess" ):
                listener.exitTestingIndexAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestingIndexAccess" ):
                return visitor.visitTestingIndexAccess(self)
            else:
                return visitor.visitChildren(self)



    def subAccess(self):

        localctx = SolidityParser.SubAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_subAccess)
        try:
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                localctx = SolidityParser.TestingMemberAccessContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.match(SolidityParser.T__25)
                self.state = 917
                self.identifier()
                pass
            elif token in [44]:
                localctx = SolidityParser.TestingIndexAccessContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 918
                self.match(SolidityParser.T__43)
                self.state = 919
                self.expression(0)
                self.state = 920
                self.match(SolidityParser.T__44)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateLocalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_stateLocalValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StateLocalBoolValueContext(StateLocalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.StateLocalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateLocalBoolValue" ):
                listener.enterStateLocalBoolValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateLocalBoolValue" ):
                listener.exitStateLocalBoolValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateLocalBoolValue" ):
                return visitor.visitStateLocalBoolValue(self)
            else:
                return visitor.visitChildren(self)


    class StateLocalStringValueContext(StateLocalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.StateLocalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hexStringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexStringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateLocalStringValue" ):
                listener.enterStateLocalStringValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateLocalStringValue" ):
                listener.exitStateLocalStringValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateLocalStringValue" ):
                return visitor.visitStateLocalStringValue(self)
            else:
                return visitor.visitChildren(self)


    class StateLocalEnumValueContext(StateLocalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.StateLocalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateLocalEnumValue" ):
                listener.enterStateLocalEnumValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateLocalEnumValue" ):
                listener.exitStateLocalEnumValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateLocalEnumValue" ):
                return visitor.visitStateLocalEnumValue(self)
            else:
                return visitor.visitChildren(self)


    class StateLocalInlineValueContext(StateLocalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.StateLocalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineArrayAnnotation(self):
            return self.getTypedRuleContext(SolidityParser.InlineArrayAnnotationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateLocalInlineValue" ):
                listener.enterStateLocalInlineValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateLocalInlineValue" ):
                listener.exitStateLocalInlineValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateLocalInlineValue" ):
                return visitor.visitStateLocalInlineValue(self)
            else:
                return visitor.visitChildren(self)


    class StateLocalIntValueContext(StateLocalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.StateLocalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateLocalIntValue" ):
                listener.enterStateLocalIntValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateLocalIntValue" ):
                listener.exitStateLocalIntValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateLocalIntValue" ):
                return visitor.visitStateLocalIntValue(self)
            else:
                return visitor.visitChildren(self)


    class StateLocalByteValueContext(StateLocalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.StateLocalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def hexStringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexStringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateLocalByteValue" ):
                listener.enterStateLocalByteValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateLocalByteValue" ):
                listener.exitStateLocalByteValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateLocalByteValue" ):
                return visitor.visitStateLocalByteValue(self)
            else:
                return visitor.visitChildren(self)


    class StateLocalAddressValueContext(StateLocalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.StateLocalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateLocalAddressValue" ):
                listener.enterStateLocalAddressValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateLocalAddressValue" ):
                listener.exitStateLocalAddressValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateLocalAddressValue" ):
                return visitor.visitStateLocalAddressValue(self)
            else:
                return visitor.visitChildren(self)



    def stateLocalValue(self):

        localctx = SolidityParser.StateLocalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_stateLocalValue)
        self._la = 0 # Token type
        try:
            self.state = 949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                localctx = SolidityParser.StateLocalIntValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.match(SolidityParser.T__43)
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 925
                    self.match(SolidityParser.T__33)


                self.state = 928
                self.numberLiteral()
                self.state = 929
                self.match(SolidityParser.T__15)
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 930
                    self.match(SolidityParser.T__33)


                self.state = 933
                self.numberLiteral()
                self.state = 934
                self.match(SolidityParser.T__44)
                pass
            elif token in [50]:
                localctx = SolidityParser.StateLocalAddressValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 936
                self.match(SolidityParser.T__49)
                self.state = 937
                self.numberLiteral()
                pass
            elif token in [53]:
                localctx = SolidityParser.StateLocalByteValueContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 938
                self.match(SolidityParser.T__52)
                self.state = 939
                self.hexStringLiteral()
                pass
            elif token in [54]:
                localctx = SolidityParser.StateLocalStringValueContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 940
                self.match(SolidityParser.T__53)
                self.state = 941
                self.hexStringLiteral()
                pass
            elif token in [55, 56, 57]:
                localctx = SolidityParser.StateLocalBoolValueContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 942
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 252201579132747776) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [142]:
                localctx = SolidityParser.StateLocalEnumValueContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 943
                self.identifier()
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==26:
                    self.state = 944
                    self.match(SolidityParser.T__25)
                    self.state = 945
                    self.identifier()


                pass
            elif token in [58]:
                localctx = SolidityParser.StateLocalInlineValueContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 948
                self.inlineArrayAnnotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineArrayAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inlineElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InlineElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InlineElementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_inlineArrayAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineArrayAnnotation" ):
                listener.enterInlineArrayAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineArrayAnnotation" ):
                listener.exitInlineArrayAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineArrayAnnotation" ):
                return visitor.visitInlineArrayAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def inlineArrayAnnotation(self):

        localctx = SolidityParser.InlineArrayAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_inlineArrayAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(SolidityParser.T__57)
            self.state = 952
            self.match(SolidityParser.T__43)
            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 864691145635004416) != 0) or _la==117 or _la==120:
                self.state = 953
                self.inlineElement()
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 954
                    self.match(SolidityParser.T__15)
                    self.state = 955
                    self.inlineElement()
                    self.state = 960
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 963
            self.match(SolidityParser.T__44)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_inlineElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NestedArrayElementContext(InlineElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.InlineElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineArrayAnnotation(self):
            return self.getTypedRuleContext(SolidityParser.InlineArrayAnnotationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedArrayElement" ):
                listener.enterNestedArrayElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedArrayElement" ):
                listener.exitNestedArrayElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedArrayElement" ):
                return visitor.visitNestedArrayElement(self)
            else:
                return visitor.visitChildren(self)


    class InlineIntElementContext(InlineElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.InlineElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineIntElement" ):
                listener.enterInlineIntElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineIntElement" ):
                listener.exitInlineIntElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineIntElement" ):
                return visitor.visitInlineIntElement(self)
            else:
                return visitor.visitChildren(self)


    class AddrArrayElementContext(InlineElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.InlineElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddrArrayElement" ):
                listener.enterAddrArrayElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddrArrayElement" ):
                listener.exitAddrArrayElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddrArrayElement" ):
                return visitor.visitAddrArrayElement(self)
            else:
                return visitor.visitChildren(self)



    def inlineElement(self):

        localctx = SolidityParser.InlineElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_inlineElement)
        self._la = 0 # Token type
        try:
            self.state = 983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34, 117, 120]:
                localctx = SolidityParser.InlineIntElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 965
                    self.match(SolidityParser.T__33)


                self.state = 968
                self.numberLiteral()
                pass
            elif token in [58]:
                localctx = SolidityParser.NestedArrayElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 969
                self.match(SolidityParser.T__57)
                self.state = 970
                self.inlineArrayAnnotation()
                pass
            elif token in [59]:
                localctx = SolidityParser.AddrArrayElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 971
                self.match(SolidityParser.T__58)
                self.state = 972
                self.match(SolidityParser.T__43)
                self.state = 973
                self.numberLiteral()
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 974
                    self.match(SolidityParser.T__15)
                    self.state = 975
                    self.numberLiteral()
                    self.state = 980
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 981
                self.match(SolidityParser.T__44)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveSimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interactiveVariableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveVariableDeclarationStatementContext,0)


        def interactiveExpressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveSimpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveSimpleStatement" ):
                listener.enterInteractiveSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveSimpleStatement" ):
                listener.exitInteractiveSimpleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveSimpleStatement" ):
                return visitor.visitInteractiveSimpleStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveSimpleStatement(self):

        localctx = SolidityParser.InteractiveSimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_interactiveSimpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 985
                self.interactiveVariableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 986
                self.interactiveExpressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveVariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def variableDeclarationTuple(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationTupleContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveVariableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveVariableDeclarationStatement" ):
                listener.enterInteractiveVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveVariableDeclarationStatement" ):
                listener.exitInteractiveVariableDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveVariableDeclarationStatement" ):
                return visitor.visitInteractiveVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveVariableDeclarationStatement(self):

        localctx = SolidityParser.InteractiveVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_interactiveVariableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.state = 1002
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41, 46, 83, 84, 85, 86, 87, 88, 112, 113, 114, 115, 116, 142]:
                self.enterOuterAlt(localctx, 1)
                self.state = 989
                self.variableDeclaration()
                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 990
                    self.match(SolidityParser.T__10)
                    self.state = 991
                    self.expression(0)


                self.state = 994
                self.match(SolidityParser.T__1)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 996
                self.variableDeclarationTuple()
                self.state = 997
                self.match(SolidityParser.T__10)
                self.state = 998
                self.expression(0)
                self.state = 1000
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveExpressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveExpressionStatement" ):
                listener.enterInteractiveExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveExpressionStatement" ):
                listener.exitInteractiveExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveExpressionStatement" ):
                return visitor.visitInteractiveExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveExpressionStatement(self):

        localctx = SolidityParser.InteractiveExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_interactiveExpressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.expression(0)
            self.state = 1005
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveStateVariableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interactiveEnumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveEnumDefinitionContext,0)


        def interactiveStructDefinition(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveStructDefinitionContext,0)


        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def userDefinedValueTypeDefinition(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedValueTypeDefinitionContext,0)


        def usingDirective(self):
            return self.getTypedRuleContext(SolidityParser.UsingDirectiveContext,0)


        def constantVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.ConstantVariableDeclarationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveStateVariableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveStateVariableElement" ):
                listener.enterInteractiveStateVariableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveStateVariableElement" ):
                listener.exitInteractiveStateVariableElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveStateVariableElement" ):
                return visitor.visitInteractiveStateVariableElement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveStateVariableElement(self):

        localctx = SolidityParser.InteractiveStateVariableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_interactiveStateVariableElement)
        try:
            self.state = 1013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1007
                self.interactiveEnumDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1008
                self.interactiveStructDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1009
                self.stateVariableDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1010
                self.userDefinedValueTypeDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1011
                self.usingDirective()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1012
                self.constantVariableDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveEnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveEnumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveEnumDefinition" ):
                listener.enterInteractiveEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveEnumDefinition" ):
                listener.exitInteractiveEnumDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveEnumDefinition" ):
                return visitor.visitInteractiveEnumDefinition(self)
            else:
                return visitor.visitChildren(self)




    def interactiveEnumDefinition(self):

        localctx = SolidityParser.InteractiveEnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_interactiveEnumDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(SolidityParser.T__42)
            self.state = 1016
            self.identifier()
            self.state = 1017
            self.match(SolidityParser.T__14)
            self.state = 1018
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveStructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveStructDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveStructDefinition" ):
                listener.enterInteractiveStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveStructDefinition" ):
                listener.exitInteractiveStructDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveStructDefinition" ):
                return visitor.visitInteractiveStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def interactiveStructDefinition(self):

        localctx = SolidityParser.InteractiveStructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_interactiveStructDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(SolidityParser.T__38)
            self.state = 1021
            self.identifier()
            self.state = 1022
            self.match(SolidityParser.T__14)
            self.state = 1023
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveEnumItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveEnumItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveEnumItems" ):
                listener.enterInteractiveEnumItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveEnumItems" ):
                listener.exitInteractiveEnumItems(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveEnumItems" ):
                return visitor.visitInteractiveEnumItems(self)
            else:
                return visitor.visitChildren(self)




    def interactiveEnumItems(self):

        localctx = SolidityParser.InteractiveEnumItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_interactiveEnumItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.identifier()
            self.state = 1030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 1026
                self.match(SolidityParser.T__15)
                self.state = 1027
                self.identifier()
                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveFunctionElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ConstructorDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def errorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ErrorDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def fallbackFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FallbackFunctionDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def receiveFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ReceiveFunctionDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveFunctionElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveFunctionElement" ):
                listener.enterInteractiveFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveFunctionElement" ):
                listener.exitInteractiveFunctionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveFunctionElement" ):
                return visitor.visitInteractiveFunctionElement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveFunctionElement(self):

        localctx = SolidityParser.InteractiveFunctionElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_interactiveFunctionElement)
        try:
            self.state = 1040
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1033
                self.constructorDefinition()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1034
                self.eventDefinition()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1035
                self.errorDefinition()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1036
                self.functionDefinition()
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1037
                self.fallbackFunctionDefinition()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1038
                self.modifierDefinition()
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1039
                self.receiveFunctionDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveBlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interactiveStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveStatementContext,0)


        def uncheckedBlock(self):
            return self.getTypedRuleContext(SolidityParser.UncheckedBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveBlockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveBlockItem" ):
                listener.enterInteractiveBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveBlockItem" ):
                listener.exitInteractiveBlockItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveBlockItem" ):
                return visitor.visitInteractiveBlockItem(self)
            else:
                return visitor.visitChildren(self)




    def interactiveBlockItem(self):

        localctx = SolidityParser.InteractiveBlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_interactiveBlockItem)
        try:
            self.state = 1044
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 30, 34, 41, 44, 46, 55, 56, 64, 66, 68, 69, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 110, 112, 113, 114, 115, 116, 117, 119, 120, 123, 126, 131, 142, 143, 144, 145]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1042
                self.interactiveStatement()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.uncheckedBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_dataLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataLocation" ):
                listener.enterDataLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataLocation" ):
                listener.exitDataLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataLocation" ):
                return visitor.visitDataLocation(self)
            else:
                return visitor.visitChildren(self)




    def dataLocation(self):

        localctx = SolidityParser.DataLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dataLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8070450532247928832) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateMutability" ):
                return visitor.visitStateMutability(self)
            else:
                return visitor.visitChildren(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            _la = self._input.LA(1)
            if not(((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 81) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def uncheckedBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UncheckedBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UncheckedBlockContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.match(SolidityParser.T__14)
            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -9115195467582373824) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 5314036454601515061) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & 30721) != 0):
                self.state = 1053
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [6, 15, 23, 30, 34, 41, 44, 46, 55, 56, 64, 66, 68, 69, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 110, 112, 113, 114, 115, 116, 117, 119, 120, 123, 126, 131, 142, 143, 144, 145]:
                    self.state = 1051
                    self.statement()
                    pass
                elif token in [63]:
                    self.state = 1052
                    self.uncheckedBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1058
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UncheckedBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_uncheckedBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedBlock" ):
                listener.enterUncheckedBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedBlock" ):
                listener.exitUncheckedBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncheckedBlock" ):
                return visitor.visitUncheckedBlock(self)
            else:
                return visitor.visitChildren(self)




    def uncheckedBlock(self):

        localctx = SolidityParser.UncheckedBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_uncheckedBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(SolidityParser.T__62)
            self.state = 1061
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def revertStatement(self):
            return self.getTypedRuleContext(SolidityParser.RevertStatementContext,0)


        def requireStatement(self):
            return self.getTypedRuleContext(SolidityParser.RequireStatementContext,0)


        def assertStatement(self):
            return self.getTypedRuleContext(SolidityParser.AssertStatementContext,0)


        def assemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_statement)
        try:
            self.state = 1078
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.block()
                pass
            elif token in [6, 23, 34, 41, 44, 46, 55, 56, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 110, 112, 113, 114, 115, 116, 117, 119, 120, 131, 142, 143, 144, 145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1064
                self.simpleStatement()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1065
                self.ifStatement()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1066
                self.forStatement()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1067
                self.whileStatement()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1068
                self.doWhileStatement()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1069
                self.continueStatement()
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1070
                self.breakStatement()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1071
                self.tryStatement()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1072
                self.returnStatement()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1073
                self.emitStatement()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1074
                self.revertStatement()
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1075
                self.requireStatement()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1076
                self.assertStatement()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1077
                self.assemblyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.expression(0)
            self.state = 1081
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(SolidityParser.T__63)
            self.state = 1084
            self.match(SolidityParser.T__22)
            self.state = 1085
            self.expression(0)
            self.state = 1086
            self.match(SolidityParser.T__23)
            self.state = 1087
            self.statement()
            self.state = 1090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1088
                self.match(SolidityParser.T__64)
                self.state = 1089
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = SolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.match(SolidityParser.T__65)
            self.state = 1093
            self.expression(0)
            self.state = 1099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 1094
                self.match(SolidityParser.T__26)
                self.state = 1095
                self.match(SolidityParser.T__22)
                self.state = 1096
                self.parameterList()
                self.state = 1097
                self.match(SolidityParser.T__23)


            self.state = 1101
            self.block()
            self.state = 1103 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1102
                self.catchClause()
                self.state = 1105 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==67):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self.match(SolidityParser.T__66)
            self.state = 1115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23 or _la==142:
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 1108
                    self.identifier()


                self.state = 1111
                self.match(SolidityParser.T__22)
                self.state = 1112
                self.parameterList()
                self.state = 1113
                self.match(SolidityParser.T__23)


            self.state = 1117
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(SolidityParser.T__67)
            self.state = 1120
            self.match(SolidityParser.T__22)
            self.state = 1121
            self.expression(0)
            self.state = 1122
            self.match(SolidityParser.T__23)
            self.state = 1123
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class EContextContext(SimpleStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.SimpleStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEContext" ):
                listener.enterEContext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEContext" ):
                listener.exitEContext(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEContext" ):
                return visitor.visitEContext(self)
            else:
                return visitor.visitChildren(self)


    class VDContextContext(SimpleStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.SimpleStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVDContext" ):
                listener.enterVDContext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVDContext" ):
                listener.exitVDContext(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVDContext" ):
                return visitor.visitVDContext(self)
            else:
                return visitor.visitChildren(self)



    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_simpleStatement)
        try:
            self.state = 1127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                localctx = SolidityParser.VDContextContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                localctx = SolidityParser.EContextContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.match(SolidityParser.T__29)
            self.state = 1130
            self.match(SolidityParser.T__22)
            self.state = 1133
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 34, 41, 44, 46, 55, 56, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 110, 112, 113, 114, 115, 116, 117, 119, 120, 131, 142, 143, 144, 145]:
                self.state = 1131
                self.simpleStatement()
                pass
            elif token in [2]:
                self.state = 1132
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1137
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 34, 44, 55, 56, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 110, 112, 113, 114, 115, 116, 117, 119, 120, 131, 142, 143, 144, 145]:
                self.state = 1135
                self.expressionStatement()
                pass
            elif token in [2]:
                self.state = 1136
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 108104000431194176) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 8647192999643579391) != 0):
                self.state = 1139
                self.expression(0)


            self.state = 1142
            self.match(SolidityParser.T__23)
            self.state = 1143
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineArrayExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_inlineArrayExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineArrayExpression" ):
                listener.enterInlineArrayExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineArrayExpression" ):
                listener.exitInlineArrayExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineArrayExpression" ):
                return visitor.visitInlineArrayExpression(self)
            else:
                return visitor.visitChildren(self)




    def inlineArrayExpression(self):

        localctx = SolidityParser.InlineArrayExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_inlineArrayExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(SolidityParser.T__43)

            self.state = 1146
            self.expression(0)
            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 1147
                self.match(SolidityParser.T__15)
                self.state = 1148
                self.expression(0)
                self.state = 1153
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1154
            self.match(SolidityParser.T__44)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyFlags(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFlagsContext,0)


        def yulStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulStatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulStatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStatement" ):
                listener.enterAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStatement" ):
                listener.exitAssemblyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyStatement" ):
                return visitor.visitAssemblyStatement(self)
            else:
                return visitor.visitChildren(self)




    def assemblyStatement(self):

        localctx = SolidityParser.AssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.match(SolidityParser.T__68)
            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 1157
                self.match(SolidityParser.T__69)


            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 1160
                self.assemblyFlags()


            self.state = 1163
            self.match(SolidityParser.T__14)
            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & 360850920210202625) != 0) or ((((_la - 123)) & ~0x3f) == 0 and ((1 << (_la - 123)) & 100663321) != 0):
                self.state = 1164
                self.yulStatement()
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1170
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFlagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyFlagString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyFlagStringContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyFlagStringContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFlags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFlags" ):
                listener.enterAssemblyFlags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFlags" ):
                listener.exitAssemblyFlags(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFlags" ):
                return visitor.visitAssemblyFlags(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFlags(self):

        localctx = SolidityParser.AssemblyFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assemblyFlags)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.match(SolidityParser.T__22)

            self.state = 1173
            self.assemblyFlagString()

            self.state = 1174
            self.match(SolidityParser.T__15)
            self.state = 1175
            self.assemblyFlagString()
            self.state = 1177
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFlagStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFlagString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFlagString" ):
                listener.enterAssemblyFlagString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFlagString" ):
                listener.exitAssemblyFlagString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFlagString" ):
                return visitor.visitAssemblyFlagString(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFlagString(self):

        localctx = SolidityParser.AssemblyFlagStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_assemblyFlagString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def yulVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.YulVariableDeclarationContext,0)


        def yulAssignment(self):
            return self.getTypedRuleContext(SolidityParser.YulAssignmentContext,0)


        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def yulIfStatement(self):
            return self.getTypedRuleContext(SolidityParser.YulIfStatementContext,0)


        def yulForStatement(self):
            return self.getTypedRuleContext(SolidityParser.YulForStatementContext,0)


        def yulSwitchStatement(self):
            return self.getTypedRuleContext(SolidityParser.YulSwitchStatementContext,0)


        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def yulFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulStatement" ):
                listener.enterYulStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulStatement" ):
                listener.exitYulStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulStatement" ):
                return visitor.visitYulStatement(self)
            else:
                return visitor.visitChildren(self)




    def yulStatement(self):

        localctx = SolidityParser.YulStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_yulStatement)
        try:
            self.state = 1192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1181
                self.yulBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1182
                self.yulVariableDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1183
                self.yulAssignment()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1184
                self.yulFunctionCall()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1185
                self.yulIfStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1186
                self.yulForStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1187
                self.yulSwitchStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1188
                self.match(SolidityParser.LeaveKeyword)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1189
                self.match(SolidityParser.BreakKeyword)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1190
                self.match(SolidityParser.ContinueKeyword)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1191
                self.yulFunctionDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulStatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulStatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulBlock" ):
                listener.enterYulBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulBlock" ):
                listener.exitYulBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulBlock" ):
                return visitor.visitYulBlock(self)
            else:
                return visitor.visitChildren(self)




    def yulBlock(self):

        localctx = SolidityParser.YulBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_yulBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self.match(SolidityParser.T__14)
            self.state = 1198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & 360850920210202625) != 0) or ((((_la - 123)) & ~0x3f) == 0 and ((1 << (_la - 123)) & 100663321) != 0):
                self.state = 1195
                self.yulStatement()
                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1201
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulIdentifier)
            else:
                return self.getToken(SolidityParser.YulIdentifier, i)

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulVariableDeclaration" ):
                listener.enterYulVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulVariableDeclaration" ):
                listener.exitYulVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulVariableDeclaration" ):
                return visitor.visitYulVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def yulVariableDeclaration(self):

        localctx = SolidityParser.YulVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_yulVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1203
                self.match(SolidityParser.T__70)
                self.state = 1204
                self.match(SolidityParser.YulIdentifier)
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 1205
                    self.match(SolidityParser.T__71)
                    self.state = 1206
                    self.yulExpression()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.match(SolidityParser.T__70)

                self.state = 1210
                self.match(SolidityParser.YulIdentifier)

                self.state = 1211
                self.match(SolidityParser.T__15)
                self.state = 1212
                self.match(SolidityParser.YulIdentifier)
                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 1214
                    self.match(SolidityParser.T__71)
                    self.state = 1215
                    self.yulFunctionCall()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulPathContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulPathContext,i)


        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulAssignment" ):
                listener.enterYulAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulAssignment" ):
                listener.exitYulAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulAssignment" ):
                return visitor.visitYulAssignment(self)
            else:
                return visitor.visitChildren(self)




    def yulAssignment(self):

        localctx = SolidityParser.YulAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_yulAssignment)
        self._la = 0 # Token type
        try:
            self.state = 1234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1220
                self.yulPath()
                self.state = 1221
                self.match(SolidityParser.T__71)
                self.state = 1222
                self.yulExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1224
                self.yulPath()
                self.state = 1227 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1225
                    self.match(SolidityParser.T__15)
                    self.state = 1226
                    self.yulPath()
                    self.state = 1229 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==16):
                        break

                self.state = 1231
                self.match(SolidityParser.T__71)
                self.state = 1232
                self.yulFunctionCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulIfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulIfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulIfStatement" ):
                listener.enterYulIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulIfStatement" ):
                listener.exitYulIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulIfStatement" ):
                return visitor.visitYulIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def yulIfStatement(self):

        localctx = SolidityParser.YulIfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_yulIfStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.match(SolidityParser.T__63)
            self.state = 1237
            self.yulExpression()
            self.state = 1238
            self.yulBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulBlockContext,i)


        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulForStatement" ):
                listener.enterYulForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulForStatement" ):
                listener.exitYulForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulForStatement" ):
                return visitor.visitYulForStatement(self)
            else:
                return visitor.visitChildren(self)




    def yulForStatement(self):

        localctx = SolidityParser.YulForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_yulForStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.match(SolidityParser.T__29)
            self.state = 1241
            self.yulBlock()
            self.state = 1242
            self.yulExpression()
            self.state = 1243
            self.yulBlock()
            self.state = 1244
            self.yulBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulSwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def yulBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulBlockContext,i)


        def yulLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulLiteralContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulLiteralContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulSwitchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulSwitchStatement" ):
                listener.enterYulSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulSwitchStatement" ):
                listener.exitYulSwitchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulSwitchStatement" ):
                return visitor.visitYulSwitchStatement(self)
            else:
                return visitor.visitChildren(self)




    def yulSwitchStatement(self):

        localctx = SolidityParser.YulSwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_yulSwitchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self.match(SolidityParser.T__72)
            self.state = 1247
            self.yulExpression()
            self.state = 1262
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.state = 1252 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1248
                    self.match(SolidityParser.T__73)
                    self.state = 1249
                    self.yulLiteral()
                    self.state = 1250
                    self.yulBlock()
                    self.state = 1254 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==74):
                        break

                self.state = 1258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 1256
                    self.match(SolidityParser.T__74)
                    self.state = 1257
                    self.yulBlock()


                pass
            elif token in [75]:
                self.state = 1260
                self.match(SolidityParser.T__74)
                self.state = 1261
                self.yulBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulIdentifier)
            else:
                return self.getToken(SolidityParser.YulIdentifier, i)

        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulFunctionDefinition" ):
                listener.enterYulFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulFunctionDefinition" ):
                listener.exitYulFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulFunctionDefinition" ):
                return visitor.visitYulFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def yulFunctionDefinition(self):

        localctx = SolidityParser.YulFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_yulFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.match(SolidityParser.T__40)
            self.state = 1265
            self.match(SolidityParser.YulIdentifier)
            self.state = 1266
            self.match(SolidityParser.T__22)
            self.state = 1275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 1267
                self.match(SolidityParser.YulIdentifier)
                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1268
                    self.match(SolidityParser.T__15)
                    self.state = 1269
                    self.match(SolidityParser.YulIdentifier)
                    self.state = 1274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1277
            self.match(SolidityParser.T__23)
            self.state = 1287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 1278
                self.match(SolidityParser.T__75)

                self.state = 1279
                self.match(SolidityParser.YulIdentifier)
                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1280
                    self.match(SolidityParser.T__15)
                    self.state = 1281
                    self.match(SolidityParser.YulIdentifier)
                    self.state = 1286
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1289
            self.yulBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulIdentifier)
            else:
                return self.getToken(SolidityParser.YulIdentifier, i)

        def YulEvmBuiltin(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulEvmBuiltin)
            else:
                return self.getToken(SolidityParser.YulEvmBuiltin, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulPath" ):
                listener.enterYulPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulPath" ):
                listener.exitYulPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulPath" ):
                return visitor.visitYulPath(self)
            else:
                return visitor.visitChildren(self)




    def yulPath(self):

        localctx = SolidityParser.YulPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_yulPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(SolidityParser.YulIdentifier)
            self.state = 1296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26:
                self.state = 1292
                self.match(SolidityParser.T__25)
                self.state = 1293
                _la = self._input.LA(1)
                if not(_la==148 or _la==149):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulIdentifier(self):
            return self.getToken(SolidityParser.YulIdentifier, 0)

        def YulEvmBuiltin(self):
            return self.getToken(SolidityParser.YulEvmBuiltin, 0)

        def yulExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulFunctionCall" ):
                listener.enterYulFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulFunctionCall" ):
                listener.exitYulFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulFunctionCall" ):
                return visitor.visitYulFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def yulFunctionCall(self):

        localctx = SolidityParser.YulFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_yulFunctionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            _la = self._input.LA(1)
            if not(_la==148 or _la==149):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1300
            self.match(SolidityParser.T__22)
            self.state = 1309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55 or _la==56 or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 16642998273) != 0):
                self.state = 1301
                self.yulExpression()
                self.state = 1306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1302
                    self.match(SolidityParser.T__15)
                    self.state = 1303
                    self.yulExpression()
                    self.state = 1308
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1311
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulBooleanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_yulBoolean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulBoolean" ):
                listener.enterYulBoolean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulBoolean" ):
                listener.exitYulBoolean(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulBoolean" ):
                return visitor.visitYulBoolean(self)
            else:
                return visitor.visitChildren(self)




    def yulBoolean(self):

        localctx = SolidityParser.YulBooleanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_yulBoolean)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1313
            _la = self._input.LA(1)
            if not(_la==55 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulDecimalNumber(self):
            return self.getToken(SolidityParser.YulDecimalNumber, 0)

        def YulStringLiteral(self):
            return self.getToken(SolidityParser.YulStringLiteral, 0)

        def YulHexNumber(self):
            return self.getToken(SolidityParser.YulHexNumber, 0)

        def yulBoolean(self):
            return self.getTypedRuleContext(SolidityParser.YulBooleanContext,0)


        def HexString(self):
            return self.getToken(SolidityParser.HexString, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulLiteral" ):
                listener.enterYulLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulLiteral" ):
                listener.exitYulLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulLiteral" ):
                return visitor.visitYulLiteral(self)
            else:
                return visitor.visitChildren(self)




    def yulLiteral(self):

        localctx = SolidityParser.YulLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_yulLiteral)
        try:
            self.state = 1320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1315
                self.match(SolidityParser.YulDecimalNumber)
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1316
                self.match(SolidityParser.YulStringLiteral)
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1317
                self.match(SolidityParser.YulHexNumber)
                pass
            elif token in [55, 56]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1318
                self.yulBoolean()
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1319
                self.match(SolidityParser.HexString)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulPath(self):
            return self.getTypedRuleContext(SolidityParser.YulPathContext,0)


        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def yulLiteral(self):
            return self.getTypedRuleContext(SolidityParser.YulLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulExpression" ):
                listener.enterYulExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulExpression" ):
                listener.exitYulExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulExpression" ):
                return visitor.visitYulExpression(self)
            else:
                return visitor.visitChildren(self)




    def yulExpression(self):

        localctx = SolidityParser.YulExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_yulExpression)
        try:
            self.state = 1325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1322
                self.yulPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1323
                self.yulFunctionCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1324
                self.yulLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStatement" ):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.match(SolidityParser.T__76)
            self.state = 1328
            self.statement()
            self.state = 1329
            self.match(SolidityParser.T__67)
            self.state = 1330
            self.match(SolidityParser.T__22)
            self.state = 1331
            self.expression(0)
            self.state = 1332
            self.match(SolidityParser.T__23)
            self.state = 1333
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            self.match(SolidityParser.ContinueKeyword)
            self.state = 1336
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.match(SolidityParser.BreakKeyword)
            self.state = 1339
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.match(SolidityParser.T__77)
            self.state = 1343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 108104000431194176) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 8647192999643579391) != 0):
                self.state = 1342
                self.expression(0)


            self.state = 1345
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmitStatement" ):
                return visitor.visitEmitStatement(self)
            else:
                return visitor.visitChildren(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1347
            self.match(SolidityParser.T__78)
            self.state = 1348
            self.expression(0)
            self.state = 1349
            self.callArgumentList()
            self.state = 1350
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_revertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevertStatement" ):
                listener.enterRevertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevertStatement" ):
                listener.exitRevertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevertStatement" ):
                return visitor.visitRevertStatement(self)
            else:
                return visitor.visitChildren(self)




    def revertStatement(self):

        localctx = SolidityParser.RevertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_revertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1352
            self.match(SolidityParser.T__79)
            self.state = 1361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [142]:
                self.state = 1353
                self.identifier()
                self.state = 1355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1354
                    self.callArgumentList()


                pass
            elif token in [23]:
                self.state = 1357
                self.match(SolidityParser.T__22)
                self.state = 1358
                self.stringLiteral()
                self.state = 1359
                self.match(SolidityParser.T__23)
                pass
            elif token in [2]:
                pass
            else:
                pass
            self.state = 1363
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequireStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_requireStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireStatement" ):
                listener.enterRequireStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireStatement" ):
                listener.exitRequireStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequireStatement" ):
                return visitor.visitRequireStatement(self)
            else:
                return visitor.visitChildren(self)




    def requireStatement(self):

        localctx = SolidityParser.RequireStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_requireStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self.match(SolidityParser.T__80)
            self.state = 1366
            self.match(SolidityParser.T__22)
            self.state = 1367
            self.expression(0)
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 1368
                self.match(SolidityParser.T__15)
                self.state = 1369
                self.stringLiteral()


            self.state = 1372
            self.match(SolidityParser.T__23)
            self.state = 1373
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertStatement" ):
                listener.enterAssertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertStatement" ):
                listener.exitAssertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertStatement" ):
                return visitor.visitAssertStatement(self)
            else:
                return visitor.visitChildren(self)




    def assertStatement(self):

        localctx = SolidityParser.AssertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_assertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1375
            self.match(SolidityParser.T__81)
            self.state = 1376
            self.match(SolidityParser.T__22)
            self.state = 1377
            self.expression(0)
            self.state = 1378
            self.match(SolidityParser.T__23)
            self.state = 1379
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def variableDeclarationTuple(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationTupleContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationStatement" ):
                return visitor.visitVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.state = 1392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41, 46, 83, 84, 85, 86, 87, 88, 112, 113, 114, 115, 116, 142]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1381
                self.variableDeclaration()
                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1382
                    self.match(SolidityParser.T__10)
                    self.state = 1383
                    self.expression(0)


                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1386
                self.variableDeclarationTuple()
                self.state = 1387
                self.match(SolidityParser.T__10)
                self.state = 1388
                self.expression(0)
                self.state = 1390
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interactiveSimpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveSimpleStatementContext,0)


        def interactiveIfStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveIfStatementContext,0)


        def interactiveForStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveForStatementContext,0)


        def interactiveWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveWhileStatementContext,0)


        def interactiveDoWhileDoStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveDoWhileDoStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def interactiveTryStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveTryStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def revertStatement(self):
            return self.getTypedRuleContext(SolidityParser.RevertStatementContext,0)


        def requireStatement(self):
            return self.getTypedRuleContext(SolidityParser.RequireStatementContext,0)


        def assertStatement(self):
            return self.getTypedRuleContext(SolidityParser.AssertStatementContext,0)


        def assemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveStatement" ):
                listener.enterInteractiveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveStatement" ):
                listener.exitInteractiveStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveStatement" ):
                return visitor.visitInteractiveStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveStatement(self):

        localctx = SolidityParser.InteractiveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_interactiveStatement)
        try:
            self.state = 1408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 34, 41, 44, 46, 55, 56, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 110, 112, 113, 114, 115, 116, 117, 119, 120, 131, 142, 143, 144, 145]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1394
                self.interactiveSimpleStatement()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1395
                self.interactiveIfStatement()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1396
                self.interactiveForStatement()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1397
                self.interactiveWhileStatement()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1398
                self.interactiveDoWhileDoStatement()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1399
                self.continueStatement()
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1400
                self.breakStatement()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1401
                self.interactiveTryStatement()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1402
                self.returnStatement()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1403
                self.emitStatement()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1404
                self.revertStatement()
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1405
                self.requireStatement()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1406
                self.assertStatement()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1407
                self.assemblyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveIfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveIfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveIfStatement" ):
                listener.enterInteractiveIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveIfStatement" ):
                listener.exitInteractiveIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveIfStatement" ):
                return visitor.visitInteractiveIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveIfStatement(self):

        localctx = SolidityParser.InteractiveIfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_interactiveIfStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.match(SolidityParser.T__63)
            self.state = 1411
            self.match(SolidityParser.T__22)
            self.state = 1412
            self.expression(0)
            self.state = 1413
            self.match(SolidityParser.T__23)
            self.state = 1414
            self.match(SolidityParser.T__14)
            self.state = 1415
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveElseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interactiveIfStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveIfStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveElseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveElseStatement" ):
                listener.enterInteractiveElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveElseStatement" ):
                listener.exitInteractiveElseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveElseStatement" ):
                return visitor.visitInteractiveElseStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveElseStatement(self):

        localctx = SolidityParser.InteractiveElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_interactiveElseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1417
            self.match(SolidityParser.T__64)
            self.state = 1421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.state = 1418
                self.interactiveIfStatement()
                pass
            elif token in [15]:
                self.state = 1419
                self.match(SolidityParser.T__14)
                self.state = 1420
                self.match(SolidityParser.T__16)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveForStatement" ):
                listener.enterInteractiveForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveForStatement" ):
                listener.exitInteractiveForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveForStatement" ):
                return visitor.visitInteractiveForStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveForStatement(self):

        localctx = SolidityParser.InteractiveForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_interactiveForStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423
            self.match(SolidityParser.T__29)
            self.state = 1424
            self.match(SolidityParser.T__22)
            self.state = 1427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 34, 41, 44, 46, 55, 56, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 110, 112, 113, 114, 115, 116, 117, 119, 120, 131, 142, 143, 144, 145]:
                self.state = 1425
                self.simpleStatement()
                pass
            elif token in [2]:
                self.state = 1426
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1431
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 34, 44, 55, 56, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 110, 112, 113, 114, 115, 116, 117, 119, 120, 131, 142, 143, 144, 145]:
                self.state = 1429
                self.expressionStatement()
                pass
            elif token in [2]:
                self.state = 1430
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 108104000431194176) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 8647192999643579391) != 0):
                self.state = 1433
                self.expression(0)


            self.state = 1436
            self.match(SolidityParser.T__23)
            self.state = 1437
            self.match(SolidityParser.T__14)
            self.state = 1438
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveWhileStatement" ):
                listener.enterInteractiveWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveWhileStatement" ):
                listener.exitInteractiveWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveWhileStatement" ):
                return visitor.visitInteractiveWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveWhileStatement(self):

        localctx = SolidityParser.InteractiveWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_interactiveWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(SolidityParser.T__67)
            self.state = 1441
            self.match(SolidityParser.T__22)
            self.state = 1442
            self.expression(0)
            self.state = 1443
            self.match(SolidityParser.T__23)
            self.state = 1444
            self.match(SolidityParser.T__14)
            self.state = 1445
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveDoWhileDoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveDoWhileDoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveDoWhileDoStatement" ):
                listener.enterInteractiveDoWhileDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveDoWhileDoStatement" ):
                listener.exitInteractiveDoWhileDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveDoWhileDoStatement" ):
                return visitor.visitInteractiveDoWhileDoStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveDoWhileDoStatement(self):

        localctx = SolidityParser.InteractiveDoWhileDoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_interactiveDoWhileDoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.match(SolidityParser.T__76)
            self.state = 1448
            self.match(SolidityParser.T__14)
            self.state = 1449
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveDoWhileWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveDoWhileWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveDoWhileWhileStatement" ):
                listener.enterInteractiveDoWhileWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveDoWhileWhileStatement" ):
                listener.exitInteractiveDoWhileWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveDoWhileWhileStatement" ):
                return visitor.visitInteractiveDoWhileWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveDoWhileWhileStatement(self):

        localctx = SolidityParser.InteractiveDoWhileWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_interactiveDoWhileWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.match(SolidityParser.T__67)
            self.state = 1452
            self.match(SolidityParser.T__22)
            self.state = 1453
            self.expression(0)
            self.state = 1454
            self.match(SolidityParser.T__23)
            self.state = 1455
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveTryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveTryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveTryStatement" ):
                listener.enterInteractiveTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveTryStatement" ):
                listener.exitInteractiveTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveTryStatement" ):
                return visitor.visitInteractiveTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveTryStatement(self):

        localctx = SolidityParser.InteractiveTryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_interactiveTryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self.match(SolidityParser.T__65)
            self.state = 1458
            self.expression(0)
            self.state = 1464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 1459
                self.match(SolidityParser.T__26)
                self.state = 1460
                self.match(SolidityParser.T__22)
                self.state = 1461
                self.parameterList()
                self.state = 1462
                self.match(SolidityParser.T__23)


            self.state = 1466
            self.match(SolidityParser.T__14)
            self.state = 1467
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveCatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveCatchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveCatchClause" ):
                listener.enterInteractiveCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveCatchClause" ):
                listener.exitInteractiveCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveCatchClause" ):
                return visitor.visitInteractiveCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def interactiveCatchClause(self):

        localctx = SolidityParser.InteractiveCatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_interactiveCatchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1469
            self.match(SolidityParser.T__66)
            self.state = 1477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23 or _la==142:
                self.state = 1471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 1470
                    self.identifier()


                self.state = 1473
                self.match(SolidityParser.T__22)
                self.state = 1474
                self.parameterList()
                self.state = 1475
                self.match(SolidityParser.T__23)


            self.state = 1479
            self.match(SolidityParser.T__14)
            self.state = 1480
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementaryTypeName" ):
                return visitor.visitElementaryTypeName(self)
            else:
                return visitor.visitChildren(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            _la = self._input.LA(1)
            if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 16642998335) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IdentifierExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierExp" ):
                listener.enterIdentifierExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierExp" ):
                listener.exitIdentifierExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierExp" ):
                return visitor.visitIdentifierExp(self)
            else:
                return visitor.visitChildren(self)


    class LiteralExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(SolidityParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExp" ):
                listener.enterLiteralExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExp" ):
                listener.exitLiteralExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExp" ):
                return visitor.visitLiteralExp(self)
            else:
                return visitor.visitChildren(self)


    class ConditionalExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExp" ):
                listener.enterConditionalExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExp" ):
                listener.exitConditionalExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalExp" ):
                return visitor.visitConditionalExp(self)
            else:
                return visitor.visitChildren(self)


    class ExponentiationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentiation" ):
                listener.enterExponentiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentiation" ):
                listener.exitExponentiation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentiation" ):
                return visitor.visitExponentiation(self)
            else:
                return visitor.visitChildren(self)


    class LiteralSubDenominationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literalWithSubDenomination(self):
            return self.getTypedRuleContext(SolidityParser.LiteralWithSubDenominationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralSubDenomination" ):
                listener.enterLiteralSubDenomination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralSubDenomination" ):
                listener.exitLiteralSubDenomination(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralSubDenomination" ):
                return visitor.visitLiteralSubDenomination(self)
            else:
                return visitor.visitChildren(self)


    class TupleExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExp" ):
                listener.enterTupleExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExp" ):
                listener.exitTupleExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleExp" ):
                return visitor.visitTupleExp(self)
            else:
                return visitor.visitChildren(self)


    class AssignmentContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)


    class TypeConversionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConversion" ):
                listener.enterTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConversion" ):
                listener.exitTypeConversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConversion" ):
                return visitor.visitTypeConversion(self)
            else:
                return visitor.visitChildren(self)


    class UnaryPrefixOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPrefixOp" ):
                listener.enterUnaryPrefixOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPrefixOp" ):
                listener.exitUnaryPrefixOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryPrefixOp" ):
                return visitor.visitUnaryPrefixOp(self)
            else:
                return visitor.visitChildren(self)


    class BitXorOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitXorOp" ):
                listener.enterBitXorOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitXorOp" ):
                listener.exitBitXorOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitXorOp" ):
                return visitor.visitBitXorOp(self)
            else:
                return visitor.visitChildren(self)


    class AdditiveOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOp" ):
                listener.enterAdditiveOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOp" ):
                listener.exitAdditiveOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveOp" ):
                return visitor.visitAdditiveOp(self)
            else:
                return visitor.visitChildren(self)


    class PayableFunctionCallContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)
        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPayableFunctionCall" ):
                listener.enterPayableFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPayableFunctionCall" ):
                listener.exitPayableFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPayableFunctionCall" ):
                return visitor.visitPayableFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class NewExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExp" ):
                listener.enterNewExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExp" ):
                listener.exitNewExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewExp" ):
                return visitor.visitNewExp(self)
            else:
                return visitor.visitChildren(self)


    class BitAndOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndOp" ):
                listener.enterBitAndOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndOp" ):
                listener.exitBitAndOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitAndOp" ):
                return visitor.visitBitAndOp(self)
            else:
                return visitor.visitChildren(self)


    class IndexRangeAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexRangeAccess" ):
                listener.enterIndexRangeAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexRangeAccess" ):
                listener.exitIndexRangeAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexRangeAccess" ):
                return visitor.visitIndexRangeAccess(self)
            else:
                return visitor.visitChildren(self)


    class BitOrOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrOp" ):
                listener.enterBitOrOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrOp" ):
                listener.exitBitOrOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOrOp" ):
                return visitor.visitBitOrOp(self)
            else:
                return visitor.visitChildren(self)


    class UnarySuffixOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnarySuffixOp" ):
                listener.enterUnarySuffixOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnarySuffixOp" ):
                listener.exitUnarySuffixOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnarySuffixOp" ):
                return visitor.visitUnarySuffixOp(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicativeOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOp" ):
                listener.enterMultiplicativeOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOp" ):
                listener.exitMultiplicativeOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeOp" ):
                return visitor.visitMultiplicativeOp(self)
            else:
                return visitor.visitChildren(self)


    class IndexAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexAccess" ):
                listener.enterIndexAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexAccess" ):
                listener.exitIndexAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexAccess" ):
                return visitor.visitIndexAccess(self)
            else:
                return visitor.visitChildren(self)


    class EqualityOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOp" ):
                listener.enterEqualityOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOp" ):
                listener.exitEqualityOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityOp" ):
                return visitor.visitEqualityOp(self)
            else:
                return visitor.visitChildren(self)


    class AndOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndOperation" ):
                listener.enterAndOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndOperation" ):
                listener.exitAndOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndOperation" ):
                return visitor.visitAndOperation(self)
            else:
                return visitor.visitChildren(self)


    class RelationalOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalOp" ):
                listener.enterRelationalOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalOp" ):
                listener.exitRelationalOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalOp" ):
                return visitor.visitRelationalOp(self)
            else:
                return visitor.visitChildren(self)


    class OrOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrOperation" ):
                listener.enterOrOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrOperation" ):
                listener.exitOrOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrOperation" ):
                return visitor.visitOrOperation(self)
            else:
                return visitor.visitChildren(self)


    class MemberAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccess" ):
                return visitor.visitMemberAccess(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallOptionsContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOptions" ):
                listener.enterFunctionCallOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOptions" ):
                listener.exitFunctionCallOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOptions" ):
                return visitor.visitFunctionCallOptions(self)
            else:
                return visitor.visitChildren(self)


    class ShiftOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftOp" ):
                listener.enterShiftOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftOp" ):
                listener.exitShiftOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftOp" ):
                return visitor.visitShiftOp(self)
            else:
                return visitor.visitChildren(self)


    class TypeNameExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExp" ):
                listener.enterTypeNameExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExp" ):
                listener.exitTypeNameExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeNameExp" ):
                return visitor.visitTypeNameExp(self)
            else:
                return visitor.visitChildren(self)


    class InlineArrayExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineArrayExpression(self):
            return self.getTypedRuleContext(SolidityParser.InlineArrayExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineArrayExp" ):
                listener.enterInlineArrayExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineArrayExp" ):
                listener.exitInlineArrayExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineArrayExp" ):
                return visitor.visitInlineArrayExp(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 234
        self.enterRecursionRule(localctx, 234, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                localctx = SolidityParser.PayableFunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1485
                self.match(SolidityParser.PayableKeyword)
                self.state = 1486
                self.callArgumentList()
                pass

            elif la_ == 2:
                localctx = SolidityParser.TypeConversionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1487
                self.elementaryTypeName()
                self.state = 1488
                self.match(SolidityParser.T__22)
                self.state = 1489
                self.identifier()
                self.state = 1490
                self.match(SolidityParser.T__23)
                pass

            elif la_ == 3:
                localctx = SolidityParser.UnaryPrefixOpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1492
                _la = self._input.LA(1)
                if not(_la==6 or _la==34 or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1493
                self.expression(22)
                pass

            elif la_ == 4:
                localctx = SolidityParser.NewExpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1494
                self.match(SolidityParser.T__109)
                self.state = 1495
                self.typeName(0)
                pass

            elif la_ == 5:
                localctx = SolidityParser.TupleExpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1496
                self.tupleExpression()
                pass

            elif la_ == 6:
                localctx = SolidityParser.InlineArrayExpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1497
                self.inlineArrayExpression()
                pass

            elif la_ == 7:
                localctx = SolidityParser.IdentifierExpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1498
                self.identifier()
                pass

            elif la_ == 8:
                localctx = SolidityParser.LiteralExpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1499
                self.literal()
                pass

            elif la_ == 9:
                localctx = SolidityParser.LiteralSubDenominationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1500
                self.literalWithSubDenomination()
                pass

            elif la_ == 10:
                localctx = SolidityParser.TypeNameExpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1501
                self.elementaryTypeName()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1592
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1590
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExponentiationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1504
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1505
                        self.match(SolidityParser.T__92)
                        self.state = 1506
                        self.expression(21)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.MultiplicativeOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1507
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1508
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 103079215112) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1509
                        self.expression(20)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.AdditiveOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1510
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1511
                        _la = self._input.LA(1)
                        if not(_la==33 or _la==34):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1512
                        self.expression(19)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ShiftOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1513
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1514
                        _la = self._input.LA(1)
                        if not(((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 7) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1515
                        self.expression(18)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.BitAndOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1516
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1517
                        self.match(SolidityParser.T__31)
                        self.state = 1518
                        self.expression(17)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.BitXorOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1519
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1520
                        self.match(SolidityParser.T__4)
                        self.state = 1521
                        self.expression(16)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.BitOrOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1522
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1523
                        self.match(SolidityParser.T__30)
                        self.state = 1524
                        self.expression(15)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.RelationalOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1525
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1526
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1920) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1527
                        self.expression(14)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.EqualityOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1528
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1529
                        _la = self._input.LA(1)
                        if not(_la==37 or _la==38):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1530
                        self.expression(13)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.AndOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1531
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1532
                        self.match(SolidityParser.T__96)
                        self.state = 1533
                        self.expression(12)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.OrOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1534
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1535
                        self.match(SolidityParser.T__3)
                        self.state = 1536
                        self.expression(11)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ConditionalExpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1537
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1538
                        self.match(SolidityParser.T__97)
                        self.state = 1539
                        self.expression(0)
                        self.state = 1540
                        self.match(SolidityParser.T__24)
                        self.state = 1541
                        self.expression(10)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.AssignmentContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1543
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1544
                        _la = self._input.LA(1)
                        if not(_la==11 or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & 2047) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1545
                        self.expression(9)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.IndexAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1546
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 1547
                        self.match(SolidityParser.T__43)
                        self.state = 1549
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 108104000431194176) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 8647192999643579391) != 0):
                            self.state = 1548
                            self.expression(0)


                        self.state = 1551
                        self.match(SolidityParser.T__44)
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.IndexRangeAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1552
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 1553
                        self.match(SolidityParser.T__43)
                        self.state = 1555
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 108104000431194176) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 8647192999643579391) != 0):
                            self.state = 1554
                            self.expression(0)


                        self.state = 1557
                        self.match(SolidityParser.T__24)
                        self.state = 1559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 108104000431194176) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 8647192999643579391) != 0):
                            self.state = 1558
                            self.expression(0)


                        self.state = 1561
                        self.match(SolidityParser.T__44)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.MemberAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1562
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 1563
                        self.match(SolidityParser.T__25)
                        self.state = 1566
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [142]:
                            self.state = 1564
                            self.identifier()
                            pass
                        elif token in [83]:
                            self.state = 1565
                            self.match(SolidityParser.T__82)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.FunctionCallOptionsContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1568
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1569
                        self.match(SolidityParser.T__14)
                        self.state = 1583
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==142:
                            self.state = 1570
                            self.identifier()
                            self.state = 1571
                            self.match(SolidityParser.T__24)
                            self.state = 1572
                            self.expression(0)
                            self.state = 1580
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==16:
                                self.state = 1573
                                self.match(SolidityParser.T__15)
                                self.state = 1574
                                self.identifier()
                                self.state = 1575
                                self.match(SolidityParser.T__24)
                                self.state = 1576
                                self.expression(0)
                                self.state = 1582
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 1585
                        self.match(SolidityParser.T__16)
                        pass

                    elif la_ == 18:
                        localctx = SolidityParser.FunctionCallContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1586
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1587
                        self.callArgumentList()
                        pass

                    elif la_ == 19:
                        localctx = SolidityParser.UnarySuffixOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1588
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1589
                        _la = self._input.LA(1)
                        if not(_la==89 or _la==90):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 1594
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(SolidityParser.BooleanLiteralContext,0)


        def hexStringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexStringLiteralContext,0)


        def unicodeStringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.UnicodeStringLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = SolidityParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143, 144]:
                self.state = 1595
                self.stringLiteral()
                pass
            elif token in [117, 120]:
                self.state = 1596
                self.numberLiteral()
                pass
            elif token in [55, 56]:
                self.state = 1597
                self.booleanLiteral()
                pass
            elif token in [119]:
                self.state = 1598
                self.hexStringLiteral()
                pass
            elif token in [145]:
                self.state = 1599
                self.unicodeStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralWithSubDenominationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def SubDenomination(self):
            return self.getToken(SolidityParser.SubDenomination, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_literalWithSubDenomination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralWithSubDenomination" ):
                listener.enterLiteralWithSubDenomination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralWithSubDenomination" ):
                listener.exitLiteralWithSubDenomination(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralWithSubDenomination" ):
                return visitor.visitLiteralWithSubDenomination(self)
            else:
                return visitor.visitChildren(self)




    def literalWithSubDenomination(self):

        localctx = SolidityParser.LiteralWithSubDenominationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_literalWithSubDenomination)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self.numberLiteral()
            self.state = 1603
            self.match(SolidityParser.SubDenomination)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleExpression" ):
                return visitor.visitTupleExpression(self)
            else:
                return visitor.visitChildren(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            self.match(SolidityParser.T__22)
            self.state = 1614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 108104000431194176) != 0) or ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 8647192999643579391) != 0):
                self.state = 1606
                self.expression(0)
                self.state = 1611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1607
                    self.match(SolidityParser.T__15)
                    self.state = 1608
                    self.expression(0)
                    self.state = 1613
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1616
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            _la = self._input.LA(1)
            if not(_la==117 or _la==120):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self.match(SolidityParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinedValueTypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedValueTypeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedValueTypeDefinition" ):
                listener.enterUserDefinedValueTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedValueTypeDefinition" ):
                listener.exitUserDefinedValueTypeDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedValueTypeDefinition" ):
                return visitor.visitUserDefinedValueTypeDefinition(self)
            else:
                return visitor.visitChildren(self)




    def userDefinedValueTypeDefinition(self):

        localctx = SolidityParser.UserDefinedValueTypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_userDefinedValueTypeDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1622
            self.match(SolidityParser.TypeKeyword)
            self.state = 1623
            self.identifier()
            self.state = 1624
            self.match(SolidityParser.T__19)
            self.state = 1625
            self.elementaryTypeName()
            self.state = 1626
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = SolidityParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1628
            _la = self._input.LA(1)
            if not(_la==55 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexString(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.HexString)
            else:
                return self.getToken(SolidityParser.HexString, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_hexStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexStringLiteral" ):
                listener.enterHexStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexStringLiteral" ):
                listener.exitHexStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHexStringLiteral" ):
                return visitor.visitHexStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def hexStringLiteral(self):

        localctx = SolidityParser.HexStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_hexStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1630
                    self.match(SolidityParser.HexString)

                else:
                    raise NoViableAltException(self)
                self.state = 1633 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnicodeStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnicodeStringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.UnicodeStringLiteral)
            else:
                return self.getToken(SolidityParser.UnicodeStringLiteral, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_unicodeStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicodeStringLiteral" ):
                listener.enterUnicodeStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicodeStringLiteral" ):
                listener.exitUnicodeStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnicodeStringLiteral" ):
                return visitor.visitUnicodeStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def unicodeStringLiteral(self):

        localctx = SolidityParser.UnicodeStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_unicodeStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1635
                    self.match(SolidityParser.UnicodeStringLiteral)

                else:
                    raise NoViableAltException(self)
                self.state = 1638 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NonEmptyStringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NonEmptyStringLiteral)
            else:
                return self.getToken(SolidityParser.NonEmptyStringLiteral, i)

        def EmptyStringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.EmptyStringLiteral)
            else:
                return self.getToken(SolidityParser.EmptyStringLiteral, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = SolidityParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1640
                    _la = self._input.LA(1)
                    if not(_la==143 or _la==144):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1643 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierPathContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideSpecifier" ):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideSpecifier" ):
                listener.exitOverrideSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverrideSpecifier" ):
                return visitor.visitOverrideSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def overrideSpecifier(self):

        localctx = SolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_overrideSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1645
            self.match(SolidityParser.T__110)
            self.state = 1657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 1646
                self.match(SolidityParser.T__22)
                self.state = 1647
                self.identifierPath()
                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1648
                    self.match(SolidityParser.T__15)
                    self.state = 1649
                    self.identifierPath()
                    self.state = 1654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1655
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[39] = self.typeName_sempred
        self._predicates[117] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 21)
         




