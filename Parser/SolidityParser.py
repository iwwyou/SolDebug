# Generated from Solidity.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,148,1613,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        5,0,268,8,0,10,0,12,0,271,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,
        2,1,3,1,3,1,3,3,3,285,8,3,1,4,1,4,3,4,289,8,4,1,4,5,4,292,8,4,10,
        4,12,4,295,9,4,1,5,1,5,1,6,3,6,300,8,6,1,6,1,6,3,6,304,8,6,1,6,3,
        6,307,8,6,1,7,1,7,1,7,3,7,312,8,7,1,8,1,8,1,8,1,8,3,8,318,8,8,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,327,8,8,1,8,1,8,1,8,1,8,3,8,333,8,
        8,1,9,1,9,1,10,1,10,1,10,1,10,5,10,341,8,10,10,10,12,10,344,9,10,
        1,10,1,10,1,11,3,11,349,8,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,
        357,8,11,10,11,12,11,360,9,11,3,11,362,8,11,1,11,1,11,5,11,366,8,
        11,10,11,12,11,369,9,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        5,12,379,8,12,10,12,12,12,382,9,12,3,12,384,8,12,1,12,1,12,5,12,
        388,8,12,10,12,12,12,391,9,12,1,12,1,12,1,13,1,13,1,13,1,13,5,13,
        399,8,13,10,13,12,13,402,9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        3,14,411,8,14,1,15,1,15,1,15,1,15,5,15,417,8,15,10,15,12,15,420,
        9,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,432,
        8,15,10,15,12,15,435,9,15,1,15,1,15,3,15,439,8,15,1,15,1,15,1,16,
        1,16,1,16,5,16,446,8,16,10,16,12,16,449,9,16,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,3,18,470,8,18,1,19,1,19,1,19,3,19,475,8,19,1,19,1,19,1,
        19,1,19,1,19,5,19,482,8,19,10,19,12,19,485,9,19,1,19,1,19,1,20,1,
        20,1,20,3,20,492,8,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,500,8,20,
        10,20,12,20,503,9,20,1,20,1,20,1,20,1,20,1,20,3,20,510,8,20,1,20,
        1,20,3,20,514,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,
        524,8,21,10,21,12,21,527,9,21,1,21,1,21,3,21,531,8,21,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,5,22,540,8,22,10,22,12,22,543,9,22,1,22,
        1,22,1,22,3,22,548,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,3,23,559,8,23,1,23,1,23,1,23,1,24,1,24,3,24,566,8,24,1,25,1,
        25,1,25,1,25,1,25,1,25,3,25,574,8,25,1,25,1,25,1,25,1,25,3,25,580,
        8,25,1,25,1,25,3,25,584,8,25,1,25,1,25,1,25,3,25,589,8,25,1,25,3,
        25,592,8,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,4,27,602,8,27,
        11,27,12,27,603,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
        3,29,616,8,29,1,29,3,29,619,8,29,1,29,1,29,5,29,623,8,29,10,29,12,
        29,626,9,29,1,29,1,29,3,29,630,8,29,1,30,1,30,1,31,1,31,3,31,636,
        8,31,1,32,1,32,1,32,1,32,3,32,642,8,32,1,32,1,32,1,32,1,32,1,32,
        1,32,5,32,650,8,32,10,32,12,32,653,9,32,1,32,1,32,1,32,1,32,1,32,
        3,32,660,8,32,1,32,1,32,3,32,664,8,32,1,33,1,33,1,33,1,33,1,33,1,
        33,5,33,672,8,33,10,33,12,33,675,9,33,3,33,677,8,33,1,33,3,33,680,
        8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,5,34,690,8,34,10,34,
        12,34,693,9,34,1,34,1,34,1,35,1,35,3,35,699,8,35,1,35,3,35,702,8,
        35,1,35,1,35,1,35,3,35,707,8,35,1,35,3,35,710,8,35,5,35,712,8,35,
        10,35,12,35,715,9,35,1,36,1,36,3,36,719,8,36,1,37,1,37,3,37,723,
        8,37,1,37,1,37,1,38,1,38,4,38,729,8,38,11,38,12,38,730,3,38,733,
        8,38,1,38,1,38,1,38,3,38,738,8,38,5,38,740,8,38,10,38,12,38,743,
        9,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,3,39,752,8,39,1,39,1,39,
        1,39,3,39,757,8,39,1,39,5,39,760,8,39,10,39,12,39,763,9,39,1,40,
        1,40,1,40,1,40,3,40,769,8,40,1,40,1,40,1,40,3,40,774,8,40,1,40,1,
        40,1,41,1,41,3,41,780,8,41,1,42,1,42,1,42,3,42,785,8,42,1,42,1,42,
        1,42,5,42,790,8,42,10,42,12,42,793,9,42,1,42,1,42,1,42,1,42,1,42,
        3,42,800,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,809,8,43,10,
        43,12,43,812,9,43,1,43,1,43,1,44,5,44,817,8,44,10,44,12,44,820,9,
        44,1,44,1,44,1,45,5,45,825,8,45,10,45,12,45,828,9,45,1,45,1,45,1,
        46,5,46,833,8,46,10,46,12,46,836,9,46,1,46,1,46,1,47,5,47,841,8,
        47,10,47,12,47,844,9,47,1,47,1,47,1,48,5,48,849,8,48,10,48,12,48,
        852,9,48,1,48,1,48,1,49,5,49,857,8,49,10,49,12,49,860,9,49,1,49,
        1,49,1,50,1,50,1,50,1,50,5,50,868,8,50,10,50,12,50,871,9,50,1,50,
        1,50,1,51,1,51,1,51,1,51,1,51,3,51,880,8,51,1,51,1,51,1,51,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,893,8,52,1,53,1,53,1,53,
        1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,5,55,909,
        8,55,10,55,12,55,912,9,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,920,
        8,56,1,57,1,57,3,57,924,8,57,1,57,1,57,1,57,3,57,929,8,57,1,57,1,
        57,1,57,1,57,1,57,1,57,3,57,937,8,57,1,58,1,58,3,58,941,8,58,1,59,
        1,59,1,59,3,59,946,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        3,59,956,8,59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,3,61,
        967,8,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,
        1,64,1,64,5,64,982,8,64,10,64,12,64,985,9,64,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,3,65,994,8,65,1,66,1,66,3,66,998,8,66,1,67,1,67,1,
        68,1,68,1,69,1,69,1,69,5,69,1007,8,69,10,69,12,69,1010,9,69,1,69,
        1,69,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,3,71,1032,8,71,1,72,1,72,1,72,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,3,73,1044,8,73,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,3,74,1053,8,74,1,74,1,74,4,74,1057,8,74,11,74,12,
        74,1058,1,75,1,75,3,75,1063,8,75,1,75,1,75,1,75,1,75,3,75,1069,8,
        75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,3,77,1081,8,
        77,1,78,1,78,1,78,1,78,3,78,1087,8,78,1,78,1,78,3,78,1091,8,78,1,
        78,3,78,1094,8,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,5,79,1103,8,
        79,10,79,12,79,1106,9,79,1,79,1,79,1,80,1,80,3,80,1112,8,80,1,80,
        3,80,1115,8,80,1,80,1,80,5,80,1119,8,80,10,80,12,80,1122,9,80,1,
        80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1146,8,83,1,84,1,
        84,5,84,1150,8,84,10,84,12,84,1153,9,84,1,84,1,84,1,85,1,85,1,85,
        1,85,3,85,1161,8,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1170,
        8,85,3,85,1172,8,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,4,86,1181,
        8,86,11,86,12,86,1182,1,86,1,86,1,86,3,86,1188,8,86,1,87,1,87,1,
        87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,
        89,4,89,1206,8,89,11,89,12,89,1207,1,89,1,89,3,89,1212,8,89,1,89,
        1,89,3,89,1216,8,89,1,90,1,90,1,90,1,90,1,90,1,90,5,90,1224,8,90,
        10,90,12,90,1227,9,90,3,90,1229,8,90,1,90,1,90,1,90,1,90,1,90,5,
        90,1236,8,90,10,90,12,90,1239,9,90,3,90,1241,8,90,1,90,1,90,1,91,
        1,91,1,91,5,91,1248,8,91,10,91,12,91,1251,9,91,1,92,1,92,1,92,1,
        92,1,92,5,92,1258,8,92,10,92,12,92,1261,9,92,3,92,1263,8,92,1,92,
        1,92,1,93,1,93,1,94,1,94,1,94,1,94,1,94,3,94,1274,8,94,1,95,1,95,
        1,95,3,95,1279,8,95,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,97,
        1,97,1,97,1,98,1,98,1,98,1,99,1,99,3,99,1297,8,99,1,99,1,99,1,100,
        1,100,1,100,1,100,1,100,1,101,1,101,1,101,3,101,1309,8,101,1,101,
        1,101,1,101,1,101,3,101,1315,8,101,1,101,1,101,1,102,1,102,1,102,
        1,102,1,102,3,102,1324,8,102,1,102,1,102,1,102,1,103,1,103,1,103,
        1,103,1,103,1,103,1,104,1,104,1,104,3,104,1338,8,104,1,104,1,104,
        1,104,1,104,1,104,1,104,3,104,1346,8,104,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,
        1362,8,105,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,107,1,107,
        1,107,1,107,3,107,1375,8,107,1,108,1,108,1,108,1,108,3,108,1381,
        8,108,1,108,1,108,3,108,1385,8,108,1,108,3,108,1388,8,108,1,108,
        1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,110,
        1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,111,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,3,112,1418,8,112,1,112,1,112,1,112,
        1,113,1,113,3,113,1425,8,113,1,113,1,113,1,113,1,113,3,113,1431,
        8,113,1,113,1,113,1,113,1,114,1,114,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,3,115,1456,8,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,3,115,1503,8,115,1,115,1,115,
        1,115,1,115,3,115,1509,8,115,1,115,1,115,3,115,1513,8,115,1,115,
        1,115,1,115,1,115,1,115,3,115,1520,8,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,5,115,1532,8,115,10,115,12,115,
        1535,9,115,3,115,1537,8,115,1,115,1,115,1,115,1,115,1,115,5,115,
        1544,8,115,10,115,12,115,1547,9,115,1,116,1,116,1,116,1,116,1,116,
        3,116,1554,8,116,1,117,1,117,1,117,1,118,1,118,1,118,1,118,5,118,
        1563,8,118,10,118,12,118,1566,9,118,3,118,1568,8,118,1,118,1,118,
        1,119,1,119,1,120,1,120,1,121,1,121,1,121,1,121,1,121,1,121,1,122,
        1,122,1,123,4,123,1585,8,123,11,123,12,123,1586,1,124,4,124,1590,
        8,124,11,124,12,124,1591,1,125,4,125,1595,8,125,11,125,12,125,1596,
        1,126,1,126,1,126,1,126,1,126,5,126,1604,8,126,10,126,12,126,1607,
        9,126,1,126,1,126,3,126,1611,8,126,1,126,0,2,78,230,127,0,2,4,6,
        8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
        52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
        96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
        130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
        162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
        194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
        226,228,230,232,234,236,238,240,242,244,246,248,250,252,0,19,1,0,
        5,11,3,0,3,3,5,10,31,38,3,0,123,123,125,125,127,128,1,0,53,55,1,
        0,56,58,3,0,126,126,130,130,132,132,1,0,143,144,1,0,53,54,3,0,50,
        50,79,83,107,111,3,0,6,6,34,34,84,87,2,0,3,3,35,36,1,0,33,34,1,0,
        89,91,1,0,7,10,1,0,37,38,2,0,11,11,94,104,1,0,84,85,2,0,112,112,
        115,115,1,0,138,139,1781,0,269,1,0,0,0,2,274,1,0,0,0,4,279,1,0,0,
        0,6,284,1,0,0,0,8,286,1,0,0,0,10,296,1,0,0,0,12,306,1,0,0,0,14,308,
        1,0,0,0,16,332,1,0,0,0,18,334,1,0,0,0,20,336,1,0,0,0,22,348,1,0,
        0,0,24,372,1,0,0,0,26,394,1,0,0,0,28,405,1,0,0,0,30,412,1,0,0,0,
        32,442,1,0,0,0,34,450,1,0,0,0,36,469,1,0,0,0,38,471,1,0,0,0,40,488,
        1,0,0,0,42,515,1,0,0,0,44,532,1,0,0,0,46,551,1,0,0,0,48,563,1,0,
        0,0,50,567,1,0,0,0,52,595,1,0,0,0,54,597,1,0,0,0,56,607,1,0,0,0,
        58,611,1,0,0,0,60,631,1,0,0,0,62,633,1,0,0,0,64,637,1,0,0,0,66,665,
        1,0,0,0,68,683,1,0,0,0,70,696,1,0,0,0,72,716,1,0,0,0,74,720,1,0,
        0,0,76,726,1,0,0,0,78,751,1,0,0,0,80,764,1,0,0,0,82,779,1,0,0,0,
        84,781,1,0,0,0,86,810,1,0,0,0,88,818,1,0,0,0,90,826,1,0,0,0,92,834,
        1,0,0,0,94,842,1,0,0,0,96,850,1,0,0,0,98,858,1,0,0,0,100,869,1,0,
        0,0,102,874,1,0,0,0,104,892,1,0,0,0,106,894,1,0,0,0,108,900,1,0,
        0,0,110,906,1,0,0,0,112,919,1,0,0,0,114,936,1,0,0,0,116,940,1,0,
        0,0,118,955,1,0,0,0,120,957,1,0,0,0,122,966,1,0,0,0,124,968,1,0,
        0,0,126,973,1,0,0,0,128,978,1,0,0,0,130,993,1,0,0,0,132,997,1,0,
        0,0,134,999,1,0,0,0,136,1001,1,0,0,0,138,1003,1,0,0,0,140,1013,1,
        0,0,0,142,1031,1,0,0,0,144,1033,1,0,0,0,146,1036,1,0,0,0,148,1045,
        1,0,0,0,150,1060,1,0,0,0,152,1072,1,0,0,0,154,1080,1,0,0,0,156,1082,
        1,0,0,0,158,1098,1,0,0,0,160,1109,1,0,0,0,162,1125,1,0,0,0,164,1132,
        1,0,0,0,166,1145,1,0,0,0,168,1147,1,0,0,0,170,1171,1,0,0,0,172,1187,
        1,0,0,0,174,1189,1,0,0,0,176,1193,1,0,0,0,178,1199,1,0,0,0,180,1217,
        1,0,0,0,182,1244,1,0,0,0,184,1252,1,0,0,0,186,1266,1,0,0,0,188,1273,
        1,0,0,0,190,1278,1,0,0,0,192,1280,1,0,0,0,194,1288,1,0,0,0,196,1291,
        1,0,0,0,198,1294,1,0,0,0,200,1300,1,0,0,0,202,1305,1,0,0,0,204,1318,
        1,0,0,0,206,1328,1,0,0,0,208,1345,1,0,0,0,210,1361,1,0,0,0,212,1363,
        1,0,0,0,214,1370,1,0,0,0,216,1376,1,0,0,0,218,1393,1,0,0,0,220,1400,
        1,0,0,0,222,1404,1,0,0,0,224,1410,1,0,0,0,226,1422,1,0,0,0,228,1435,
        1,0,0,0,230,1455,1,0,0,0,232,1553,1,0,0,0,234,1555,1,0,0,0,236,1558,
        1,0,0,0,238,1571,1,0,0,0,240,1573,1,0,0,0,242,1575,1,0,0,0,244,1581,
        1,0,0,0,246,1584,1,0,0,0,248,1589,1,0,0,0,250,1594,1,0,0,0,252,1598,
        1,0,0,0,254,268,3,2,1,0,255,268,3,16,8,0,256,268,3,50,25,0,257,268,
        3,22,11,0,258,268,3,24,12,0,259,268,3,26,13,0,260,268,3,64,32,0,
        261,268,3,34,17,0,262,268,3,54,27,0,263,268,3,68,34,0,264,268,3,
        242,121,0,265,268,3,46,23,0,266,268,3,66,33,0,267,254,1,0,0,0,267,
        255,1,0,0,0,267,256,1,0,0,0,267,257,1,0,0,0,267,258,1,0,0,0,267,
        259,1,0,0,0,267,260,1,0,0,0,267,261,1,0,0,0,267,262,1,0,0,0,267,
        263,1,0,0,0,267,264,1,0,0,0,267,265,1,0,0,0,267,266,1,0,0,0,268,
        271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,
        269,1,0,0,0,272,273,5,0,0,1,273,1,1,0,0,0,274,275,5,1,0,0,275,276,
        3,4,2,0,276,277,3,6,3,0,277,278,5,2,0,0,278,3,1,0,0,0,279,280,3,
        240,120,0,280,5,1,0,0,0,281,285,5,3,0,0,282,285,3,8,4,0,283,285,
        3,230,115,0,284,281,1,0,0,0,284,282,1,0,0,0,284,283,1,0,0,0,285,
        7,1,0,0,0,286,293,3,12,6,0,287,289,5,4,0,0,288,287,1,0,0,0,288,289,
        1,0,0,0,289,290,1,0,0,0,290,292,3,12,6,0,291,288,1,0,0,0,292,295,
        1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,9,1,0,0,0,295,293,1,
        0,0,0,296,297,7,0,0,0,297,11,1,0,0,0,298,300,3,10,5,0,299,298,1,
        0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,307,5,141,0,0,302,304,
        3,10,5,0,303,302,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,307,
        5,112,0,0,306,299,1,0,0,0,306,303,1,0,0,0,307,13,1,0,0,0,308,311,
        3,240,120,0,309,310,5,12,0,0,310,312,3,240,120,0,311,309,1,0,0,0,
        311,312,1,0,0,0,312,15,1,0,0,0,313,314,5,13,0,0,314,317,3,18,9,0,
        315,316,5,12,0,0,316,318,3,240,120,0,317,315,1,0,0,0,317,318,1,0,
        0,0,318,319,1,0,0,0,319,320,5,2,0,0,320,333,1,0,0,0,321,326,5,13,
        0,0,322,327,3,20,10,0,323,324,5,3,0,0,324,325,5,12,0,0,325,327,3,
        240,120,0,326,322,1,0,0,0,326,323,1,0,0,0,327,328,1,0,0,0,328,329,
        5,14,0,0,329,330,3,18,9,0,330,331,5,2,0,0,331,333,1,0,0,0,332,313,
        1,0,0,0,332,321,1,0,0,0,333,17,1,0,0,0,334,335,3,250,125,0,335,19,
        1,0,0,0,336,337,5,15,0,0,337,342,3,14,7,0,338,339,5,16,0,0,339,341,
        3,14,7,0,340,338,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,
        1,0,0,0,343,345,1,0,0,0,344,342,1,0,0,0,345,346,5,17,0,0,346,21,
        1,0,0,0,347,349,5,18,0,0,348,347,1,0,0,0,348,349,1,0,0,0,349,350,
        1,0,0,0,350,351,5,19,0,0,351,361,3,240,120,0,352,353,5,20,0,0,353,
        358,3,28,14,0,354,355,5,16,0,0,355,357,3,28,14,0,356,354,1,0,0,0,
        357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,362,1,0,0,0,
        360,358,1,0,0,0,361,352,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,
        363,367,5,15,0,0,364,366,3,36,18,0,365,364,1,0,0,0,366,369,1,0,0,
        0,367,365,1,0,0,0,367,368,1,0,0,0,368,370,1,0,0,0,369,367,1,0,0,
        0,370,371,5,17,0,0,371,23,1,0,0,0,372,373,5,21,0,0,373,383,3,240,
        120,0,374,375,5,20,0,0,375,380,3,28,14,0,376,377,5,16,0,0,377,379,
        3,28,14,0,378,376,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,
        1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,383,374,1,0,0,0,383,384,
        1,0,0,0,384,385,1,0,0,0,385,389,5,15,0,0,386,388,3,36,18,0,387,386,
        1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,392,
        1,0,0,0,391,389,1,0,0,0,392,393,5,17,0,0,393,25,1,0,0,0,394,395,
        5,22,0,0,395,396,3,240,120,0,396,400,5,15,0,0,397,399,3,36,18,0,
        398,397,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,
        401,403,1,0,0,0,402,400,1,0,0,0,403,404,5,17,0,0,404,27,1,0,0,0,
        405,410,3,32,16,0,406,407,5,23,0,0,407,408,3,30,15,0,408,409,5,24,
        0,0,409,411,1,0,0,0,410,406,1,0,0,0,410,411,1,0,0,0,411,29,1,0,0,
        0,412,438,5,23,0,0,413,418,3,230,115,0,414,415,5,16,0,0,415,417,
        3,230,115,0,416,414,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,
        419,1,0,0,0,419,439,1,0,0,0,420,418,1,0,0,0,421,422,5,15,0,0,422,
        423,3,240,120,0,423,424,5,25,0,0,424,425,3,230,115,0,425,433,1,0,
        0,0,426,427,5,16,0,0,427,428,3,240,120,0,428,429,5,25,0,0,429,430,
        3,230,115,0,430,432,1,0,0,0,431,426,1,0,0,0,432,435,1,0,0,0,433,
        431,1,0,0,0,433,434,1,0,0,0,434,436,1,0,0,0,435,433,1,0,0,0,436,
        437,5,17,0,0,437,439,1,0,0,0,438,413,1,0,0,0,438,421,1,0,0,0,438,
        439,1,0,0,0,439,440,1,0,0,0,440,441,5,24,0,0,441,31,1,0,0,0,442,
        447,3,240,120,0,443,444,5,26,0,0,444,446,3,240,120,0,445,443,1,0,
        0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,33,1,0,0,
        0,449,447,1,0,0,0,450,451,3,78,39,0,451,452,5,119,0,0,452,453,3,
        240,120,0,453,454,5,11,0,0,454,455,3,230,115,0,455,456,5,2,0,0,456,
        35,1,0,0,0,457,470,3,38,19,0,458,470,3,64,32,0,459,470,3,58,29,0,
        460,470,3,40,20,0,461,470,3,42,21,0,462,470,3,54,27,0,463,470,3,
        68,34,0,464,470,3,242,121,0,465,470,3,44,22,0,466,470,3,66,33,0,
        467,470,3,46,23,0,468,470,3,50,25,0,469,457,1,0,0,0,469,458,1,0,
        0,0,469,459,1,0,0,0,469,460,1,0,0,0,469,461,1,0,0,0,469,462,1,0,
        0,0,469,463,1,0,0,0,469,464,1,0,0,0,469,465,1,0,0,0,469,466,1,0,
        0,0,469,467,1,0,0,0,469,468,1,0,0,0,470,37,1,0,0,0,471,472,5,134,
        0,0,472,474,5,23,0,0,473,475,3,70,35,0,474,473,1,0,0,0,474,475,1,
        0,0,0,475,476,1,0,0,0,476,483,5,24,0,0,477,482,3,62,31,0,478,482,
        5,126,0,0,479,482,5,125,0,0,480,482,5,128,0,0,481,477,1,0,0,0,481,
        478,1,0,0,0,481,479,1,0,0,0,481,480,1,0,0,0,482,485,1,0,0,0,483,
        481,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,483,1,0,0,0,486,
        487,3,138,69,0,487,39,1,0,0,0,488,489,5,135,0,0,489,491,5,23,0,0,
        490,492,3,70,35,0,491,490,1,0,0,0,491,492,1,0,0,0,492,493,1,0,0,
        0,493,501,5,24,0,0,494,500,5,123,0,0,495,500,3,136,68,0,496,500,
        3,62,31,0,497,500,5,129,0,0,498,500,3,252,126,0,499,494,1,0,0,0,
        499,495,1,0,0,0,499,496,1,0,0,0,499,497,1,0,0,0,499,498,1,0,0,0,
        500,503,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,509,1,0,0,0,
        503,501,1,0,0,0,504,505,5,27,0,0,505,506,5,23,0,0,506,507,3,70,35,
        0,507,508,5,24,0,0,508,510,1,0,0,0,509,504,1,0,0,0,509,510,1,0,0,
        0,510,513,1,0,0,0,511,514,5,2,0,0,512,514,3,138,69,0,513,511,1,0,
        0,0,513,512,1,0,0,0,514,41,1,0,0,0,515,516,5,136,0,0,516,517,5,23,
        0,0,517,525,5,24,0,0,518,524,5,123,0,0,519,524,5,126,0,0,520,524,
        3,62,31,0,521,524,5,129,0,0,522,524,3,252,126,0,523,518,1,0,0,0,
        523,519,1,0,0,0,523,520,1,0,0,0,523,521,1,0,0,0,523,522,1,0,0,0,
        524,527,1,0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,530,1,0,0,0,
        527,525,1,0,0,0,528,531,5,2,0,0,529,531,3,138,69,0,530,528,1,0,0,
        0,530,529,1,0,0,0,531,43,1,0,0,0,532,541,3,78,39,0,533,540,5,128,
        0,0,534,540,5,125,0,0,535,540,5,127,0,0,536,540,5,119,0,0,537,540,
        5,120,0,0,538,540,3,252,126,0,539,533,1,0,0,0,539,534,1,0,0,0,539,
        535,1,0,0,0,539,536,1,0,0,0,539,537,1,0,0,0,539,538,1,0,0,0,540,
        543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,544,1,0,0,0,543,
        541,1,0,0,0,544,547,3,240,120,0,545,546,5,11,0,0,546,548,3,230,115,
        0,547,545,1,0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,550,5,2,0,
        0,550,45,1,0,0,0,551,552,5,28,0,0,552,553,3,240,120,0,553,558,5,
        23,0,0,554,555,3,48,24,0,555,556,5,16,0,0,556,557,3,48,24,0,557,
        559,1,0,0,0,558,554,1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,
        561,5,24,0,0,561,562,5,2,0,0,562,47,1,0,0,0,563,565,3,78,39,0,564,
        566,3,240,120,0,565,564,1,0,0,0,565,566,1,0,0,0,566,49,1,0,0,0,567,
        583,5,29,0,0,568,584,3,32,16,0,569,570,5,15,0,0,570,573,3,32,16,
        0,571,572,5,12,0,0,572,574,3,52,26,0,573,571,1,0,0,0,573,574,1,0,
        0,0,574,575,1,0,0,0,575,576,5,16,0,0,576,579,3,32,16,0,577,578,5,
        12,0,0,578,580,3,52,26,0,579,577,1,0,0,0,579,580,1,0,0,0,580,581,
        1,0,0,0,581,582,5,17,0,0,582,584,1,0,0,0,583,568,1,0,0,0,583,569,
        1,0,0,0,584,585,1,0,0,0,585,588,5,30,0,0,586,589,5,3,0,0,587,589,
        3,78,39,0,588,586,1,0,0,0,588,587,1,0,0,0,589,591,1,0,0,0,590,592,
        5,133,0,0,591,590,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,594,
        5,2,0,0,594,51,1,0,0,0,595,596,7,1,0,0,596,53,1,0,0,0,597,598,5,
        39,0,0,598,599,3,240,120,0,599,601,5,15,0,0,600,602,3,56,28,0,601,
        600,1,0,0,0,602,603,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,
        605,1,0,0,0,605,606,5,17,0,0,606,55,1,0,0,0,607,608,3,78,39,0,608,
        609,3,240,120,0,609,610,5,2,0,0,610,57,1,0,0,0,611,612,5,40,0,0,
        612,618,3,240,120,0,613,615,5,23,0,0,614,616,3,70,35,0,615,614,1,
        0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,619,5,24,0,0,618,613,1,
        0,0,0,618,619,1,0,0,0,619,624,1,0,0,0,620,623,5,129,0,0,621,623,
        3,252,126,0,622,620,1,0,0,0,622,621,1,0,0,0,623,626,1,0,0,0,624,
        622,1,0,0,0,624,625,1,0,0,0,625,629,1,0,0,0,626,624,1,0,0,0,627,
        630,5,2,0,0,628,630,3,138,69,0,629,627,1,0,0,0,629,628,1,0,0,0,630,
        59,1,0,0,0,631,632,7,2,0,0,632,61,1,0,0,0,633,635,3,32,16,0,634,
        636,3,30,15,0,635,634,1,0,0,0,635,636,1,0,0,0,636,63,1,0,0,0,637,
        638,5,41,0,0,638,639,3,240,120,0,639,641,5,23,0,0,640,642,3,70,35,
        0,641,640,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,651,5,24,0,
        0,644,650,3,60,30,0,645,650,3,136,68,0,646,650,3,62,31,0,647,650,
        5,129,0,0,648,650,3,252,126,0,649,644,1,0,0,0,649,645,1,0,0,0,649,
        646,1,0,0,0,649,647,1,0,0,0,649,648,1,0,0,0,650,653,1,0,0,0,651,
        649,1,0,0,0,651,652,1,0,0,0,652,659,1,0,0,0,653,651,1,0,0,0,654,
        655,5,27,0,0,655,656,5,23,0,0,656,657,3,70,35,0,657,658,5,24,0,0,
        658,660,1,0,0,0,659,654,1,0,0,0,659,660,1,0,0,0,660,663,1,0,0,0,
        661,664,5,2,0,0,662,664,3,138,69,0,663,661,1,0,0,0,663,662,1,0,0,
        0,664,65,1,0,0,0,665,666,5,42,0,0,666,667,3,240,120,0,667,676,5,
        23,0,0,668,673,3,72,36,0,669,670,5,16,0,0,670,672,3,72,36,0,671,
        669,1,0,0,0,672,675,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,
        677,1,0,0,0,675,673,1,0,0,0,676,668,1,0,0,0,676,677,1,0,0,0,677,
        679,1,0,0,0,678,680,5,117,0,0,679,678,1,0,0,0,679,680,1,0,0,0,680,
        681,1,0,0,0,681,682,5,2,0,0,682,67,1,0,0,0,683,684,5,43,0,0,684,
        685,3,240,120,0,685,686,5,15,0,0,686,691,3,240,120,0,687,688,5,16,
        0,0,688,690,3,240,120,0,689,687,1,0,0,0,690,693,1,0,0,0,691,689,
        1,0,0,0,691,692,1,0,0,0,692,694,1,0,0,0,693,691,1,0,0,0,694,695,
        5,17,0,0,695,69,1,0,0,0,696,698,3,78,39,0,697,699,3,134,67,0,698,
        697,1,0,0,0,698,699,1,0,0,0,699,701,1,0,0,0,700,702,3,240,120,0,
        701,700,1,0,0,0,701,702,1,0,0,0,702,713,1,0,0,0,703,704,5,16,0,0,
        704,706,3,78,39,0,705,707,3,134,67,0,706,705,1,0,0,0,706,707,1,0,
        0,0,707,709,1,0,0,0,708,710,3,240,120,0,709,708,1,0,0,0,709,710,
        1,0,0,0,710,712,1,0,0,0,711,703,1,0,0,0,712,715,1,0,0,0,713,711,
        1,0,0,0,713,714,1,0,0,0,714,71,1,0,0,0,715,713,1,0,0,0,716,718,3,
        78,39,0,717,719,3,240,120,0,718,717,1,0,0,0,718,719,1,0,0,0,719,
        73,1,0,0,0,720,722,3,78,39,0,721,723,3,134,67,0,722,721,1,0,0,0,
        722,723,1,0,0,0,723,724,1,0,0,0,724,725,3,240,120,0,725,75,1,0,0,
        0,726,732,5,23,0,0,727,729,5,16,0,0,728,727,1,0,0,0,729,730,1,0,
        0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,733,1,0,0,0,732,728,1,0,
        0,0,732,733,1,0,0,0,733,734,1,0,0,0,734,741,3,74,37,0,735,737,5,
        16,0,0,736,738,3,74,37,0,737,736,1,0,0,0,737,738,1,0,0,0,738,740,
        1,0,0,0,739,735,1,0,0,0,740,743,1,0,0,0,741,739,1,0,0,0,741,742,
        1,0,0,0,742,744,1,0,0,0,743,741,1,0,0,0,744,745,5,24,0,0,745,77,
        1,0,0,0,746,747,6,39,-1,0,747,752,3,228,114,0,748,752,3,84,42,0,
        749,752,3,80,40,0,750,752,3,32,16,0,751,746,1,0,0,0,751,748,1,0,
        0,0,751,749,1,0,0,0,751,750,1,0,0,0,752,761,1,0,0,0,753,754,10,1,
        0,0,754,756,5,44,0,0,755,757,3,230,115,0,756,755,1,0,0,0,756,757,
        1,0,0,0,757,758,1,0,0,0,758,760,5,45,0,0,759,753,1,0,0,0,760,763,
        1,0,0,0,761,759,1,0,0,0,761,762,1,0,0,0,762,79,1,0,0,0,763,761,1,
        0,0,0,764,765,5,46,0,0,765,766,5,23,0,0,766,768,3,82,41,0,767,769,
        3,240,120,0,768,767,1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,
        771,5,47,0,0,771,773,3,78,39,0,772,774,3,240,120,0,773,772,1,0,0,
        0,773,774,1,0,0,0,774,775,1,0,0,0,775,776,5,24,0,0,776,81,1,0,0,
        0,777,780,3,228,114,0,778,780,3,32,16,0,779,777,1,0,0,0,779,778,
        1,0,0,0,780,83,1,0,0,0,781,782,5,41,0,0,782,784,5,23,0,0,783,785,
        3,70,35,0,784,783,1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,786,791,
        5,24,0,0,787,790,3,60,30,0,788,790,3,136,68,0,789,787,1,0,0,0,789,
        788,1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,0,792,
        799,1,0,0,0,793,791,1,0,0,0,794,795,5,27,0,0,795,796,5,23,0,0,796,
        797,3,70,35,0,797,798,5,24,0,0,798,800,1,0,0,0,799,794,1,0,0,0,799,
        800,1,0,0,0,800,85,1,0,0,0,801,809,3,122,61,0,802,809,3,130,65,0,
        803,809,3,24,12,0,804,809,3,26,13,0,805,809,3,22,11,0,806,809,3,
        2,1,0,807,809,3,16,8,0,808,801,1,0,0,0,808,802,1,0,0,0,808,803,1,
        0,0,0,808,804,1,0,0,0,808,805,1,0,0,0,808,806,1,0,0,0,808,807,1,
        0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,813,1,
        0,0,0,812,810,1,0,0,0,813,814,5,0,0,1,814,87,1,0,0,0,815,817,3,128,
        64,0,816,815,1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,818,819,1,0,
        0,0,819,821,1,0,0,0,820,818,1,0,0,0,821,822,5,0,0,1,822,89,1,0,0,
        0,823,825,3,56,28,0,824,823,1,0,0,0,825,828,1,0,0,0,826,824,1,0,
        0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,826,1,0,0,0,829,830,5,0,
        0,1,830,91,1,0,0,0,831,833,3,132,66,0,832,831,1,0,0,0,833,836,1,
        0,0,0,834,832,1,0,0,0,834,835,1,0,0,0,835,837,1,0,0,0,836,834,1,
        0,0,0,837,838,5,0,0,1,838,93,1,0,0,0,839,841,3,222,111,0,840,839,
        1,0,0,0,841,844,1,0,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,845,
        1,0,0,0,844,842,1,0,0,0,845,846,5,0,0,1,846,95,1,0,0,0,847,849,3,
        214,107,0,848,847,1,0,0,0,849,852,1,0,0,0,850,848,1,0,0,0,850,851,
        1,0,0,0,851,853,1,0,0,0,852,850,1,0,0,0,853,854,5,0,0,1,854,97,1,
        0,0,0,855,857,3,226,113,0,856,855,1,0,0,0,857,860,1,0,0,0,858,856,
        1,0,0,0,858,859,1,0,0,0,859,861,1,0,0,0,860,858,1,0,0,0,861,862,
        5,0,0,1,862,99,1,0,0,0,863,864,3,102,51,0,864,865,3,106,53,0,865,
        866,3,108,54,0,866,868,1,0,0,0,867,863,1,0,0,0,868,871,1,0,0,0,869,
        867,1,0,0,0,869,870,1,0,0,0,870,872,1,0,0,0,871,869,1,0,0,0,872,
        873,5,0,0,1,873,101,1,0,0,0,874,875,5,48,0,0,875,876,5,49,0,0,876,
        879,3,240,120,0,877,878,5,26,0,0,878,880,3,240,120,0,879,877,1,0,
        0,0,879,880,1,0,0,0,880,881,1,0,0,0,881,882,5,11,0,0,882,883,3,104,
        52,0,883,103,1,0,0,0,884,885,5,44,0,0,885,886,3,238,119,0,886,887,
        5,16,0,0,887,888,3,238,119,0,888,889,5,45,0,0,889,893,1,0,0,0,890,
        891,5,50,0,0,891,893,3,238,119,0,892,884,1,0,0,0,892,890,1,0,0,0,
        893,105,1,0,0,0,894,895,5,48,0,0,895,896,5,51,0,0,896,897,3,110,
        55,0,897,898,5,11,0,0,898,899,3,114,57,0,899,107,1,0,0,0,900,901,
        5,48,0,0,901,902,5,52,0,0,902,903,3,110,55,0,903,904,5,11,0,0,904,
        905,3,114,57,0,905,109,1,0,0,0,906,910,3,240,120,0,907,909,3,112,
        56,0,908,907,1,0,0,0,909,912,1,0,0,0,910,908,1,0,0,0,910,911,1,0,
        0,0,911,111,1,0,0,0,912,910,1,0,0,0,913,914,5,26,0,0,914,920,3,240,
        120,0,915,916,5,44,0,0,916,917,3,230,115,0,917,918,5,45,0,0,918,
        920,1,0,0,0,919,913,1,0,0,0,919,915,1,0,0,0,920,113,1,0,0,0,921,
        923,5,44,0,0,922,924,5,34,0,0,923,922,1,0,0,0,923,924,1,0,0,0,924,
        925,1,0,0,0,925,926,3,238,119,0,926,928,5,16,0,0,927,929,5,34,0,
        0,928,927,1,0,0,0,928,929,1,0,0,0,929,930,1,0,0,0,930,931,3,238,
        119,0,931,932,5,45,0,0,932,937,1,0,0,0,933,934,5,50,0,0,934,937,
        3,238,119,0,935,937,7,3,0,0,936,921,1,0,0,0,936,933,1,0,0,0,936,
        935,1,0,0,0,937,115,1,0,0,0,938,941,3,118,59,0,939,941,3,120,60,
        0,940,938,1,0,0,0,940,939,1,0,0,0,941,117,1,0,0,0,942,945,3,74,37,
        0,943,944,5,11,0,0,944,946,3,230,115,0,945,943,1,0,0,0,945,946,1,
        0,0,0,946,947,1,0,0,0,947,948,5,2,0,0,948,956,1,0,0,0,949,950,3,
        76,38,0,950,951,5,11,0,0,951,952,3,230,115,0,952,953,1,0,0,0,953,
        954,5,2,0,0,954,956,1,0,0,0,955,942,1,0,0,0,955,949,1,0,0,0,956,
        119,1,0,0,0,957,958,3,230,115,0,958,959,5,2,0,0,959,121,1,0,0,0,
        960,967,3,124,62,0,961,967,3,126,63,0,962,967,3,44,22,0,963,967,
        3,242,121,0,964,967,3,50,25,0,965,967,3,34,17,0,966,960,1,0,0,0,
        966,961,1,0,0,0,966,962,1,0,0,0,966,963,1,0,0,0,966,964,1,0,0,0,
        966,965,1,0,0,0,967,123,1,0,0,0,968,969,5,43,0,0,969,970,3,240,120,
        0,970,971,5,15,0,0,971,972,5,17,0,0,972,125,1,0,0,0,973,974,5,39,
        0,0,974,975,3,240,120,0,975,976,5,15,0,0,976,977,5,17,0,0,977,127,
        1,0,0,0,978,983,3,240,120,0,979,980,5,16,0,0,980,982,3,240,120,0,
        981,979,1,0,0,0,982,985,1,0,0,0,983,981,1,0,0,0,983,984,1,0,0,0,
        984,129,1,0,0,0,985,983,1,0,0,0,986,994,3,38,19,0,987,994,3,66,33,
        0,988,994,3,46,23,0,989,994,3,64,32,0,990,994,3,40,20,0,991,994,
        3,58,29,0,992,994,3,42,21,0,993,986,1,0,0,0,993,987,1,0,0,0,993,
        988,1,0,0,0,993,989,1,0,0,0,993,990,1,0,0,0,993,991,1,0,0,0,993,
        992,1,0,0,0,994,131,1,0,0,0,995,998,3,210,105,0,996,998,3,140,70,
        0,997,995,1,0,0,0,997,996,1,0,0,0,998,133,1,0,0,0,999,1000,7,4,0,
        0,1000,135,1,0,0,0,1001,1002,7,5,0,0,1002,137,1,0,0,0,1003,1008,
        5,15,0,0,1004,1007,3,142,71,0,1005,1007,3,140,70,0,1006,1004,1,0,
        0,0,1006,1005,1,0,0,0,1007,1010,1,0,0,0,1008,1006,1,0,0,0,1008,1009,
        1,0,0,0,1009,1011,1,0,0,0,1010,1008,1,0,0,0,1011,1012,5,17,0,0,1012,
        139,1,0,0,0,1013,1014,5,59,0,0,1014,1015,3,138,69,0,1015,141,1,0,
        0,0,1016,1032,3,138,69,0,1017,1032,3,154,77,0,1018,1032,3,146,73,
        0,1019,1032,3,156,78,0,1020,1032,3,152,76,0,1021,1032,3,192,96,0,
        1022,1032,3,194,97,0,1023,1032,3,196,98,0,1024,1032,3,148,74,0,1025,
        1032,3,198,99,0,1026,1032,3,200,100,0,1027,1032,3,202,101,0,1028,
        1032,3,204,102,0,1029,1032,3,206,103,0,1030,1032,3,160,80,0,1031,
        1016,1,0,0,0,1031,1017,1,0,0,0,1031,1018,1,0,0,0,1031,1019,1,0,0,
        0,1031,1020,1,0,0,0,1031,1021,1,0,0,0,1031,1022,1,0,0,0,1031,1023,
        1,0,0,0,1031,1024,1,0,0,0,1031,1025,1,0,0,0,1031,1026,1,0,0,0,1031,
        1027,1,0,0,0,1031,1028,1,0,0,0,1031,1029,1,0,0,0,1031,1030,1,0,0,
        0,1032,143,1,0,0,0,1033,1034,3,230,115,0,1034,1035,5,2,0,0,1035,
        145,1,0,0,0,1036,1037,5,60,0,0,1037,1038,5,23,0,0,1038,1039,3,230,
        115,0,1039,1040,5,24,0,0,1040,1043,3,142,71,0,1041,1042,5,61,0,0,
        1042,1044,3,142,71,0,1043,1041,1,0,0,0,1043,1044,1,0,0,0,1044,147,
        1,0,0,0,1045,1046,5,62,0,0,1046,1052,3,230,115,0,1047,1048,5,27,
        0,0,1048,1049,5,23,0,0,1049,1050,3,70,35,0,1050,1051,5,24,0,0,1051,
        1053,1,0,0,0,1052,1047,1,0,0,0,1052,1053,1,0,0,0,1053,1054,1,0,0,
        0,1054,1056,3,138,69,0,1055,1057,3,150,75,0,1056,1055,1,0,0,0,1057,
        1058,1,0,0,0,1058,1056,1,0,0,0,1058,1059,1,0,0,0,1059,149,1,0,0,
        0,1060,1068,5,63,0,0,1061,1063,3,240,120,0,1062,1061,1,0,0,0,1062,
        1063,1,0,0,0,1063,1064,1,0,0,0,1064,1065,5,23,0,0,1065,1066,3,70,
        35,0,1066,1067,5,24,0,0,1067,1069,1,0,0,0,1068,1062,1,0,0,0,1068,
        1069,1,0,0,0,1069,1070,1,0,0,0,1070,1071,3,138,69,0,1071,151,1,0,
        0,0,1072,1073,5,64,0,0,1073,1074,5,23,0,0,1074,1075,3,230,115,0,
        1075,1076,5,24,0,0,1076,1077,3,142,71,0,1077,153,1,0,0,0,1078,1081,
        3,208,104,0,1079,1081,3,144,72,0,1080,1078,1,0,0,0,1080,1079,1,0,
        0,0,1081,155,1,0,0,0,1082,1083,5,30,0,0,1083,1086,5,23,0,0,1084,
        1087,3,154,77,0,1085,1087,5,2,0,0,1086,1084,1,0,0,0,1086,1085,1,
        0,0,0,1087,1090,1,0,0,0,1088,1091,3,144,72,0,1089,1091,5,2,0,0,1090,
        1088,1,0,0,0,1090,1089,1,0,0,0,1091,1093,1,0,0,0,1092,1094,3,230,
        115,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,1095,
        1096,5,24,0,0,1096,1097,3,142,71,0,1097,157,1,0,0,0,1098,1099,5,
        44,0,0,1099,1104,3,230,115,0,1100,1101,5,16,0,0,1101,1103,3,230,
        115,0,1102,1100,1,0,0,0,1103,1106,1,0,0,0,1104,1102,1,0,0,0,1104,
        1105,1,0,0,0,1105,1107,1,0,0,0,1106,1104,1,0,0,0,1107,1108,5,45,
        0,0,1108,159,1,0,0,0,1109,1111,5,65,0,0,1110,1112,5,66,0,0,1111,
        1110,1,0,0,0,1111,1112,1,0,0,0,1112,1114,1,0,0,0,1113,1115,3,162,
        81,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,
        1120,5,15,0,0,1117,1119,3,166,83,0,1118,1117,1,0,0,0,1119,1122,1,
        0,0,0,1120,1118,1,0,0,0,1120,1121,1,0,0,0,1121,1123,1,0,0,0,1122,
        1120,1,0,0,0,1123,1124,5,17,0,0,1124,161,1,0,0,0,1125,1126,5,23,
        0,0,1126,1127,3,164,82,0,1127,1128,5,16,0,0,1128,1129,3,164,82,0,
        1129,1130,1,0,0,0,1130,1131,5,24,0,0,1131,163,1,0,0,0,1132,1133,
        3,250,125,0,1133,165,1,0,0,0,1134,1146,3,168,84,0,1135,1146,3,170,
        85,0,1136,1146,3,172,86,0,1137,1146,3,184,92,0,1138,1146,3,174,87,
        0,1139,1146,3,176,88,0,1140,1146,3,178,89,0,1141,1146,5,122,0,0,
        1142,1146,5,118,0,0,1143,1146,5,121,0,0,1144,1146,3,180,90,0,1145,
        1134,1,0,0,0,1145,1135,1,0,0,0,1145,1136,1,0,0,0,1145,1137,1,0,0,
        0,1145,1138,1,0,0,0,1145,1139,1,0,0,0,1145,1140,1,0,0,0,1145,1141,
        1,0,0,0,1145,1142,1,0,0,0,1145,1143,1,0,0,0,1145,1144,1,0,0,0,1146,
        167,1,0,0,0,1147,1151,5,15,0,0,1148,1150,3,166,83,0,1149,1148,1,
        0,0,0,1150,1153,1,0,0,0,1151,1149,1,0,0,0,1151,1152,1,0,0,0,1152,
        1154,1,0,0,0,1153,1151,1,0,0,0,1154,1155,5,17,0,0,1155,169,1,0,0,
        0,1156,1157,5,67,0,0,1157,1160,5,144,0,0,1158,1159,5,68,0,0,1159,
        1161,3,190,95,0,1160,1158,1,0,0,0,1160,1161,1,0,0,0,1161,1172,1,
        0,0,0,1162,1163,5,67,0,0,1163,1164,5,144,0,0,1164,1165,5,16,0,0,
        1165,1166,5,144,0,0,1166,1169,1,0,0,0,1167,1168,5,68,0,0,1168,1170,
        3,184,92,0,1169,1167,1,0,0,0,1169,1170,1,0,0,0,1170,1172,1,0,0,0,
        1171,1156,1,0,0,0,1171,1162,1,0,0,0,1172,171,1,0,0,0,1173,1174,3,
        182,91,0,1174,1175,5,68,0,0,1175,1176,3,190,95,0,1176,1188,1,0,0,
        0,1177,1180,3,182,91,0,1178,1179,5,16,0,0,1179,1181,3,182,91,0,1180,
        1178,1,0,0,0,1181,1182,1,0,0,0,1182,1180,1,0,0,0,1182,1183,1,0,0,
        0,1183,1184,1,0,0,0,1184,1185,5,68,0,0,1185,1186,3,184,92,0,1186,
        1188,1,0,0,0,1187,1173,1,0,0,0,1187,1177,1,0,0,0,1188,173,1,0,0,
        0,1189,1190,5,60,0,0,1190,1191,3,190,95,0,1191,1192,3,168,84,0,1192,
        175,1,0,0,0,1193,1194,5,30,0,0,1194,1195,3,168,84,0,1195,1196,3,
        190,95,0,1196,1197,3,168,84,0,1197,1198,3,168,84,0,1198,177,1,0,
        0,0,1199,1200,5,69,0,0,1200,1215,3,190,95,0,1201,1202,5,70,0,0,1202,
        1203,3,188,94,0,1203,1204,3,168,84,0,1204,1206,1,0,0,0,1205,1201,
        1,0,0,0,1206,1207,1,0,0,0,1207,1205,1,0,0,0,1207,1208,1,0,0,0,1208,
        1211,1,0,0,0,1209,1210,5,71,0,0,1210,1212,3,168,84,0,1211,1209,1,
        0,0,0,1211,1212,1,0,0,0,1212,1216,1,0,0,0,1213,1214,5,71,0,0,1214,
        1216,3,168,84,0,1215,1205,1,0,0,0,1215,1213,1,0,0,0,1216,179,1,0,
        0,0,1217,1218,5,41,0,0,1218,1219,5,144,0,0,1219,1228,5,23,0,0,1220,
        1225,5,144,0,0,1221,1222,5,16,0,0,1222,1224,5,144,0,0,1223,1221,
        1,0,0,0,1224,1227,1,0,0,0,1225,1223,1,0,0,0,1225,1226,1,0,0,0,1226,
        1229,1,0,0,0,1227,1225,1,0,0,0,1228,1220,1,0,0,0,1228,1229,1,0,0,
        0,1229,1230,1,0,0,0,1230,1240,5,24,0,0,1231,1232,5,72,0,0,1232,1237,
        5,144,0,0,1233,1234,5,16,0,0,1234,1236,5,144,0,0,1235,1233,1,0,0,
        0,1236,1239,1,0,0,0,1237,1235,1,0,0,0,1237,1238,1,0,0,0,1238,1241,
        1,0,0,0,1239,1237,1,0,0,0,1240,1231,1,0,0,0,1240,1241,1,0,0,0,1241,
        1242,1,0,0,0,1242,1243,3,168,84,0,1243,181,1,0,0,0,1244,1249,5,144,
        0,0,1245,1246,5,26,0,0,1246,1248,7,6,0,0,1247,1245,1,0,0,0,1248,
        1251,1,0,0,0,1249,1247,1,0,0,0,1249,1250,1,0,0,0,1250,183,1,0,0,
        0,1251,1249,1,0,0,0,1252,1253,7,6,0,0,1253,1262,5,23,0,0,1254,1259,
        3,190,95,0,1255,1256,5,16,0,0,1256,1258,3,190,95,0,1257,1255,1,0,
        0,0,1258,1261,1,0,0,0,1259,1257,1,0,0,0,1259,1260,1,0,0,0,1260,1263,
        1,0,0,0,1261,1259,1,0,0,0,1262,1254,1,0,0,0,1262,1263,1,0,0,0,1263,
        1264,1,0,0,0,1264,1265,5,24,0,0,1265,185,1,0,0,0,1266,1267,7,7,0,
        0,1267,187,1,0,0,0,1268,1274,5,146,0,0,1269,1274,5,147,0,0,1270,
        1274,5,145,0,0,1271,1274,3,186,93,0,1272,1274,5,114,0,0,1273,1268,
        1,0,0,0,1273,1269,1,0,0,0,1273,1270,1,0,0,0,1273,1271,1,0,0,0,1273,
        1272,1,0,0,0,1274,189,1,0,0,0,1275,1279,3,182,91,0,1276,1279,3,184,
        92,0,1277,1279,3,188,94,0,1278,1275,1,0,0,0,1278,1276,1,0,0,0,1278,
        1277,1,0,0,0,1279,191,1,0,0,0,1280,1281,5,73,0,0,1281,1282,3,142,
        71,0,1282,1283,5,64,0,0,1283,1284,5,23,0,0,1284,1285,3,230,115,0,
        1285,1286,5,24,0,0,1286,1287,5,2,0,0,1287,193,1,0,0,0,1288,1289,
        5,121,0,0,1289,1290,5,2,0,0,1290,195,1,0,0,0,1291,1292,5,118,0,0,
        1292,1293,5,2,0,0,1293,197,1,0,0,0,1294,1296,5,74,0,0,1295,1297,
        3,230,115,0,1296,1295,1,0,0,0,1296,1297,1,0,0,0,1297,1298,1,0,0,
        0,1298,1299,5,2,0,0,1299,199,1,0,0,0,1300,1301,5,75,0,0,1301,1302,
        3,230,115,0,1302,1303,3,30,15,0,1303,1304,5,2,0,0,1304,201,1,0,0,
        0,1305,1314,5,76,0,0,1306,1308,3,240,120,0,1307,1309,3,30,15,0,1308,
        1307,1,0,0,0,1308,1309,1,0,0,0,1309,1315,1,0,0,0,1310,1311,5,23,
        0,0,1311,1312,3,250,125,0,1312,1313,5,24,0,0,1313,1315,1,0,0,0,1314,
        1306,1,0,0,0,1314,1310,1,0,0,0,1314,1315,1,0,0,0,1315,1316,1,0,0,
        0,1316,1317,5,2,0,0,1317,203,1,0,0,0,1318,1319,5,77,0,0,1319,1320,
        5,23,0,0,1320,1323,3,230,115,0,1321,1322,5,16,0,0,1322,1324,3,250,
        125,0,1323,1321,1,0,0,0,1323,1324,1,0,0,0,1324,1325,1,0,0,0,1325,
        1326,5,24,0,0,1326,1327,5,2,0,0,1327,205,1,0,0,0,1328,1329,5,78,
        0,0,1329,1330,5,23,0,0,1330,1331,3,230,115,0,1331,1332,5,24,0,0,
        1332,1333,5,2,0,0,1333,207,1,0,0,0,1334,1337,3,74,37,0,1335,1336,
        5,11,0,0,1336,1338,3,230,115,0,1337,1335,1,0,0,0,1337,1338,1,0,0,
        0,1338,1346,1,0,0,0,1339,1340,3,76,38,0,1340,1341,5,11,0,0,1341,
        1342,3,230,115,0,1342,1343,1,0,0,0,1343,1344,5,2,0,0,1344,1346,1,
        0,0,0,1345,1334,1,0,0,0,1345,1339,1,0,0,0,1346,209,1,0,0,0,1347,
        1362,3,116,58,0,1348,1362,3,212,106,0,1349,1362,3,216,108,0,1350,
        1362,3,218,109,0,1351,1362,3,220,110,0,1352,1362,3,194,97,0,1353,
        1362,3,196,98,0,1354,1362,3,224,112,0,1355,1362,3,198,99,0,1356,
        1362,3,200,100,0,1357,1362,3,202,101,0,1358,1362,3,204,102,0,1359,
        1362,3,206,103,0,1360,1362,3,160,80,0,1361,1347,1,0,0,0,1361,1348,
        1,0,0,0,1361,1349,1,0,0,0,1361,1350,1,0,0,0,1361,1351,1,0,0,0,1361,
        1352,1,0,0,0,1361,1353,1,0,0,0,1361,1354,1,0,0,0,1361,1355,1,0,0,
        0,1361,1356,1,0,0,0,1361,1357,1,0,0,0,1361,1358,1,0,0,0,1361,1359,
        1,0,0,0,1361,1360,1,0,0,0,1362,211,1,0,0,0,1363,1364,5,60,0,0,1364,
        1365,5,23,0,0,1365,1366,3,230,115,0,1366,1367,5,24,0,0,1367,1368,
        5,15,0,0,1368,1369,5,17,0,0,1369,213,1,0,0,0,1370,1374,5,61,0,0,
        1371,1375,3,212,106,0,1372,1373,5,15,0,0,1373,1375,5,17,0,0,1374,
        1371,1,0,0,0,1374,1372,1,0,0,0,1375,215,1,0,0,0,1376,1377,5,30,0,
        0,1377,1380,5,23,0,0,1378,1381,3,154,77,0,1379,1381,5,2,0,0,1380,
        1378,1,0,0,0,1380,1379,1,0,0,0,1381,1384,1,0,0,0,1382,1385,3,144,
        72,0,1383,1385,5,2,0,0,1384,1382,1,0,0,0,1384,1383,1,0,0,0,1385,
        1387,1,0,0,0,1386,1388,3,230,115,0,1387,1386,1,0,0,0,1387,1388,1,
        0,0,0,1388,1389,1,0,0,0,1389,1390,5,24,0,0,1390,1391,5,15,0,0,1391,
        1392,5,17,0,0,1392,217,1,0,0,0,1393,1394,5,64,0,0,1394,1395,5,23,
        0,0,1395,1396,3,230,115,0,1396,1397,5,24,0,0,1397,1398,5,15,0,0,
        1398,1399,5,17,0,0,1399,219,1,0,0,0,1400,1401,5,73,0,0,1401,1402,
        5,15,0,0,1402,1403,5,17,0,0,1403,221,1,0,0,0,1404,1405,5,64,0,0,
        1405,1406,5,23,0,0,1406,1407,3,230,115,0,1407,1408,5,24,0,0,1408,
        1409,5,2,0,0,1409,223,1,0,0,0,1410,1411,5,62,0,0,1411,1417,3,230,
        115,0,1412,1413,5,27,0,0,1413,1414,5,23,0,0,1414,1415,3,70,35,0,
        1415,1416,5,24,0,0,1416,1418,1,0,0,0,1417,1412,1,0,0,0,1417,1418,
        1,0,0,0,1418,1419,1,0,0,0,1419,1420,5,15,0,0,1420,1421,5,17,0,0,
        1421,225,1,0,0,0,1422,1430,5,63,0,0,1423,1425,3,240,120,0,1424,1423,
        1,0,0,0,1424,1425,1,0,0,0,1425,1426,1,0,0,0,1426,1427,5,23,0,0,1427,
        1428,3,70,35,0,1428,1429,5,24,0,0,1429,1431,1,0,0,0,1430,1424,1,
        0,0,0,1430,1431,1,0,0,0,1431,1432,1,0,0,0,1432,1433,5,15,0,0,1433,
        1434,5,17,0,0,1434,227,1,0,0,0,1435,1436,7,8,0,0,1436,229,1,0,0,
        0,1437,1438,6,115,-1,0,1438,1439,5,126,0,0,1439,1456,3,30,15,0,1440,
        1441,3,228,114,0,1441,1442,5,23,0,0,1442,1443,3,240,120,0,1443,1444,
        5,24,0,0,1444,1456,1,0,0,0,1445,1446,7,9,0,0,1446,1456,3,230,115,
        22,1447,1448,5,105,0,0,1448,1456,3,78,39,0,1449,1456,3,236,118,0,
        1450,1456,3,158,79,0,1451,1456,3,240,120,0,1452,1456,3,232,116,0,
        1453,1456,3,234,117,0,1454,1456,3,228,114,0,1455,1437,1,0,0,0,1455,
        1440,1,0,0,0,1455,1445,1,0,0,0,1455,1447,1,0,0,0,1455,1449,1,0,0,
        0,1455,1450,1,0,0,0,1455,1451,1,0,0,0,1455,1452,1,0,0,0,1455,1453,
        1,0,0,0,1455,1454,1,0,0,0,1456,1545,1,0,0,0,1457,1458,10,20,0,0,
        1458,1459,5,88,0,0,1459,1544,3,230,115,21,1460,1461,10,19,0,0,1461,
        1462,7,10,0,0,1462,1544,3,230,115,20,1463,1464,10,18,0,0,1464,1465,
        7,11,0,0,1465,1544,3,230,115,19,1466,1467,10,17,0,0,1467,1468,7,
        12,0,0,1468,1544,3,230,115,18,1469,1470,10,16,0,0,1470,1471,5,32,
        0,0,1471,1544,3,230,115,17,1472,1473,10,15,0,0,1473,1474,5,5,0,0,
        1474,1544,3,230,115,16,1475,1476,10,14,0,0,1476,1477,5,31,0,0,1477,
        1544,3,230,115,15,1478,1479,10,13,0,0,1479,1480,7,13,0,0,1480,1544,
        3,230,115,14,1481,1482,10,12,0,0,1482,1483,7,14,0,0,1483,1544,3,
        230,115,13,1484,1485,10,11,0,0,1485,1486,5,92,0,0,1486,1544,3,230,
        115,12,1487,1488,10,10,0,0,1488,1489,5,4,0,0,1489,1544,3,230,115,
        11,1490,1491,10,9,0,0,1491,1492,5,93,0,0,1492,1493,3,230,115,0,1493,
        1494,5,25,0,0,1494,1495,3,230,115,10,1495,1544,1,0,0,0,1496,1497,
        10,8,0,0,1497,1498,7,15,0,0,1498,1544,3,230,115,9,1499,1500,10,29,
        0,0,1500,1502,5,44,0,0,1501,1503,3,230,115,0,1502,1501,1,0,0,0,1502,
        1503,1,0,0,0,1503,1504,1,0,0,0,1504,1544,5,45,0,0,1505,1506,10,28,
        0,0,1506,1508,5,44,0,0,1507,1509,3,230,115,0,1508,1507,1,0,0,0,1508,
        1509,1,0,0,0,1509,1510,1,0,0,0,1510,1512,5,25,0,0,1511,1513,3,230,
        115,0,1512,1511,1,0,0,0,1512,1513,1,0,0,0,1513,1514,1,0,0,0,1514,
        1544,5,45,0,0,1515,1516,10,27,0,0,1516,1519,5,26,0,0,1517,1520,3,
        240,120,0,1518,1520,5,50,0,0,1519,1517,1,0,0,0,1519,1518,1,0,0,0,
        1520,1544,1,0,0,0,1521,1522,10,26,0,0,1522,1536,5,15,0,0,1523,1524,
        3,240,120,0,1524,1525,5,25,0,0,1525,1533,3,230,115,0,1526,1527,5,
        16,0,0,1527,1528,3,240,120,0,1528,1529,5,25,0,0,1529,1530,3,230,
        115,0,1530,1532,1,0,0,0,1531,1526,1,0,0,0,1532,1535,1,0,0,0,1533,
        1531,1,0,0,0,1533,1534,1,0,0,0,1534,1537,1,0,0,0,1535,1533,1,0,0,
        0,1536,1523,1,0,0,0,1536,1537,1,0,0,0,1537,1538,1,0,0,0,1538,1544,
        5,17,0,0,1539,1540,10,25,0,0,1540,1544,3,30,15,0,1541,1542,10,21,
        0,0,1542,1544,7,16,0,0,1543,1457,1,0,0,0,1543,1460,1,0,0,0,1543,
        1463,1,0,0,0,1543,1466,1,0,0,0,1543,1469,1,0,0,0,1543,1472,1,0,0,
        0,1543,1475,1,0,0,0,1543,1478,1,0,0,0,1543,1481,1,0,0,0,1543,1484,
        1,0,0,0,1543,1487,1,0,0,0,1543,1490,1,0,0,0,1543,1496,1,0,0,0,1543,
        1499,1,0,0,0,1543,1505,1,0,0,0,1543,1515,1,0,0,0,1543,1521,1,0,0,
        0,1543,1539,1,0,0,0,1543,1541,1,0,0,0,1544,1547,1,0,0,0,1545,1543,
        1,0,0,0,1545,1546,1,0,0,0,1546,231,1,0,0,0,1547,1545,1,0,0,0,1548,
        1554,3,250,125,0,1549,1554,3,238,119,0,1550,1554,3,244,122,0,1551,
        1554,3,246,123,0,1552,1554,3,248,124,0,1553,1548,1,0,0,0,1553,1549,
        1,0,0,0,1553,1550,1,0,0,0,1553,1551,1,0,0,0,1553,1552,1,0,0,0,1554,
        233,1,0,0,0,1555,1556,3,238,119,0,1556,1557,5,113,0,0,1557,235,1,
        0,0,0,1558,1567,5,23,0,0,1559,1564,3,230,115,0,1560,1561,5,16,0,
        0,1561,1563,3,230,115,0,1562,1560,1,0,0,0,1563,1566,1,0,0,0,1564,
        1562,1,0,0,0,1564,1565,1,0,0,0,1565,1568,1,0,0,0,1566,1564,1,0,0,
        0,1567,1559,1,0,0,0,1567,1568,1,0,0,0,1568,1569,1,0,0,0,1569,1570,
        5,24,0,0,1570,237,1,0,0,0,1571,1572,7,17,0,0,1572,239,1,0,0,0,1573,
        1574,5,137,0,0,1574,241,1,0,0,0,1575,1576,5,131,0,0,1576,1577,3,
        240,120,0,1577,1578,5,20,0,0,1578,1579,3,228,114,0,1579,1580,5,2,
        0,0,1580,243,1,0,0,0,1581,1582,7,7,0,0,1582,245,1,0,0,0,1583,1585,
        5,114,0,0,1584,1583,1,0,0,0,1585,1586,1,0,0,0,1586,1584,1,0,0,0,
        1586,1587,1,0,0,0,1587,247,1,0,0,0,1588,1590,5,140,0,0,1589,1588,
        1,0,0,0,1590,1591,1,0,0,0,1591,1589,1,0,0,0,1591,1592,1,0,0,0,1592,
        249,1,0,0,0,1593,1595,7,18,0,0,1594,1593,1,0,0,0,1595,1596,1,0,0,
        0,1596,1594,1,0,0,0,1596,1597,1,0,0,0,1597,251,1,0,0,0,1598,1610,
        5,106,0,0,1599,1600,5,23,0,0,1600,1605,3,32,16,0,1601,1602,5,16,
        0,0,1602,1604,3,32,16,0,1603,1601,1,0,0,0,1604,1607,1,0,0,0,1605,
        1603,1,0,0,0,1605,1606,1,0,0,0,1606,1608,1,0,0,0,1607,1605,1,0,0,
        0,1608,1609,5,24,0,0,1609,1611,1,0,0,0,1610,1599,1,0,0,0,1610,1611,
        1,0,0,0,1611,253,1,0,0,0,174,267,269,284,288,293,299,303,306,311,
        317,326,332,342,348,358,361,367,380,383,389,400,410,418,433,438,
        447,469,474,481,483,491,499,501,509,513,523,525,530,539,541,547,
        558,565,573,579,583,588,591,603,615,618,622,624,629,635,641,649,
        651,659,663,673,676,679,691,698,701,706,709,713,718,722,730,732,
        737,741,751,756,761,768,773,779,784,789,791,799,808,810,818,826,
        834,842,850,858,869,879,892,910,919,923,928,936,940,945,955,966,
        983,993,997,1006,1008,1031,1043,1052,1058,1062,1068,1080,1086,1090,
        1093,1104,1111,1114,1120,1145,1151,1160,1169,1171,1182,1187,1207,
        1211,1215,1225,1228,1237,1240,1249,1259,1262,1273,1278,1296,1308,
        1314,1323,1337,1345,1361,1374,1380,1384,1387,1417,1424,1430,1455,
        1502,1508,1512,1519,1533,1536,1543,1545,1553,1564,1567,1586,1591,
        1596,1605,1610
    ]

class SolidityParser ( Parser ):

    grammarFileName = "Solidity.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'pragma'", "';'", "'*'", "'||'", "'^'", 
                     "'~'", "'>='", "'>'", "'<'", "'<='", "'='", "'as'", 
                     "'import'", "'from'", "'{'", "','", "'}'", "'abstract'", 
                     "'contract'", "'is'", "'interface'", "'library'", "'('", 
                     "')'", "':'", "'.'", "'returns'", "'error'", "'using'", 
                     "'for'", "'|'", "'&'", "'+'", "'-'", "'/'", "'%'", 
                     "'=='", "'!='", "'struct'", "'modifier'", "'function'", 
                     "'event'", "'enum'", "'['", "']'", "'mapping'", "'=>'", 
                     "'//'", "'@GlobalVar'", "'address'", "'@StateVar'", 
                     "'@LocalVar'", "'true'", "'false'", "'any'", "'memory'", 
                     "'storage'", "'calldata'", "'unchecked'", "'if'", "'else'", 
                     "'try'", "'catch'", "'while'", "'assembly'", "'evamasm'", 
                     "'let'", "':='", "'switch'", "'case'", "'default'", 
                     "'->'", "'do'", "'return'", "'emit'", "'revert'", "'require'", 
                     "'assert'", "'address payable'", "'bool'", "'string'", 
                     "'var'", "'bytes'", "'++'", "'--'", "'!'", "'delete'", 
                     "'**'", "'<<'", "'>>'", "'>>>'", "'&&'", "'?'", "'|='", 
                     "'^='", "'&='", "'<<='", "'>>='", "'>>>='", "'+='", 
                     "'-='", "'*='", "'/='", "'%='", "'new'", "'override'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'anonymous'", "'break'", 
                     "'constant'", "'immutable'", "'continue'", "'leave'", 
                     "'external'", "'indexed'", "'internal'", "'payable'", 
                     "'private'", "'public'", "'virtual'", "'pure'", "'type'", 
                     "'view'", "'global'", "'constructor'", "'fallback'", 
                     "'receive'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "Int", "Uint", 
                      "Byte", "Fixed", "Ufixed", "DecimalNumber", "SubDenomination", 
                      "HexString", "HexNumber", "ReservedKeyword", "AnonymousKeyword", 
                      "BreakKeyword", "ConstantKeyword", "ImmutableKeyword", 
                      "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", 
                      "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
                      "PrivateKeyword", "PublicKeyword", "VirtualKeyword", 
                      "PureKeyword", "TypeKeyword", "ViewKeyword", "GlobalKeyword", 
                      "ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", 
                      "Identifier", "NonEmptyStringLiteral", "EmptyStringLiteral", 
                      "UnicodeStringLiteral", "VersionLiteral", "WS", "YulEvmBuiltin", 
                      "YulIdentifier", "YulHexNumber", "YulDecimalNumber", 
                      "YulStringLiteral", "COMMENT" ]

    RULE_sourceUnit = 0
    RULE_pragmaDirective = 1
    RULE_pragmaName = 2
    RULE_pragmaValue = 3
    RULE_version = 4
    RULE_versionOperator = 5
    RULE_versionConstraint = 6
    RULE_importDeclaration = 7
    RULE_importDirective = 8
    RULE_importPath = 9
    RULE_symbolAliases = 10
    RULE_contractDefinition = 11
    RULE_interfaceDefinition = 12
    RULE_libraryDefinition = 13
    RULE_inheritanceSpecifier = 14
    RULE_callArgumentList = 15
    RULE_identifierPath = 16
    RULE_constantVariableDeclaration = 17
    RULE_contractBodyElement = 18
    RULE_constructorDefinition = 19
    RULE_fallbackFunctionDefinition = 20
    RULE_receiveFunctionDefinition = 21
    RULE_stateVariableDeclaration = 22
    RULE_errorDefinition = 23
    RULE_errorParameter = 24
    RULE_usingDirective = 25
    RULE_userDefinableOperators = 26
    RULE_structDefinition = 27
    RULE_structMember = 28
    RULE_modifierDefinition = 29
    RULE_visibility = 30
    RULE_modifierInvocation = 31
    RULE_functionDefinition = 32
    RULE_eventDefinition = 33
    RULE_enumDefinition = 34
    RULE_parameterList = 35
    RULE_eventParameter = 36
    RULE_variableDeclaration = 37
    RULE_variableDeclarationTuple = 38
    RULE_typeName = 39
    RULE_mapping = 40
    RULE_mappingKeyType = 41
    RULE_functionTypeName = 42
    RULE_interactiveSourceUnit = 43
    RULE_interactiveEnumUnit = 44
    RULE_interactiveStructUnit = 45
    RULE_interactiveBlockUnit = 46
    RULE_interactiveDoWhileUnit = 47
    RULE_interactiveIfElseUnit = 48
    RULE_interactiveCatchClauseUnit = 49
    RULE_debugUnit = 50
    RULE_debugGlobalVar = 51
    RULE_globalValue = 52
    RULE_debugStateVar = 53
    RULE_debugLocalVar = 54
    RULE_testingExpression = 55
    RULE_subAccess = 56
    RULE_stateLocalValue = 57
    RULE_interactiveSimpleStatement = 58
    RULE_interactiveVariableDeclarationStatement = 59
    RULE_interactiveExpressionStatement = 60
    RULE_interactiveStateVariableElement = 61
    RULE_interactiveEnumDefinition = 62
    RULE_interactiveStructDefinition = 63
    RULE_interactiveEnumItems = 64
    RULE_interactiveFunctionElement = 65
    RULE_interactiveBlockItem = 66
    RULE_dataLocation = 67
    RULE_stateMutability = 68
    RULE_block = 69
    RULE_uncheckedBlock = 70
    RULE_statement = 71
    RULE_expressionStatement = 72
    RULE_ifStatement = 73
    RULE_tryStatement = 74
    RULE_catchClause = 75
    RULE_whileStatement = 76
    RULE_simpleStatement = 77
    RULE_forStatement = 78
    RULE_inlineArrayExpression = 79
    RULE_assemblyStatement = 80
    RULE_assemblyFlags = 81
    RULE_assemblyFlagString = 82
    RULE_yulStatement = 83
    RULE_yulBlock = 84
    RULE_yulVariableDeclaration = 85
    RULE_yulAssignment = 86
    RULE_yulIfStatement = 87
    RULE_yulForStatement = 88
    RULE_yulSwitchStatement = 89
    RULE_yulFunctionDefinition = 90
    RULE_yulPath = 91
    RULE_yulFunctionCall = 92
    RULE_yulBoolean = 93
    RULE_yulLiteral = 94
    RULE_yulExpression = 95
    RULE_doWhileStatement = 96
    RULE_continueStatement = 97
    RULE_breakStatement = 98
    RULE_returnStatement = 99
    RULE_emitStatement = 100
    RULE_revertStatement = 101
    RULE_requireStatement = 102
    RULE_assertStatement = 103
    RULE_variableDeclarationStatement = 104
    RULE_interactiveStatement = 105
    RULE_interactiveIfStatement = 106
    RULE_interactiveElseStatement = 107
    RULE_interactiveForStatement = 108
    RULE_interactiveWhileStatement = 109
    RULE_interactiveDoWhileDoStatement = 110
    RULE_interactiveDoWhileWhileStatement = 111
    RULE_interactiveTryStatement = 112
    RULE_interactiveCatchClause = 113
    RULE_elementaryTypeName = 114
    RULE_expression = 115
    RULE_literal = 116
    RULE_literalWithSubDenomination = 117
    RULE_tupleExpression = 118
    RULE_numberLiteral = 119
    RULE_identifier = 120
    RULE_userDefinedValueTypeDefinition = 121
    RULE_booleanLiteral = 122
    RULE_hexStringLiteral = 123
    RULE_unicodeStringLiteral = 124
    RULE_stringLiteral = 125
    RULE_overrideSpecifier = 126

    ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "importPath", "symbolAliases", "contractDefinition", 
                   "interfaceDefinition", "libraryDefinition", "inheritanceSpecifier", 
                   "callArgumentList", "identifierPath", "constantVariableDeclaration", 
                   "contractBodyElement", "constructorDefinition", "fallbackFunctionDefinition", 
                   "receiveFunctionDefinition", "stateVariableDeclaration", 
                   "errorDefinition", "errorParameter", "usingDirective", 
                   "userDefinableOperators", "structDefinition", "structMember", 
                   "modifierDefinition", "visibility", "modifierInvocation", 
                   "functionDefinition", "eventDefinition", "enumDefinition", 
                   "parameterList", "eventParameter", "variableDeclaration", 
                   "variableDeclarationTuple", "typeName", "mapping", "mappingKeyType", 
                   "functionTypeName", "interactiveSourceUnit", "interactiveEnumUnit", 
                   "interactiveStructUnit", "interactiveBlockUnit", "interactiveDoWhileUnit", 
                   "interactiveIfElseUnit", "interactiveCatchClauseUnit", 
                   "debugUnit", "debugGlobalVar", "globalValue", "debugStateVar", 
                   "debugLocalVar", "testingExpression", "subAccess", "stateLocalValue", 
                   "interactiveSimpleStatement", "interactiveVariableDeclarationStatement", 
                   "interactiveExpressionStatement", "interactiveStateVariableElement", 
                   "interactiveEnumDefinition", "interactiveStructDefinition", 
                   "interactiveEnumItems", "interactiveFunctionElement", 
                   "interactiveBlockItem", "dataLocation", "stateMutability", 
                   "block", "uncheckedBlock", "statement", "expressionStatement", 
                   "ifStatement", "tryStatement", "catchClause", "whileStatement", 
                   "simpleStatement", "forStatement", "inlineArrayExpression", 
                   "assemblyStatement", "assemblyFlags", "assemblyFlagString", 
                   "yulStatement", "yulBlock", "yulVariableDeclaration", 
                   "yulAssignment", "yulIfStatement", "yulForStatement", 
                   "yulSwitchStatement", "yulFunctionDefinition", "yulPath", 
                   "yulFunctionCall", "yulBoolean", "yulLiteral", "yulExpression", 
                   "doWhileStatement", "continueStatement", "breakStatement", 
                   "returnStatement", "emitStatement", "revertStatement", 
                   "requireStatement", "assertStatement", "variableDeclarationStatement", 
                   "interactiveStatement", "interactiveIfStatement", "interactiveElseStatement", 
                   "interactiveForStatement", "interactiveWhileStatement", 
                   "interactiveDoWhileDoStatement", "interactiveDoWhileWhileStatement", 
                   "interactiveTryStatement", "interactiveCatchClause", 
                   "elementaryTypeName", "expression", "literal", "literalWithSubDenomination", 
                   "tupleExpression", "numberLiteral", "identifier", "userDefinedValueTypeDefinition", 
                   "booleanLiteral", "hexStringLiteral", "unicodeStringLiteral", 
                   "stringLiteral", "overrideSpecifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    Int=107
    Uint=108
    Byte=109
    Fixed=110
    Ufixed=111
    DecimalNumber=112
    SubDenomination=113
    HexString=114
    HexNumber=115
    ReservedKeyword=116
    AnonymousKeyword=117
    BreakKeyword=118
    ConstantKeyword=119
    ImmutableKeyword=120
    ContinueKeyword=121
    LeaveKeyword=122
    ExternalKeyword=123
    IndexedKeyword=124
    InternalKeyword=125
    PayableKeyword=126
    PrivateKeyword=127
    PublicKeyword=128
    VirtualKeyword=129
    PureKeyword=130
    TypeKeyword=131
    ViewKeyword=132
    GlobalKeyword=133
    ConstructorKeyword=134
    FallbackKeyword=135
    ReceiveKeyword=136
    Identifier=137
    NonEmptyStringLiteral=138
    EmptyStringLiteral=139
    UnicodeStringLiteral=140
    VersionLiteral=141
    WS=142
    YulEvmBuiltin=143
    YulIdentifier=144
    YulHexNumber=145
    YulDecimalNumber=146
    YulStringLiteral=147
    COMMENT=148

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def usingDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UsingDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UsingDirectiveContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def interfaceDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InterfaceDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InterfaceDefinitionContext,i)


        def libraryDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.LibraryDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.LibraryDefinitionContext,i)


        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,i)


        def constantVariableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ConstantVariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ConstantVariableDeclarationContext,i)


        def structDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,i)


        def enumDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EnumDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,i)


        def userDefinedValueTypeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinedValueTypeDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinedValueTypeDefinitionContext,i)


        def errorDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ErrorDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ErrorDefinitionContext,i)


        def eventDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_sourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceUnit" ):
                listener.enterSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceUnit" ):
                listener.exitSourceUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceUnit" ):
                return visitor.visitSourceUnit(self)
            else:
                return visitor.visitChildren(self)




    def sourceUnit(self):

        localctx = SolidityParser.SourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1212212382015490) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 292733984100581407) != 0):
                self.state = 267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 254
                    self.pragmaDirective()
                    pass

                elif la_ == 2:
                    self.state = 255
                    self.importDirective()
                    pass

                elif la_ == 3:
                    self.state = 256
                    self.usingDirective()
                    pass

                elif la_ == 4:
                    self.state = 257
                    self.contractDefinition()
                    pass

                elif la_ == 5:
                    self.state = 258
                    self.interfaceDefinition()
                    pass

                elif la_ == 6:
                    self.state = 259
                    self.libraryDefinition()
                    pass

                elif la_ == 7:
                    self.state = 260
                    self.functionDefinition()
                    pass

                elif la_ == 8:
                    self.state = 261
                    self.constantVariableDeclaration()
                    pass

                elif la_ == 9:
                    self.state = 262
                    self.structDefinition()
                    pass

                elif la_ == 10:
                    self.state = 263
                    self.enumDefinition()
                    pass

                elif la_ == 11:
                    self.state = 264
                    self.userDefinedValueTypeDefinition()
                    pass

                elif la_ == 12:
                    self.state = 265
                    self.errorDefinition()
                    pass

                elif la_ == 13:
                    self.state = 266
                    self.eventDefinition()
                    pass


                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 272
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pragmaName(self):
            return self.getTypedRuleContext(SolidityParser.PragmaNameContext,0)


        def pragmaValue(self):
            return self.getTypedRuleContext(SolidityParser.PragmaValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaDirective" ):
                listener.enterPragmaDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaDirective" ):
                listener.exitPragmaDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaDirective" ):
                return visitor.visitPragmaDirective(self)
            else:
                return visitor.visitChildren(self)




    def pragmaDirective(self):

        localctx = SolidityParser.PragmaDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.match(SolidityParser.T__0)
            self.state = 275
            self.pragmaName()
            self.state = 276
            self.pragmaValue()
            self.state = 277
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaName" ):
                listener.enterPragmaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaName" ):
                listener.exitPragmaName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaName" ):
                return visitor.visitPragmaName(self)
            else:
                return visitor.visitChildren(self)




    def pragmaName(self):

        localctx = SolidityParser.PragmaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(SolidityParser.VersionContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_pragmaValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragmaValue" ):
                listener.enterPragmaValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragmaValue" ):
                listener.exitPragmaValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaValue" ):
                return visitor.visitPragmaValue(self)
            else:
                return visitor.visitChildren(self)




    def pragmaValue(self):

        localctx = SolidityParser.PragmaValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaValue)
        try:
            self.state = 284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 281
                self.match(SolidityParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 282
                self.version()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 283
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def versionConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VersionConstraintContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VersionConstraintContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion" ):
                listener.enterVersion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion" ):
                listener.exitVersion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersion" ):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)




    def version(self):

        localctx = SolidityParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_version)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.versionConstraint()
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4080) != 0) or _la==112 or _la==141:
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 287
                    self.match(SolidityParser.T__3)


                self.state = 290
                self.versionConstraint()
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_versionOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionOperator" ):
                listener.enterVersionOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionOperator" ):
                listener.exitVersionOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionOperator" ):
                return visitor.visitVersionOperator(self)
            else:
                return visitor.visitChildren(self)




    def versionOperator(self):

        localctx = SolidityParser.VersionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_versionOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4064) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VersionConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VersionLiteral(self):
            return self.getToken(SolidityParser.VersionLiteral, 0)

        def versionOperator(self):
            return self.getTypedRuleContext(SolidityParser.VersionOperatorContext,0)


        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_versionConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionConstraint" ):
                listener.enterVersionConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionConstraint" ):
                listener.exitVersionConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionConstraint" ):
                return visitor.visitVersionConstraint(self)
            else:
                return visitor.visitChildren(self)




    def versionConstraint(self):

        localctx = SolidityParser.VersionConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_versionConstraint)
        self._la = 0 # Token type
        try:
            self.state = 306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4064) != 0):
                    self.state = 298
                    self.versionOperator()


                self.state = 301
                self.match(SolidityParser.VersionLiteral)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4064) != 0):
                    self.state = 302
                    self.versionOperator()


                self.state = 305
                self.match(SolidityParser.DecimalNumber)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = SolidityParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.identifier()
            self.state = 311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 309
                self.match(SolidityParser.T__11)
                self.state = 310
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importPath(self):
            return self.getTypedRuleContext(SolidityParser.ImportPathContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def symbolAliases(self):
            return self.getTypedRuleContext(SolidityParser.SymbolAliasesContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_importDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDirective" ):
                listener.enterImportDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDirective" ):
                listener.exitImportDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDirective" ):
                return visitor.visitImportDirective(self)
            else:
                return visitor.visitChildren(self)




    def importDirective(self):

        localctx = SolidityParser.ImportDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDirective)
        self._la = 0 # Token type
        try:
            self.state = 332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 313
                self.match(SolidityParser.T__12)
                self.state = 314
                self.importPath()
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 315
                    self.match(SolidityParser.T__11)
                    self.state = 316
                    self.identifier()


                self.state = 319
                self.match(SolidityParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 321
                self.match(SolidityParser.T__12)
                self.state = 326
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 322
                    self.symbolAliases()
                    pass
                elif token in [3]:
                    self.state = 323
                    self.match(SolidityParser.T__2)
                    self.state = 324
                    self.match(SolidityParser.T__11)
                    self.state = 325
                    self.identifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 328
                self.match(SolidityParser.T__13)
                self.state = 329
                self.importPath()
                self.state = 330
                self.match(SolidityParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_importPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportPath" ):
                listener.enterImportPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportPath" ):
                listener.exitImportPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportPath" ):
                return visitor.visitImportPath(self)
            else:
                return visitor.visitChildren(self)




    def importPath(self):

        localctx = SolidityParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SymbolAliasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_symbolAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSymbolAliases" ):
                listener.enterSymbolAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSymbolAliases" ):
                listener.exitSymbolAliases(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSymbolAliases" ):
                return visitor.visitSymbolAliases(self)
            else:
                return visitor.visitChildren(self)




    def symbolAliases(self):

        localctx = SolidityParser.SymbolAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_symbolAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(SolidityParser.T__14)
            self.state = 337
            self.importDeclaration()
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 338
                self.match(SolidityParser.T__15)
                self.state = 339
                self.importDeclaration()
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 345
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractBodyElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractBodyElementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractDefinition" ):
                listener.enterContractDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractDefinition" ):
                listener.exitContractDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractDefinition" ):
                return visitor.visitContractDefinition(self)
            else:
                return visitor.visitChildren(self)




    def contractDefinition(self):

        localctx = SolidityParser.ContractDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_contractDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 347
                self.match(SolidityParser.T__17)


            self.state = 350
            self.match(SolidityParser.T__18)
            self.state = 351
            self.identifier()
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 352
                self.match(SolidityParser.T__19)
                self.state = 353
                self.inheritanceSpecifier()
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 354
                    self.match(SolidityParser.T__15)
                    self.state = 355
                    self.inheritanceSpecifier()
                    self.state = 360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 363
            self.match(SolidityParser.T__14)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1213311886557184) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 544935563233329183) != 0):
                self.state = 364
                self.contractBodyElement()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 370
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def inheritanceSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InheritanceSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InheritanceSpecifierContext,i)


        def contractBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractBodyElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractBodyElementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interfaceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDefinition" ):
                listener.enterInterfaceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDefinition" ):
                listener.exitInterfaceDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDefinition" ):
                return visitor.visitInterfaceDefinition(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDefinition(self):

        localctx = SolidityParser.InterfaceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_interfaceDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(SolidityParser.T__20)
            self.state = 373
            self.identifier()
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 374
                self.match(SolidityParser.T__19)
                self.state = 375
                self.inheritanceSpecifier()
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 376
                    self.match(SolidityParser.T__15)
                    self.state = 377
                    self.inheritanceSpecifier()
                    self.state = 382
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 385
            self.match(SolidityParser.T__14)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1213311886557184) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 544935563233329183) != 0):
                self.state = 386
                self.contractBodyElement()
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 392
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LibraryDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def contractBodyElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractBodyElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractBodyElementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_libraryDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryDefinition" ):
                listener.enterLibraryDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryDefinition" ):
                listener.exitLibraryDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryDefinition" ):
                return visitor.visitLibraryDefinition(self)
            else:
                return visitor.visitChildren(self)




    def libraryDefinition(self):

        localctx = SolidityParser.LibraryDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_libraryDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(SolidityParser.T__21)
            self.state = 395
            self.identifier()
            self.state = 396
            self.match(SolidityParser.T__14)
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1213311886557184) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 544935563233329183) != 0):
                self.state = 397
                self.contractBodyElement()
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 403
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_inheritanceSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceSpecifier" ):
                listener.enterInheritanceSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceSpecifier" ):
                listener.exitInheritanceSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritanceSpecifier" ):
                return visitor.visitInheritanceSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def inheritanceSpecifier(self):

        localctx = SolidityParser.InheritanceSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_inheritanceSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.identifierPath()
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 406
                self.match(SolidityParser.T__22)
                self.state = 407
                self.callArgumentList()
                self.state = 408
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_callArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallArgumentList" ):
                listener.enterCallArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallArgumentList" ):
                listener.exitCallArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallArgumentList" ):
                return visitor.visitCallArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def callArgumentList(self):

        localctx = SolidityParser.CallArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_callArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(SolidityParser.T__22)
            self.state = 438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 34, 44, 50, 53, 54, 79, 80, 81, 82, 83, 84, 85, 86, 87, 105, 107, 108, 109, 110, 111, 112, 114, 115, 126, 137, 138, 139, 140]:
                self.state = 413
                self.expression(0)
                self.state = 418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 414
                    self.match(SolidityParser.T__15)
                    self.state = 415
                    self.expression(0)
                    self.state = 420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [15]:
                self.state = 421
                self.match(SolidityParser.T__14)

                self.state = 422
                self.identifier()
                self.state = 423
                self.match(SolidityParser.T__24)
                self.state = 424
                self.expression(0)
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 426
                    self.match(SolidityParser.T__15)
                    self.state = 427
                    self.identifier()
                    self.state = 428
                    self.match(SolidityParser.T__24)
                    self.state = 429
                    self.expression(0)
                    self.state = 435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 436
                self.match(SolidityParser.T__16)
                pass
            elif token in [24]:
                pass
            else:
                pass
            self.state = 440
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_identifierPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierPath" ):
                listener.enterIdentifierPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierPath" ):
                listener.exitIdentifierPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierPath" ):
                return visitor.visitIdentifierPath(self)
            else:
                return visitor.visitChildren(self)




    def identifierPath(self):

        localctx = SolidityParser.IdentifierPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_identifierPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.identifier()
            self.state = 447
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 443
                    self.match(SolidityParser.T__25)
                    self.state = 444
                    self.identifier() 
                self.state = 449
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def ConstantKeyword(self):
            return self.getToken(SolidityParser.ConstantKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_constantVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantVariableDeclaration" ):
                listener.enterConstantVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantVariableDeclaration" ):
                listener.exitConstantVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantVariableDeclaration" ):
                return visitor.visitConstantVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constantVariableDeclaration(self):

        localctx = SolidityParser.ConstantVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_constantVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.typeName(0)
            self.state = 451
            self.match(SolidityParser.ConstantKeyword)
            self.state = 452
            self.identifier()
            self.state = 453
            self.match(SolidityParser.T__10)
            self.state = 454
            self.expression(0)
            self.state = 455
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContractBodyElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ConstructorDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def fallbackFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FallbackFunctionDefinitionContext,0)


        def receiveFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ReceiveFunctionDefinitionContext,0)


        def structDefinition(self):
            return self.getTypedRuleContext(SolidityParser.StructDefinitionContext,0)


        def enumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EnumDefinitionContext,0)


        def userDefinedValueTypeDefinition(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedValueTypeDefinitionContext,0)


        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def errorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ErrorDefinitionContext,0)


        def usingDirective(self):
            return self.getTypedRuleContext(SolidityParser.UsingDirectiveContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_contractBodyElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContractBodyElement" ):
                listener.enterContractBodyElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContractBodyElement" ):
                listener.exitContractBodyElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContractBodyElement" ):
                return visitor.visitContractBodyElement(self)
            else:
                return visitor.visitChildren(self)




    def contractBodyElement(self):

        localctx = SolidityParser.ContractBodyElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_contractBodyElement)
        try:
            self.state = 469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 457
                self.constructorDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 458
                self.functionDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 459
                self.modifierDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 460
                self.fallbackFunctionDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 461
                self.receiveFunctionDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 462
                self.structDefinition()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 463
                self.enumDefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 464
                self.userDefinedValueTypeDefinition()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 465
                self.stateVariableDeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 466
                self.eventDefinition()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 467
                self.errorDefinition()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 468
                self.usingDirective()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ConstructorKeyword(self):
            return self.getToken(SolidityParser.ConstructorKeyword, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def PayableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PayableKeyword)
            else:
                return self.getToken(SolidityParser.PayableKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_constructorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDefinition" ):
                listener.enterConstructorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDefinition" ):
                listener.exitConstructorDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDefinition" ):
                return visitor.visitConstructorDefinition(self)
            else:
                return visitor.visitChildren(self)




    def constructorDefinition(self):

        localctx = SolidityParser.ConstructorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_constructorDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(SolidityParser.ConstructorKeyword)
            self.state = 472
            self.match(SolidityParser.T__22)
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1198467674275840) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 288230384473210911) != 0):
                self.state = 473
                self.parameterList()


            self.state = 476
            self.match(SolidityParser.T__23)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & 4107) != 0):
                self.state = 481
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [137]:
                    self.state = 477
                    self.modifierInvocation()
                    pass
                elif token in [126]:
                    self.state = 478
                    self.match(SolidityParser.PayableKeyword)
                    pass
                elif token in [125]:
                    self.state = 479
                    self.match(SolidityParser.InternalKeyword)
                    pass
                elif token in [128]:
                    self.state = 480
                    self.match(SolidityParser.PublicKeyword)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 486
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FallbackFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FallbackKeyword(self):
            return self.getToken(SolidityParser.FallbackKeyword, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterListContext,i)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_fallbackFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFallbackFunctionDefinition" ):
                listener.enterFallbackFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFallbackFunctionDefinition" ):
                listener.exitFallbackFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFallbackFunctionDefinition" ):
                return visitor.visitFallbackFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def fallbackFunctionDefinition(self):

        localctx = SolidityParser.FallbackFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fallbackFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(SolidityParser.FallbackKeyword)
            self.state = 489
            self.match(SolidityParser.T__22)
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1198467674275840) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 288230384473210911) != 0):
                self.state = 490
                self.parameterList()


            self.state = 493
            self.match(SolidityParser.T__23)
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 2240937985) != 0):
                self.state = 499
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [123]:
                    self.state = 494
                    self.match(SolidityParser.ExternalKeyword)
                    pass
                elif token in [126, 130, 132]:
                    self.state = 495
                    self.stateMutability()
                    pass
                elif token in [137]:
                    self.state = 496
                    self.modifierInvocation()
                    pass
                elif token in [129]:
                    self.state = 497
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [106]:
                    self.state = 498
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 504
                self.match(SolidityParser.T__26)
                self.state = 505
                self.match(SolidityParser.T__22)
                self.state = 506
                self.parameterList()
                self.state = 507
                self.match(SolidityParser.T__23)


            self.state = 513
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 511
                self.match(SolidityParser.T__1)
                pass
            elif token in [15]:
                self.state = 512
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ReceiveKeyword(self):
            return self.getToken(SolidityParser.ReceiveKeyword, 0)

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def ExternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ExternalKeyword)
            else:
                return self.getToken(SolidityParser.ExternalKeyword, i)

        def PayableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PayableKeyword)
            else:
                return self.getToken(SolidityParser.PayableKeyword, i)

        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_receiveFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveFunctionDefinition" ):
                listener.enterReceiveFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveFunctionDefinition" ):
                listener.exitReceiveFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveFunctionDefinition" ):
                return visitor.visitReceiveFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def receiveFunctionDefinition(self):

        localctx = SolidityParser.ReceiveFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_receiveFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(SolidityParser.ReceiveKeyword)
            self.state = 516
            self.match(SolidityParser.T__22)
            self.state = 517
            self.match(SolidityParser.T__23)
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 2157051905) != 0):
                self.state = 523
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [123]:
                    self.state = 518
                    self.match(SolidityParser.ExternalKeyword)
                    pass
                elif token in [126]:
                    self.state = 519
                    self.match(SolidityParser.PayableKeyword)
                    pass
                elif token in [137]:
                    self.state = 520
                    self.modifierInvocation()
                    pass
                elif token in [129]:
                    self.state = 521
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [106]:
                    self.state = 522
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 530
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 528
                self.match(SolidityParser.T__1)
                pass
            elif token in [15]:
                self.state = 529
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def PublicKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PublicKeyword)
            else:
                return self.getToken(SolidityParser.PublicKeyword, i)

        def InternalKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.InternalKeyword)
            else:
                return self.getToken(SolidityParser.InternalKeyword, i)

        def PrivateKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.PrivateKeyword)
            else:
                return self.getToken(SolidityParser.PrivateKeyword, i)

        def ConstantKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ConstantKeyword)
            else:
                return self.getToken(SolidityParser.ConstantKeyword, i)

        def ImmutableKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.ImmutableKeyword)
            else:
                return self.getToken(SolidityParser.ImmutableKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_stateVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateVariableDeclaration" ):
                listener.enterStateVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateVariableDeclaration" ):
                listener.exitStateVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateVariableDeclaration" ):
                return visitor.visitStateVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def stateVariableDeclaration(self):

        localctx = SolidityParser.StateVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_stateVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.typeName(0)
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 6840321) != 0):
                self.state = 539
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [128]:
                    self.state = 533
                    self.match(SolidityParser.PublicKeyword)
                    pass
                elif token in [125]:
                    self.state = 534
                    self.match(SolidityParser.InternalKeyword)
                    pass
                elif token in [127]:
                    self.state = 535
                    self.match(SolidityParser.PrivateKeyword)
                    pass
                elif token in [119]:
                    self.state = 536
                    self.match(SolidityParser.ConstantKeyword)
                    pass
                elif token in [120]:
                    self.state = 537
                    self.match(SolidityParser.ImmutableKeyword)
                    pass
                elif token in [106]:
                    self.state = 538
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 544
            self.identifier()
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 545
                self.match(SolidityParser.T__10)
                self.state = 546
                self.expression(0)


            self.state = 549
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def errorParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ErrorParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ErrorParameterContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_errorDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorDefinition" ):
                listener.enterErrorDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorDefinition" ):
                listener.exitErrorDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorDefinition" ):
                return visitor.visitErrorDefinition(self)
            else:
                return visitor.visitChildren(self)




    def errorDefinition(self):

        localctx = SolidityParser.ErrorDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_errorDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(SolidityParser.T__27)
            self.state = 552
            self.identifier()
            self.state = 553
            self.match(SolidityParser.T__22)
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1198467674275840) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 288230384473210911) != 0):
                self.state = 554
                self.errorParameter()

                self.state = 555
                self.match(SolidityParser.T__15)
                self.state = 556
                self.errorParameter()


            self.state = 560
            self.match(SolidityParser.T__23)
            self.state = 561
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_errorParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorParameter" ):
                listener.enterErrorParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorParameter" ):
                listener.exitErrorParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorParameter" ):
                return visitor.visitErrorParameter(self)
            else:
                return visitor.visitChildren(self)




    def errorParameter(self):

        localctx = SolidityParser.ErrorParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_errorParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.typeName(0)
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 564
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierPathContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,i)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def GlobalKeyword(self):
            return self.getToken(SolidityParser.GlobalKeyword, 0)

        def userDefinableOperators(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UserDefinableOperatorsContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UserDefinableOperatorsContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_usingDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingDirective" ):
                listener.enterUsingDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingDirective" ):
                listener.exitUsingDirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingDirective" ):
                return visitor.visitUsingDirective(self)
            else:
                return visitor.visitChildren(self)




    def usingDirective(self):

        localctx = SolidityParser.UsingDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_usingDirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(SolidityParser.T__28)
            self.state = 583
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [137]:
                self.state = 568
                self.identifierPath()
                pass
            elif token in [15]:
                self.state = 569
                self.match(SolidityParser.T__14)

                self.state = 570
                self.identifierPath()
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 571
                    self.match(SolidityParser.T__11)
                    self.state = 572
                    self.userDefinableOperators()


                self.state = 575
                self.match(SolidityParser.T__15)
                self.state = 576
                self.identifierPath()
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 577
                    self.match(SolidityParser.T__11)
                    self.state = 578
                    self.userDefinableOperators()


                self.state = 581
                self.match(SolidityParser.T__16)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 585
            self.match(SolidityParser.T__29)
            self.state = 588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.state = 586
                self.match(SolidityParser.T__2)
                pass
            elif token in [41, 46, 50, 79, 80, 81, 82, 83, 107, 108, 109, 110, 111, 137]:
                self.state = 587
                self.typeName(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 590
                self.match(SolidityParser.GlobalKeyword)


            self.state = 593
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinableOperatorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinableOperators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinableOperators" ):
                listener.enterUserDefinableOperators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinableOperators" ):
                listener.exitUserDefinableOperators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinableOperators" ):
                return visitor.visitUserDefinableOperators(self)
            else:
                return visitor.visitChildren(self)




    def userDefinableOperators(self):

        localctx = SolidityParser.UserDefinableOperatorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_userDefinableOperators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 547608332264) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def structMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructMemberContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructMemberContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_structDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefinition" ):
                listener.enterStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefinition" ):
                listener.exitStructDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefinition" ):
                return visitor.visitStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def structDefinition(self):

        localctx = SolidityParser.StructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_structDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.match(SolidityParser.T__38)
            self.state = 598
            self.identifier()
            self.state = 599
            self.match(SolidityParser.T__14)
            self.state = 601 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 600
                self.structMember()
                self.state = 603 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1198467674275840) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 288230384473210911) != 0)):
                    break

            self.state = 605
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_structMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructMember" ):
                listener.enterStructMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructMember" ):
                listener.exitStructMember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructMember" ):
                return visitor.visitStructMember(self)
            else:
                return visitor.visitChildren(self)




    def structMember(self):

        localctx = SolidityParser.StructMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_structMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.typeName(0)
            self.state = 608
            self.identifier()
            self.state = 609
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierDefinition" ):
                listener.enterModifierDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierDefinition" ):
                listener.exitModifierDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierDefinition" ):
                return visitor.visitModifierDefinition(self)
            else:
                return visitor.visitChildren(self)




    def modifierDefinition(self):

        localctx = SolidityParser.ModifierDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_modifierDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.match(SolidityParser.T__39)
            self.state = 612
            self.identifier()
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 613
                self.match(SolidityParser.T__22)
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1198467674275840) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 288230384473210911) != 0):
                    self.state = 614
                    self.parameterList()


                self.state = 617
                self.match(SolidityParser.T__23)


            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==106 or _la==129:
                self.state = 622
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [129]:
                    self.state = 620
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [106]:
                    self.state = 621
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 627
                self.match(SolidityParser.T__1)
                pass
            elif token in [15]:
                self.state = 628
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def InternalKeyword(self):
            return self.getToken(SolidityParser.InternalKeyword, 0)

        def ExternalKeyword(self):
            return self.getToken(SolidityParser.ExternalKeyword, 0)

        def PrivateKeyword(self):
            return self.getToken(SolidityParser.PrivateKeyword, 0)

        def PublicKeyword(self):
            return self.getToken(SolidityParser.PublicKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = SolidityParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            _la = self._input.LA(1)
            if not(((((_la - 123)) & ~0x3f) == 0 and ((1 << (_la - 123)) & 53) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_modifierInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierInvocation" ):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierInvocation" ):
                listener.exitModifierInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierInvocation" ):
                return visitor.visitModifierInvocation(self)
            else:
                return visitor.visitChildren(self)




    def modifierInvocation(self):

        localctx = SolidityParser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_modifierInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.identifierPath()
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 634
                self.callArgumentList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterListContext,i)


        def visibility(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VisibilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VisibilityContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def modifierInvocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ModifierInvocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ModifierInvocationContext,i)


        def VirtualKeyword(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.VirtualKeyword)
            else:
                return self.getToken(SolidityParser.VirtualKeyword, i)

        def overrideSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.OverrideSpecifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.OverrideSpecifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = SolidityParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(SolidityParser.T__40)
            self.state = 638
            self.identifier()
            self.state = 639
            self.match(SolidityParser.T__22)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1198467674275840) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 288230384473210911) != 0):
                self.state = 640
                self.parameterList()


            self.state = 643
            self.match(SolidityParser.T__23)
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & 2247753729) != 0):
                self.state = 649
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [123, 125, 127, 128]:
                    self.state = 644
                    self.visibility()
                    pass
                elif token in [126, 130, 132]:
                    self.state = 645
                    self.stateMutability()
                    pass
                elif token in [137]:
                    self.state = 646
                    self.modifierInvocation()
                    pass
                elif token in [129]:
                    self.state = 647
                    self.match(SolidityParser.VirtualKeyword)
                    pass
                elif token in [106]:
                    self.state = 648
                    self.overrideSpecifier()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 654
                self.match(SolidityParser.T__26)
                self.state = 655
                self.match(SolidityParser.T__22)
                self.state = 656
                self.parameterList()
                self.state = 657
                self.match(SolidityParser.T__23)


            self.state = 663
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 661
                self.match(SolidityParser.T__1)
                pass
            elif token in [15]:
                self.state = 662
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def eventParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.EventParameterContext)
            else:
                return self.getTypedRuleContext(SolidityParser.EventParameterContext,i)


        def AnonymousKeyword(self):
            return self.getToken(SolidityParser.AnonymousKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_eventDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventDefinition" ):
                listener.enterEventDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventDefinition" ):
                listener.exitEventDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventDefinition" ):
                return visitor.visitEventDefinition(self)
            else:
                return visitor.visitChildren(self)




    def eventDefinition(self):

        localctx = SolidityParser.EventDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_eventDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(SolidityParser.T__41)
            self.state = 666
            self.identifier()
            self.state = 667
            self.match(SolidityParser.T__22)
            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1198467674275840) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 288230384473210911) != 0):
                self.state = 668
                self.eventParameter()
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 669
                    self.match(SolidityParser.T__15)
                    self.state = 670
                    self.eventParameter()
                    self.state = 675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 678
                self.match(SolidityParser.AnonymousKeyword)


            self.state = 681
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_enumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDefinition" ):
                listener.enterEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDefinition" ):
                listener.exitEnumDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDefinition" ):
                return visitor.visitEnumDefinition(self)
            else:
                return visitor.visitChildren(self)




    def enumDefinition(self):

        localctx = SolidityParser.EnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_enumDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(SolidityParser.T__42)
            self.state = 684
            self.identifier()
            self.state = 685
            self.match(SolidityParser.T__14)
            self.state = 686
            self.identifier()
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 687
                self.match(SolidityParser.T__15)
                self.state = 688
                self.identifier()
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 694
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.TypeNameContext)
            else:
                return self.getTypedRuleContext(SolidityParser.TypeNameContext,i)


        def dataLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.DataLocationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.DataLocationContext,i)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = SolidityParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.typeName(0)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 504403158265495552) != 0):
                self.state = 697
                self.dataLocation()


            self.state = 701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 700
                self.identifier()


            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 703
                self.match(SolidityParser.T__15)
                self.state = 704
                self.typeName(0)
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 504403158265495552) != 0):
                    self.state = 705
                    self.dataLocation()


                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 708
                    self.identifier()


                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_eventParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventParameter" ):
                listener.enterEventParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventParameter" ):
                listener.exitEventParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventParameter" ):
                return visitor.visitEventParameter(self)
            else:
                return visitor.visitChildren(self)




    def eventParameter(self):

        localctx = SolidityParser.EventParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_eventParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.typeName(0)
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 717
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def dataLocation(self):
            return self.getTypedRuleContext(SolidityParser.DataLocationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = SolidityParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.typeName(0)
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 504403158265495552) != 0):
                self.state = 721
                self.dataLocation()


            self.state = 724
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationTupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationTuple" ):
                listener.enterVariableDeclarationTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationTuple" ):
                listener.exitVariableDeclarationTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationTuple" ):
                return visitor.visitVariableDeclarationTuple(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationTuple(self):

        localctx = SolidityParser.VariableDeclarationTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_variableDeclarationTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(SolidityParser.T__22)
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 728 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 727
                    self.match(SolidityParser.T__15)
                    self.state = 730 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==16):
                        break



            self.state = 734
            self.variableDeclaration()
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 735
                self.match(SolidityParser.T__15)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1198467674275840) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 288230384473210911) != 0):
                    self.state = 736
                    self.variableDeclaration()


                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 744
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_typeName

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ArrayTypeContext(TypeNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.TypeNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)


    class BasicTypeContext(TypeNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.TypeNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)


    class FunctionTypeContext(TypeNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.TypeNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTypeName(self):
            return self.getTypedRuleContext(SolidityParser.FunctionTypeNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionType" ):
                return visitor.visitFunctionType(self)
            else:
                return visitor.visitChildren(self)


    class UserDefinedTypeContext(TypeNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.TypeNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedType" ):
                listener.enterUserDefinedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedType" ):
                listener.exitUserDefinedType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedType" ):
                return visitor.visitUserDefinedType(self)
            else:
                return visitor.visitChildren(self)


    class MapTypeContext(TypeNameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.TypeNameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def mapping(self):
            return self.getTypedRuleContext(SolidityParser.MappingContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapType" ):
                listener.enterMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapType" ):
                listener.exitMapType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapType" ):
                return visitor.visitMapType(self)
            else:
                return visitor.visitChildren(self)



    def typeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.TypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_typeName, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50, 79, 80, 81, 82, 83, 107, 108, 109, 110, 111]:
                localctx = SolidityParser.BasicTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 747
                self.elementaryTypeName()
                pass
            elif token in [41]:
                localctx = SolidityParser.FunctionTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 748
                self.functionTypeName()
                pass
            elif token in [46]:
                localctx = SolidityParser.MapTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 749
                self.mapping()
                pass
            elif token in [137]:
                localctx = SolidityParser.UserDefinedTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 750
                self.identifierPath()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 761
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SolidityParser.ArrayTypeContext(self, SolidityParser.TypeNameContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeName)
                    self.state = 753
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 754
                    self.match(SolidityParser.T__43)
                    self.state = 756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 28165107045367872) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 4323596499821789695) != 0):
                        self.state = 755
                        self.expression(0)


                    self.state = 758
                    self.match(SolidityParser.T__44) 
                self.state = 763
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mappingKeyType(self):
            return self.getTypedRuleContext(SolidityParser.MappingKeyTypeContext,0)


        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping" ):
                return visitor.visitMapping(self)
            else:
                return visitor.visitChildren(self)




    def mapping(self):

        localctx = SolidityParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_mapping)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(SolidityParser.T__45)
            self.state = 765
            self.match(SolidityParser.T__22)
            self.state = 766
            self.mappingKeyType()
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 767
                self.identifier()


            self.state = 770
            self.match(SolidityParser.T__46)
            self.state = 771
            self.typeName(0)
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==137:
                self.state = 772
                self.identifier()


            self.state = 775
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingKeyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def identifierPath(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_mappingKeyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMappingKeyType" ):
                listener.enterMappingKeyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMappingKeyType" ):
                listener.exitMappingKeyType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMappingKeyType" ):
                return visitor.visitMappingKeyType(self)
            else:
                return visitor.visitChildren(self)




    def mappingKeyType(self):

        localctx = SolidityParser.MappingKeyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_mappingKeyType)
        try:
            self.state = 779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50, 79, 80, 81, 82, 83, 107, 108, 109, 110, 111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self.elementaryTypeName()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                self.identifierPath()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ParameterListContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ParameterListContext,i)


        def visibility(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.VisibilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.VisibilityContext,i)


        def stateMutability(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StateMutabilityContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StateMutabilityContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_functionTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeName" ):
                listener.enterFunctionTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeName" ):
                listener.exitFunctionTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeName" ):
                return visitor.visitFunctionTypeName(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeName(self):

        localctx = SolidityParser.FunctionTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_functionTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(SolidityParser.T__40)
            self.state = 782
            self.match(SolidityParser.T__22)
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1198467674275840) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 288230384473210911) != 0):
                self.state = 783
                self.parameterList()


            self.state = 786
            self.match(SolidityParser.T__23)
            self.state = 791
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 789
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [123, 125, 127, 128]:
                        self.state = 787
                        self.visibility()
                        pass
                    elif token in [126, 130, 132]:
                        self.state = 788
                        self.stateMutability()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 793
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 794
                self.match(SolidityParser.T__26)
                self.state = 795
                self.match(SolidityParser.T__22)
                self.state = 796
                self.parameterList()
                self.state = 797
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveSourceUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def interactiveStateVariableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveStateVariableElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveStateVariableElementContext,i)


        def interactiveFunctionElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveFunctionElementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveFunctionElementContext,i)


        def interfaceDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InterfaceDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InterfaceDefinitionContext,i)


        def libraryDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.LibraryDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.LibraryDefinitionContext,i)


        def contractDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ContractDefinitionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ContractDefinitionContext,i)


        def pragmaDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.PragmaDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.PragmaDirectiveContext,i)


        def importDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ImportDirectiveContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ImportDirectiveContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveSourceUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveSourceUnit" ):
                listener.enterInteractiveSourceUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveSourceUnit" ):
                listener.exitInteractiveSourceUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveSourceUnit" ):
                return visitor.visitInteractiveSourceUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveSourceUnit(self):

        localctx = SolidityParser.InteractiveSourceUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_interactiveSourceUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1213311893643266) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 544935563233329183) != 0):
                self.state = 808
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 801
                    self.interactiveStateVariableElement()
                    pass

                elif la_ == 2:
                    self.state = 802
                    self.interactiveFunctionElement()
                    pass

                elif la_ == 3:
                    self.state = 803
                    self.interfaceDefinition()
                    pass

                elif la_ == 4:
                    self.state = 804
                    self.libraryDefinition()
                    pass

                elif la_ == 5:
                    self.state = 805
                    self.contractDefinition()
                    pass

                elif la_ == 6:
                    self.state = 806
                    self.pragmaDirective()
                    pass

                elif la_ == 7:
                    self.state = 807
                    self.importDirective()
                    pass


                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 813
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveEnumUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def interactiveEnumItems(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveEnumItemsContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveEnumItemsContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveEnumUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveEnumUnit" ):
                listener.enterInteractiveEnumUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveEnumUnit" ):
                listener.exitInteractiveEnumUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveEnumUnit" ):
                return visitor.visitInteractiveEnumUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveEnumUnit(self):

        localctx = SolidityParser.InteractiveEnumUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_interactiveEnumUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==137:
                self.state = 815
                self.interactiveEnumItems()
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 821
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveStructUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def structMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StructMemberContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StructMemberContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveStructUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveStructUnit" ):
                listener.enterInteractiveStructUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveStructUnit" ):
                listener.exitInteractiveStructUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveStructUnit" ):
                return visitor.visitInteractiveStructUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveStructUnit(self):

        localctx = SolidityParser.InteractiveStructUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_interactiveStructUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1198467674275840) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 288230384473210911) != 0):
                self.state = 823
                self.structMember()
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 829
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveBlockUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def interactiveBlockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveBlockItemContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveBlockItemContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveBlockUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveBlockUnit" ):
                listener.enterInteractiveBlockUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveBlockUnit" ):
                listener.exitInteractiveBlockUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveBlockUnit" ):
                return visitor.visitInteractiveBlockUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveBlockUnit(self):

        localctx = SolidityParser.InteractiveBlockUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_interactiveBlockUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 6369305951224201280) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4777749657633684995) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 15) != 0):
                self.state = 831
                self.interactiveBlockItem()
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 837
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveDoWhileUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def interactiveDoWhileWhileStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveDoWhileWhileStatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveDoWhileWhileStatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveDoWhileUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveDoWhileUnit" ):
                listener.enterInteractiveDoWhileUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveDoWhileUnit" ):
                listener.exitInteractiveDoWhileUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveDoWhileUnit" ):
                return visitor.visitInteractiveDoWhileUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveDoWhileUnit(self):

        localctx = SolidityParser.InteractiveDoWhileUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_interactiveDoWhileUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64:
                self.state = 839
                self.interactiveDoWhileWhileStatement()
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 845
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveIfElseUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def interactiveElseStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveElseStatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveElseStatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveIfElseUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveIfElseUnit" ):
                listener.enterInteractiveIfElseUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveIfElseUnit" ):
                listener.exitInteractiveIfElseUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveIfElseUnit" ):
                return visitor.visitInteractiveIfElseUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveIfElseUnit(self):

        localctx = SolidityParser.InteractiveIfElseUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_interactiveIfElseUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 847
                self.interactiveElseStatement()
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 853
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveCatchClauseUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def interactiveCatchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.InteractiveCatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.InteractiveCatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveCatchClauseUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveCatchClauseUnit" ):
                listener.enterInteractiveCatchClauseUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveCatchClauseUnit" ):
                listener.exitInteractiveCatchClauseUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveCatchClauseUnit" ):
                return visitor.visitInteractiveCatchClauseUnit(self)
            else:
                return visitor.visitChildren(self)




    def interactiveCatchClauseUnit(self):

        localctx = SolidityParser.InteractiveCatchClauseUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_interactiveCatchClauseUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==63:
                self.state = 855
                self.interactiveCatchClause()
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 861
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DebugUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SolidityParser.EOF, 0)

        def debugGlobalVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.DebugGlobalVarContext)
            else:
                return self.getTypedRuleContext(SolidityParser.DebugGlobalVarContext,i)


        def debugStateVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.DebugStateVarContext)
            else:
                return self.getTypedRuleContext(SolidityParser.DebugStateVarContext,i)


        def debugLocalVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.DebugLocalVarContext)
            else:
                return self.getTypedRuleContext(SolidityParser.DebugLocalVarContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_debugUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDebugUnit" ):
                listener.enterDebugUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDebugUnit" ):
                listener.exitDebugUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDebugUnit" ):
                return visitor.visitDebugUnit(self)
            else:
                return visitor.visitChildren(self)




    def debugUnit(self):

        localctx = SolidityParser.DebugUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_debugUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==48:
                self.state = 863
                self.debugGlobalVar()
                self.state = 864
                self.debugStateVar()
                self.state = 865
                self.debugLocalVar()
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 872
            self.match(SolidityParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DebugGlobalVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def globalValue(self):
            return self.getTypedRuleContext(SolidityParser.GlobalValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_debugGlobalVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDebugGlobalVar" ):
                listener.enterDebugGlobalVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDebugGlobalVar" ):
                listener.exitDebugGlobalVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDebugGlobalVar" ):
                return visitor.visitDebugGlobalVar(self)
            else:
                return visitor.visitChildren(self)




    def debugGlobalVar(self):

        localctx = SolidityParser.DebugGlobalVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_debugGlobalVar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.match(SolidityParser.T__47)
            self.state = 875
            self.match(SolidityParser.T__48)
            self.state = 876
            self.identifier()
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 877
                self.match(SolidityParser.T__25)
                self.state = 878
                self.identifier()


            self.state = 881
            self.match(SolidityParser.T__10)
            self.state = 882
            self.globalValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_globalValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GlobalAddressValueContext(GlobalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.GlobalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalAddressValue" ):
                listener.enterGlobalAddressValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalAddressValue" ):
                listener.exitGlobalAddressValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalAddressValue" ):
                return visitor.visitGlobalAddressValue(self)
            else:
                return visitor.visitChildren(self)


    class GlobalIntValueContext(GlobalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.GlobalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalIntValue" ):
                listener.enterGlobalIntValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalIntValue" ):
                listener.exitGlobalIntValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobalIntValue" ):
                return visitor.visitGlobalIntValue(self)
            else:
                return visitor.visitChildren(self)



    def globalValue(self):

        localctx = SolidityParser.GlobalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_globalValue)
        try:
            self.state = 892
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                localctx = SolidityParser.GlobalIntValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 884
                self.match(SolidityParser.T__43)
                self.state = 885
                self.numberLiteral()
                self.state = 886
                self.match(SolidityParser.T__15)
                self.state = 887
                self.numberLiteral()
                self.state = 888
                self.match(SolidityParser.T__44)
                pass
            elif token in [50]:
                localctx = SolidityParser.GlobalAddressValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                self.match(SolidityParser.T__49)
                self.state = 891
                self.numberLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DebugStateVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testingExpression(self):
            return self.getTypedRuleContext(SolidityParser.TestingExpressionContext,0)


        def stateLocalValue(self):
            return self.getTypedRuleContext(SolidityParser.StateLocalValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_debugStateVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDebugStateVar" ):
                listener.enterDebugStateVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDebugStateVar" ):
                listener.exitDebugStateVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDebugStateVar" ):
                return visitor.visitDebugStateVar(self)
            else:
                return visitor.visitChildren(self)




    def debugStateVar(self):

        localctx = SolidityParser.DebugStateVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_debugStateVar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(SolidityParser.T__47)
            self.state = 895
            self.match(SolidityParser.T__50)
            self.state = 896
            self.testingExpression()
            self.state = 897
            self.match(SolidityParser.T__10)
            self.state = 898
            self.stateLocalValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DebugLocalVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testingExpression(self):
            return self.getTypedRuleContext(SolidityParser.TestingExpressionContext,0)


        def stateLocalValue(self):
            return self.getTypedRuleContext(SolidityParser.StateLocalValueContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_debugLocalVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDebugLocalVar" ):
                listener.enterDebugLocalVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDebugLocalVar" ):
                listener.exitDebugLocalVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDebugLocalVar" ):
                return visitor.visitDebugLocalVar(self)
            else:
                return visitor.visitChildren(self)




    def debugLocalVar(self):

        localctx = SolidityParser.DebugLocalVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_debugLocalVar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(SolidityParser.T__47)
            self.state = 901
            self.match(SolidityParser.T__51)
            self.state = 902
            self.testingExpression()
            self.state = 903
            self.match(SolidityParser.T__10)
            self.state = 904
            self.stateLocalValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestingExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def subAccess(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.SubAccessContext)
            else:
                return self.getTypedRuleContext(SolidityParser.SubAccessContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_testingExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestingExpression" ):
                listener.enterTestingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestingExpression" ):
                listener.exitTestingExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestingExpression" ):
                return visitor.visitTestingExpression(self)
            else:
                return visitor.visitChildren(self)




    def testingExpression(self):

        localctx = SolidityParser.TestingExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_testingExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.identifier()
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26 or _la==44:
                self.state = 907
                self.subAccess()
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_subAccess

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TestingMemberAccessContext(SubAccessContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.SubAccessContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestingMemberAccess" ):
                listener.enterTestingMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestingMemberAccess" ):
                listener.exitTestingMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestingMemberAccess" ):
                return visitor.visitTestingMemberAccess(self)
            else:
                return visitor.visitChildren(self)


    class TestingIndexAccessContext(SubAccessContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.SubAccessContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestingIndexAccess" ):
                listener.enterTestingIndexAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestingIndexAccess" ):
                listener.exitTestingIndexAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestingIndexAccess" ):
                return visitor.visitTestingIndexAccess(self)
            else:
                return visitor.visitChildren(self)



    def subAccess(self):

        localctx = SolidityParser.SubAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_subAccess)
        try:
            self.state = 919
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                localctx = SolidityParser.TestingMemberAccessContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.match(SolidityParser.T__25)
                self.state = 914
                self.identifier()
                pass
            elif token in [44]:
                localctx = SolidityParser.TestingIndexAccessContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.match(SolidityParser.T__43)
                self.state = 916
                self.expression(0)
                self.state = 917
                self.match(SolidityParser.T__44)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateLocalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_stateLocalValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StateLocalBoolValueContext(StateLocalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.StateLocalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateLocalBoolValue" ):
                listener.enterStateLocalBoolValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateLocalBoolValue" ):
                listener.exitStateLocalBoolValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateLocalBoolValue" ):
                return visitor.visitStateLocalBoolValue(self)
            else:
                return visitor.visitChildren(self)


    class StateLocalIntValueContext(StateLocalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.StateLocalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numberLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.NumberLiteralContext)
            else:
                return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateLocalIntValue" ):
                listener.enterStateLocalIntValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateLocalIntValue" ):
                listener.exitStateLocalIntValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateLocalIntValue" ):
                return visitor.visitStateLocalIntValue(self)
            else:
                return visitor.visitChildren(self)


    class StateLocalAddressValueContext(StateLocalValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.StateLocalValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateLocalAddressValue" ):
                listener.enterStateLocalAddressValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateLocalAddressValue" ):
                listener.exitStateLocalAddressValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateLocalAddressValue" ):
                return visitor.visitStateLocalAddressValue(self)
            else:
                return visitor.visitChildren(self)



    def stateLocalValue(self):

        localctx = SolidityParser.StateLocalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_stateLocalValue)
        self._la = 0 # Token type
        try:
            self.state = 936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                localctx = SolidityParser.StateLocalIntValueContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self.match(SolidityParser.T__43)
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 922
                    self.match(SolidityParser.T__33)


                self.state = 925
                self.numberLiteral()
                self.state = 926
                self.match(SolidityParser.T__15)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 927
                    self.match(SolidityParser.T__33)


                self.state = 930
                self.numberLiteral()
                self.state = 931
                self.match(SolidityParser.T__44)
                pass
            elif token in [50]:
                localctx = SolidityParser.StateLocalAddressValueContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 933
                self.match(SolidityParser.T__49)
                self.state = 934
                self.numberLiteral()
                pass
            elif token in [53, 54, 55]:
                localctx = SolidityParser.StateLocalBoolValueContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 935
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 63050394783186944) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveSimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interactiveVariableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveVariableDeclarationStatementContext,0)


        def interactiveExpressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveExpressionStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveSimpleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveSimpleStatement" ):
                listener.enterInteractiveSimpleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveSimpleStatement" ):
                listener.exitInteractiveSimpleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveSimpleStatement" ):
                return visitor.visitInteractiveSimpleStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveSimpleStatement(self):

        localctx = SolidityParser.InteractiveSimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_interactiveSimpleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 938
                self.interactiveVariableDeclarationStatement()
                pass

            elif la_ == 2:
                self.state = 939
                self.interactiveExpressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveVariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def variableDeclarationTuple(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationTupleContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveVariableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveVariableDeclarationStatement" ):
                listener.enterInteractiveVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveVariableDeclarationStatement" ):
                listener.exitInteractiveVariableDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveVariableDeclarationStatement" ):
                return visitor.visitInteractiveVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveVariableDeclarationStatement(self):

        localctx = SolidityParser.InteractiveVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_interactiveVariableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.state = 955
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41, 46, 50, 79, 80, 81, 82, 83, 107, 108, 109, 110, 111, 137]:
                self.enterOuterAlt(localctx, 1)
                self.state = 942
                self.variableDeclaration()
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 943
                    self.match(SolidityParser.T__10)
                    self.state = 944
                    self.expression(0)


                self.state = 947
                self.match(SolidityParser.T__1)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 949
                self.variableDeclarationTuple()
                self.state = 950
                self.match(SolidityParser.T__10)
                self.state = 951
                self.expression(0)
                self.state = 953
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveExpressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveExpressionStatement" ):
                listener.enterInteractiveExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveExpressionStatement" ):
                listener.exitInteractiveExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveExpressionStatement" ):
                return visitor.visitInteractiveExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveExpressionStatement(self):

        localctx = SolidityParser.InteractiveExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_interactiveExpressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.expression(0)
            self.state = 958
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveStateVariableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interactiveEnumDefinition(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveEnumDefinitionContext,0)


        def interactiveStructDefinition(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveStructDefinitionContext,0)


        def stateVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.StateVariableDeclarationContext,0)


        def userDefinedValueTypeDefinition(self):
            return self.getTypedRuleContext(SolidityParser.UserDefinedValueTypeDefinitionContext,0)


        def usingDirective(self):
            return self.getTypedRuleContext(SolidityParser.UsingDirectiveContext,0)


        def constantVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.ConstantVariableDeclarationContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveStateVariableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveStateVariableElement" ):
                listener.enterInteractiveStateVariableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveStateVariableElement" ):
                listener.exitInteractiveStateVariableElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveStateVariableElement" ):
                return visitor.visitInteractiveStateVariableElement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveStateVariableElement(self):

        localctx = SolidityParser.InteractiveStateVariableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_interactiveStateVariableElement)
        try:
            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.interactiveEnumDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self.interactiveStructDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 962
                self.stateVariableDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 963
                self.userDefinedValueTypeDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 964
                self.usingDirective()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 965
                self.constantVariableDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveEnumDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveEnumDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveEnumDefinition" ):
                listener.enterInteractiveEnumDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveEnumDefinition" ):
                listener.exitInteractiveEnumDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveEnumDefinition" ):
                return visitor.visitInteractiveEnumDefinition(self)
            else:
                return visitor.visitChildren(self)




    def interactiveEnumDefinition(self):

        localctx = SolidityParser.InteractiveEnumDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_interactiveEnumDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(SolidityParser.T__42)
            self.state = 969
            self.identifier()
            self.state = 970
            self.match(SolidityParser.T__14)
            self.state = 971
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveStructDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveStructDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveStructDefinition" ):
                listener.enterInteractiveStructDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveStructDefinition" ):
                listener.exitInteractiveStructDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveStructDefinition" ):
                return visitor.visitInteractiveStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def interactiveStructDefinition(self):

        localctx = SolidityParser.InteractiveStructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_interactiveStructDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.match(SolidityParser.T__38)
            self.state = 974
            self.identifier()
            self.state = 975
            self.match(SolidityParser.T__14)
            self.state = 976
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveEnumItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveEnumItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveEnumItems" ):
                listener.enterInteractiveEnumItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveEnumItems" ):
                listener.exitInteractiveEnumItems(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveEnumItems" ):
                return visitor.visitInteractiveEnumItems(self)
            else:
                return visitor.visitChildren(self)




    def interactiveEnumItems(self):

        localctx = SolidityParser.InteractiveEnumItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_interactiveEnumItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.identifier()
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 979
                self.match(SolidityParser.T__15)
                self.state = 980
                self.identifier()
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveFunctionElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ConstructorDefinitionContext,0)


        def eventDefinition(self):
            return self.getTypedRuleContext(SolidityParser.EventDefinitionContext,0)


        def errorDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ErrorDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FunctionDefinitionContext,0)


        def fallbackFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.FallbackFunctionDefinitionContext,0)


        def modifierDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ModifierDefinitionContext,0)


        def receiveFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.ReceiveFunctionDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveFunctionElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveFunctionElement" ):
                listener.enterInteractiveFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveFunctionElement" ):
                listener.exitInteractiveFunctionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveFunctionElement" ):
                return visitor.visitInteractiveFunctionElement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveFunctionElement(self):

        localctx = SolidityParser.InteractiveFunctionElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_interactiveFunctionElement)
        try:
            self.state = 993
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 986
                self.constructorDefinition()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 987
                self.eventDefinition()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 3)
                self.state = 988
                self.errorDefinition()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 4)
                self.state = 989
                self.functionDefinition()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 5)
                self.state = 990
                self.fallbackFunctionDefinition()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 6)
                self.state = 991
                self.modifierDefinition()
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 7)
                self.state = 992
                self.receiveFunctionDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveBlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interactiveStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveStatementContext,0)


        def uncheckedBlock(self):
            return self.getTypedRuleContext(SolidityParser.UncheckedBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveBlockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveBlockItem" ):
                listener.enterInteractiveBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveBlockItem" ):
                listener.exitInteractiveBlockItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveBlockItem" ):
                return visitor.visitInteractiveBlockItem(self)
            else:
                return visitor.visitChildren(self)




    def interactiveBlockItem(self):

        localctx = SolidityParser.InteractiveBlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_interactiveBlockItem)
        try:
            self.state = 997
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 30, 34, 41, 44, 46, 50, 53, 54, 60, 62, 64, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 105, 107, 108, 109, 110, 111, 112, 114, 115, 118, 121, 126, 137, 138, 139, 140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 995
                self.interactiveStatement()
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 996
                self.uncheckedBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_dataLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataLocation" ):
                listener.enterDataLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataLocation" ):
                listener.exitDataLocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataLocation" ):
                return visitor.visitDataLocation(self)
            else:
                return visitor.visitChildren(self)




    def dataLocation(self):

        localctx = SolidityParser.DataLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dataLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 504403158265495552) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StateMutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PureKeyword(self):
            return self.getToken(SolidityParser.PureKeyword, 0)

        def ViewKeyword(self):
            return self.getToken(SolidityParser.ViewKeyword, 0)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_stateMutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStateMutability" ):
                listener.enterStateMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStateMutability" ):
                listener.exitStateMutability(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStateMutability" ):
                return visitor.visitStateMutability(self)
            else:
                return visitor.visitChildren(self)




    def stateMutability(self):

        localctx = SolidityParser.StateMutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_stateMutability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            _la = self._input.LA(1)
            if not(((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 81) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def uncheckedBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.UncheckedBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.UncheckedBlockContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = SolidityParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.match(SolidityParser.T__14)
            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 6369305951224234048) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4777749657633684995) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 15) != 0):
                self.state = 1006
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [6, 15, 23, 30, 34, 41, 44, 46, 50, 53, 54, 60, 62, 64, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 105, 107, 108, 109, 110, 111, 112, 114, 115, 118, 121, 126, 137, 138, 139, 140]:
                    self.state = 1004
                    self.statement()
                    pass
                elif token in [59]:
                    self.state = 1005
                    self.uncheckedBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1011
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UncheckedBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_uncheckedBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUncheckedBlock" ):
                listener.enterUncheckedBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUncheckedBlock" ):
                listener.exitUncheckedBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncheckedBlock" ):
                return visitor.visitUncheckedBlock(self)
            else:
                return visitor.visitChildren(self)




    def uncheckedBlock(self):

        localctx = SolidityParser.UncheckedBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_uncheckedBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.match(SolidityParser.T__58)
            self.state = 1014
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(SolidityParser.IfStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SolidityParser.ForStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SolidityParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.DoWhileStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SolidityParser.TryStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def revertStatement(self):
            return self.getTypedRuleContext(SolidityParser.RevertStatementContext,0)


        def requireStatement(self):
            return self.getTypedRuleContext(SolidityParser.RequireStatementContext,0)


        def assertStatement(self):
            return self.getTypedRuleContext(SolidityParser.AssertStatementContext,0)


        def assemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = SolidityParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_statement)
        try:
            self.state = 1031
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1016
                self.block()
                pass
            elif token in [6, 23, 34, 41, 44, 46, 50, 53, 54, 79, 80, 81, 82, 83, 84, 85, 86, 87, 105, 107, 108, 109, 110, 111, 112, 114, 115, 126, 137, 138, 139, 140]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1017
                self.simpleStatement()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1018
                self.ifStatement()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1019
                self.forStatement()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1020
                self.whileStatement()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1021
                self.doWhileStatement()
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1022
                self.continueStatement()
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1023
                self.breakStatement()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1024
                self.tryStatement()
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1025
                self.returnStatement()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1026
                self.emitStatement()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1027
                self.revertStatement()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1028
                self.requireStatement()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1029
                self.assertStatement()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1030
                self.assemblyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = SolidityParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.expression(0)
            self.state = 1034
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.StatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.StatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = SolidityParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.match(SolidityParser.T__59)
            self.state = 1037
            self.match(SolidityParser.T__22)
            self.state = 1038
            self.expression(0)
            self.state = 1039
            self.match(SolidityParser.T__23)
            self.state = 1040
            self.statement()
            self.state = 1043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1041
                self.match(SolidityParser.T__60)
                self.state = 1042
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SolidityParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryStatement" ):
                return visitor.visitTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def tryStatement(self):

        localctx = SolidityParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(SolidityParser.T__61)
            self.state = 1046
            self.expression(0)
            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 1047
                self.match(SolidityParser.T__26)
                self.state = 1048
                self.match(SolidityParser.T__22)
                self.state = 1049
                self.parameterList()
                self.state = 1050
                self.match(SolidityParser.T__23)


            self.state = 1054
            self.block()
            self.state = 1056 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1055
                self.catchClause()
                self.state = 1058 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==63):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SolidityParser.BlockContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = SolidityParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(SolidityParser.T__62)
            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23 or _la==137:
                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 1061
                    self.identifier()


                self.state = 1064
                self.match(SolidityParser.T__22)
                self.state = 1065
                self.parameterList()
                self.state = 1066
                self.match(SolidityParser.T__23)


            self.state = 1070
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = SolidityParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(SolidityParser.T__63)
            self.state = 1073
            self.match(SolidityParser.T__22)
            self.state = 1074
            self.expression(0)
            self.state = 1075
            self.match(SolidityParser.T__23)
            self.state = 1076
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_simpleStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class EContextContext(SimpleStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.SimpleStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEContext" ):
                listener.enterEContext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEContext" ):
                listener.exitEContext(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEContext" ):
                return visitor.visitEContext(self)
            else:
                return visitor.visitChildren(self)


    class VDContextContext(SimpleStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.SimpleStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variableDeclarationStatement(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVDContext" ):
                listener.enterVDContext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVDContext" ):
                listener.exitVDContext(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVDContext" ):
                return visitor.visitVDContext(self)
            else:
                return visitor.visitChildren(self)



    def simpleStatement(self):

        localctx = SolidityParser.SimpleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_simpleStatement)
        try:
            self.state = 1080
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                localctx = SolidityParser.VDContextContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self.variableDeclarationStatement()
                pass

            elif la_ == 2:
                localctx = SolidityParser.EContextContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.expressionStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = SolidityParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(SolidityParser.T__29)
            self.state = 1083
            self.match(SolidityParser.T__22)
            self.state = 1086
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 34, 41, 44, 46, 50, 53, 54, 79, 80, 81, 82, 83, 84, 85, 86, 87, 105, 107, 108, 109, 110, 111, 112, 114, 115, 126, 137, 138, 139, 140]:
                self.state = 1084
                self.simpleStatement()
                pass
            elif token in [2]:
                self.state = 1085
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1090
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 34, 44, 50, 53, 54, 79, 80, 81, 82, 83, 84, 85, 86, 87, 105, 107, 108, 109, 110, 111, 112, 114, 115, 126, 137, 138, 139, 140]:
                self.state = 1088
                self.expressionStatement()
                pass
            elif token in [2]:
                self.state = 1089
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 28165107045367872) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 4323596499821789695) != 0):
                self.state = 1092
                self.expression(0)


            self.state = 1095
            self.match(SolidityParser.T__23)
            self.state = 1096
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineArrayExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_inlineArrayExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineArrayExpression" ):
                listener.enterInlineArrayExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineArrayExpression" ):
                listener.exitInlineArrayExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineArrayExpression" ):
                return visitor.visitInlineArrayExpression(self)
            else:
                return visitor.visitChildren(self)




    def inlineArrayExpression(self):

        localctx = SolidityParser.InlineArrayExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_inlineArrayExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(SolidityParser.T__43)

            self.state = 1099
            self.expression(0)
            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 1100
                self.match(SolidityParser.T__15)
                self.state = 1101
                self.expression(0)
                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1107
            self.match(SolidityParser.T__44)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyFlags(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyFlagsContext,0)


        def yulStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulStatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulStatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyStatement" ):
                listener.enterAssemblyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyStatement" ):
                listener.exitAssemblyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyStatement" ):
                return visitor.visitAssemblyStatement(self)
            else:
                return visitor.visitChildren(self)




    def assemblyStatement(self):

        localctx = SolidityParser.AssemblyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_assemblyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.match(SolidityParser.T__64)
            self.state = 1111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 1110
                self.match(SolidityParser.T__65)


            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 1113
                self.assemblyFlags()


            self.state = 1116
            self.match(SolidityParser.T__14)
            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & 22553182576082945) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & 100663321) != 0):
                self.state = 1117
                self.yulStatement()
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1123
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFlagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assemblyFlagString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.AssemblyFlagStringContext)
            else:
                return self.getTypedRuleContext(SolidityParser.AssemblyFlagStringContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFlags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFlags" ):
                listener.enterAssemblyFlags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFlags" ):
                listener.exitAssemblyFlags(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFlags" ):
                return visitor.visitAssemblyFlags(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFlags(self):

        localctx = SolidityParser.AssemblyFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_assemblyFlags)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(SolidityParser.T__22)

            self.state = 1126
            self.assemblyFlagString()

            self.state = 1127
            self.match(SolidityParser.T__15)
            self.state = 1128
            self.assemblyFlagString()
            self.state = 1130
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssemblyFlagStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assemblyFlagString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssemblyFlagString" ):
                listener.enterAssemblyFlagString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssemblyFlagString" ):
                listener.exitAssemblyFlagString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssemblyFlagString" ):
                return visitor.visitAssemblyFlagString(self)
            else:
                return visitor.visitChildren(self)




    def assemblyFlagString(self):

        localctx = SolidityParser.AssemblyFlagStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_assemblyFlagString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def yulVariableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.YulVariableDeclarationContext,0)


        def yulAssignment(self):
            return self.getTypedRuleContext(SolidityParser.YulAssignmentContext,0)


        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def yulIfStatement(self):
            return self.getTypedRuleContext(SolidityParser.YulIfStatementContext,0)


        def yulForStatement(self):
            return self.getTypedRuleContext(SolidityParser.YulForStatementContext,0)


        def yulSwitchStatement(self):
            return self.getTypedRuleContext(SolidityParser.YulSwitchStatementContext,0)


        def LeaveKeyword(self):
            return self.getToken(SolidityParser.LeaveKeyword, 0)

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def yulFunctionDefinition(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionDefinitionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulStatement" ):
                listener.enterYulStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulStatement" ):
                listener.exitYulStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulStatement" ):
                return visitor.visitYulStatement(self)
            else:
                return visitor.visitChildren(self)




    def yulStatement(self):

        localctx = SolidityParser.YulStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_yulStatement)
        try:
            self.state = 1145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1134
                self.yulBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1135
                self.yulVariableDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1136
                self.yulAssignment()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1137
                self.yulFunctionCall()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1138
                self.yulIfStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1139
                self.yulForStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1140
                self.yulSwitchStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1141
                self.match(SolidityParser.LeaveKeyword)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1142
                self.match(SolidityParser.BreakKeyword)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1143
                self.match(SolidityParser.ContinueKeyword)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1144
                self.yulFunctionDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulStatementContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulStatementContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulBlock" ):
                listener.enterYulBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulBlock" ):
                listener.exitYulBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulBlock" ):
                return visitor.visitYulBlock(self)
            else:
                return visitor.visitChildren(self)




    def yulBlock(self):

        localctx = SolidityParser.YulBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_yulBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.match(SolidityParser.T__14)
            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & 22553182576082945) != 0) or ((((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & 100663321) != 0):
                self.state = 1148
                self.yulStatement()
                self.state = 1153
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1154
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulIdentifier)
            else:
                return self.getToken(SolidityParser.YulIdentifier, i)

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulVariableDeclaration" ):
                listener.enterYulVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulVariableDeclaration" ):
                listener.exitYulVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulVariableDeclaration" ):
                return visitor.visitYulVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def yulVariableDeclaration(self):

        localctx = SolidityParser.YulVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_yulVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1156
                self.match(SolidityParser.T__66)
                self.state = 1157
                self.match(SolidityParser.YulIdentifier)
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 1158
                    self.match(SolidityParser.T__67)
                    self.state = 1159
                    self.yulExpression()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1162
                self.match(SolidityParser.T__66)

                self.state = 1163
                self.match(SolidityParser.YulIdentifier)

                self.state = 1164
                self.match(SolidityParser.T__15)
                self.state = 1165
                self.match(SolidityParser.YulIdentifier)
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 1167
                    self.match(SolidityParser.T__67)
                    self.state = 1168
                    self.yulFunctionCall()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulPathContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulPathContext,i)


        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulAssignment" ):
                listener.enterYulAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulAssignment" ):
                listener.exitYulAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulAssignment" ):
                return visitor.visitYulAssignment(self)
            else:
                return visitor.visitChildren(self)




    def yulAssignment(self):

        localctx = SolidityParser.YulAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_yulAssignment)
        self._la = 0 # Token type
        try:
            self.state = 1187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1173
                self.yulPath()
                self.state = 1174
                self.match(SolidityParser.T__67)
                self.state = 1175
                self.yulExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1177
                self.yulPath()
                self.state = 1180 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1178
                    self.match(SolidityParser.T__15)
                    self.state = 1179
                    self.yulPath()
                    self.state = 1182 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==16):
                        break

                self.state = 1184
                self.match(SolidityParser.T__67)
                self.state = 1185
                self.yulFunctionCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulIfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulIfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulIfStatement" ):
                listener.enterYulIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulIfStatement" ):
                listener.exitYulIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulIfStatement" ):
                return visitor.visitYulIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def yulIfStatement(self):

        localctx = SolidityParser.YulIfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_yulIfStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.match(SolidityParser.T__59)
            self.state = 1190
            self.yulExpression()
            self.state = 1191
            self.yulBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulBlockContext,i)


        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulForStatement" ):
                listener.enterYulForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulForStatement" ):
                listener.exitYulForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulForStatement" ):
                return visitor.visitYulForStatement(self)
            else:
                return visitor.visitChildren(self)




    def yulForStatement(self):

        localctx = SolidityParser.YulForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_yulForStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.match(SolidityParser.T__29)
            self.state = 1194
            self.yulBlock()
            self.state = 1195
            self.yulExpression()
            self.state = 1196
            self.yulBlock()
            self.state = 1197
            self.yulBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulSwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulExpression(self):
            return self.getTypedRuleContext(SolidityParser.YulExpressionContext,0)


        def yulBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulBlockContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulBlockContext,i)


        def yulLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulLiteralContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulLiteralContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulSwitchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulSwitchStatement" ):
                listener.enterYulSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulSwitchStatement" ):
                listener.exitYulSwitchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulSwitchStatement" ):
                return visitor.visitYulSwitchStatement(self)
            else:
                return visitor.visitChildren(self)




    def yulSwitchStatement(self):

        localctx = SolidityParser.YulSwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_yulSwitchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(SolidityParser.T__68)
            self.state = 1200
            self.yulExpression()
            self.state = 1215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.state = 1205 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1201
                    self.match(SolidityParser.T__69)
                    self.state = 1202
                    self.yulLiteral()
                    self.state = 1203
                    self.yulBlock()
                    self.state = 1207 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==70):
                        break

                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 1209
                    self.match(SolidityParser.T__70)
                    self.state = 1210
                    self.yulBlock()


                pass
            elif token in [71]:
                self.state = 1213
                self.match(SolidityParser.T__70)
                self.state = 1214
                self.yulBlock()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulIdentifier)
            else:
                return self.getToken(SolidityParser.YulIdentifier, i)

        def yulBlock(self):
            return self.getTypedRuleContext(SolidityParser.YulBlockContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulFunctionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulFunctionDefinition" ):
                listener.enterYulFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulFunctionDefinition" ):
                listener.exitYulFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulFunctionDefinition" ):
                return visitor.visitYulFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def yulFunctionDefinition(self):

        localctx = SolidityParser.YulFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_yulFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.match(SolidityParser.T__40)
            self.state = 1218
            self.match(SolidityParser.YulIdentifier)
            self.state = 1219
            self.match(SolidityParser.T__22)
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 1220
                self.match(SolidityParser.YulIdentifier)
                self.state = 1225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1221
                    self.match(SolidityParser.T__15)
                    self.state = 1222
                    self.match(SolidityParser.YulIdentifier)
                    self.state = 1227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1230
            self.match(SolidityParser.T__23)
            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 1231
                self.match(SolidityParser.T__71)

                self.state = 1232
                self.match(SolidityParser.YulIdentifier)
                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1233
                    self.match(SolidityParser.T__15)
                    self.state = 1234
                    self.match(SolidityParser.YulIdentifier)
                    self.state = 1239
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1242
            self.yulBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulIdentifier)
            else:
                return self.getToken(SolidityParser.YulIdentifier, i)

        def YulEvmBuiltin(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.YulEvmBuiltin)
            else:
                return self.getToken(SolidityParser.YulEvmBuiltin, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulPath" ):
                listener.enterYulPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulPath" ):
                listener.exitYulPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulPath" ):
                return visitor.visitYulPath(self)
            else:
                return visitor.visitChildren(self)




    def yulPath(self):

        localctx = SolidityParser.YulPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_yulPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.match(SolidityParser.YulIdentifier)
            self.state = 1249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26:
                self.state = 1245
                self.match(SolidityParser.T__25)
                self.state = 1246
                _la = self._input.LA(1)
                if not(_la==143 or _la==144):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1251
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulIdentifier(self):
            return self.getToken(SolidityParser.YulIdentifier, 0)

        def YulEvmBuiltin(self):
            return self.getToken(SolidityParser.YulEvmBuiltin, 0)

        def yulExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.YulExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.YulExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulFunctionCall" ):
                listener.enterYulFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulFunctionCall" ):
                listener.exitYulFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulFunctionCall" ):
                return visitor.visitYulFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def yulFunctionCall(self):

        localctx = SolidityParser.YulFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_yulFunctionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            _la = self._input.LA(1)
            if not(_la==143 or _la==144):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1253
            self.match(SolidityParser.T__22)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53 or _la==54 or ((((_la - 114)) & ~0x3f) == 0 and ((1 << (_la - 114)) & 16642998273) != 0):
                self.state = 1254
                self.yulExpression()
                self.state = 1259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1255
                    self.match(SolidityParser.T__15)
                    self.state = 1256
                    self.yulExpression()
                    self.state = 1261
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1264
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulBooleanContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_yulBoolean

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulBoolean" ):
                listener.enterYulBoolean(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulBoolean" ):
                listener.exitYulBoolean(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulBoolean" ):
                return visitor.visitYulBoolean(self)
            else:
                return visitor.visitChildren(self)




    def yulBoolean(self):

        localctx = SolidityParser.YulBooleanContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_yulBoolean)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            _la = self._input.LA(1)
            if not(_la==53 or _la==54):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YulDecimalNumber(self):
            return self.getToken(SolidityParser.YulDecimalNumber, 0)

        def YulStringLiteral(self):
            return self.getToken(SolidityParser.YulStringLiteral, 0)

        def YulHexNumber(self):
            return self.getToken(SolidityParser.YulHexNumber, 0)

        def yulBoolean(self):
            return self.getTypedRuleContext(SolidityParser.YulBooleanContext,0)


        def HexString(self):
            return self.getToken(SolidityParser.HexString, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_yulLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulLiteral" ):
                listener.enterYulLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulLiteral" ):
                listener.exitYulLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulLiteral" ):
                return visitor.visitYulLiteral(self)
            else:
                return visitor.visitChildren(self)




    def yulLiteral(self):

        localctx = SolidityParser.YulLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_yulLiteral)
        try:
            self.state = 1273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [146]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1268
                self.match(SolidityParser.YulDecimalNumber)
                pass
            elif token in [147]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1269
                self.match(SolidityParser.YulStringLiteral)
                pass
            elif token in [145]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1270
                self.match(SolidityParser.YulHexNumber)
                pass
            elif token in [53, 54]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1271
                self.yulBoolean()
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1272
                self.match(SolidityParser.HexString)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YulExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yulPath(self):
            return self.getTypedRuleContext(SolidityParser.YulPathContext,0)


        def yulFunctionCall(self):
            return self.getTypedRuleContext(SolidityParser.YulFunctionCallContext,0)


        def yulLiteral(self):
            return self.getTypedRuleContext(SolidityParser.YulLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_yulExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYulExpression" ):
                listener.enterYulExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYulExpression" ):
                listener.exitYulExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYulExpression" ):
                return visitor.visitYulExpression(self)
            else:
                return visitor.visitChildren(self)




    def yulExpression(self):

        localctx = SolidityParser.YulExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_yulExpression)
        try:
            self.state = 1278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1275
                self.yulPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1276
                self.yulFunctionCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1277
                self.yulLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SolidityParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileStatement" ):
                return visitor.visitDoWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def doWhileStatement(self):

        localctx = SolidityParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(SolidityParser.T__72)
            self.state = 1281
            self.statement()
            self.state = 1282
            self.match(SolidityParser.T__63)
            self.state = 1283
            self.match(SolidityParser.T__22)
            self.state = 1284
            self.expression(0)
            self.state = 1285
            self.match(SolidityParser.T__23)
            self.state = 1286
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ContinueKeyword(self):
            return self.getToken(SolidityParser.ContinueKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStatement" ):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = SolidityParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.match(SolidityParser.ContinueKeyword)
            self.state = 1289
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BreakKeyword(self):
            return self.getToken(SolidityParser.BreakKeyword, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStatement" ):
                return visitor.visitBreakStatement(self)
            else:
                return visitor.visitChildren(self)




    def breakStatement(self):

        localctx = SolidityParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.match(SolidityParser.BreakKeyword)
            self.state = 1292
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = SolidityParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.match(SolidityParser.T__73)
            self.state = 1296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 28165107045367872) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 4323596499821789695) != 0):
                self.state = 1295
                self.expression(0)


            self.state = 1298
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_emitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmitStatement" ):
                listener.enterEmitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmitStatement" ):
                listener.exitEmitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmitStatement" ):
                return visitor.visitEmitStatement(self)
            else:
                return visitor.visitChildren(self)




    def emitStatement(self):

        localctx = SolidityParser.EmitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_emitStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(SolidityParser.T__74)
            self.state = 1301
            self.expression(0)
            self.state = 1302
            self.callArgumentList()
            self.state = 1303
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_revertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevertStatement" ):
                listener.enterRevertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevertStatement" ):
                listener.exitRevertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevertStatement" ):
                return visitor.visitRevertStatement(self)
            else:
                return visitor.visitChildren(self)




    def revertStatement(self):

        localctx = SolidityParser.RevertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_revertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(SolidityParser.T__75)
            self.state = 1314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [137]:
                self.state = 1306
                self.identifier()
                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1307
                    self.callArgumentList()


                pass
            elif token in [23]:
                self.state = 1310
                self.match(SolidityParser.T__22)
                self.state = 1311
                self.stringLiteral()
                self.state = 1312
                self.match(SolidityParser.T__23)
                pass
            elif token in [2]:
                pass
            else:
                pass
            self.state = 1316
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequireStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_requireStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireStatement" ):
                listener.enterRequireStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireStatement" ):
                listener.exitRequireStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRequireStatement" ):
                return visitor.visitRequireStatement(self)
            else:
                return visitor.visitChildren(self)




    def requireStatement(self):

        localctx = SolidityParser.RequireStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_requireStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1318
            self.match(SolidityParser.T__76)
            self.state = 1319
            self.match(SolidityParser.T__22)
            self.state = 1320
            self.expression(0)
            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 1321
                self.match(SolidityParser.T__15)
                self.state = 1322
                self.stringLiteral()


            self.state = 1325
            self.match(SolidityParser.T__23)
            self.state = 1326
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_assertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertStatement" ):
                listener.enterAssertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertStatement" ):
                listener.exitAssertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertStatement" ):
                return visitor.visitAssertStatement(self)
            else:
                return visitor.visitChildren(self)




    def assertStatement(self):

        localctx = SolidityParser.AssertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_assertStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.match(SolidityParser.T__77)
            self.state = 1329
            self.match(SolidityParser.T__22)
            self.state = 1330
            self.expression(0)
            self.state = 1331
            self.match(SolidityParser.T__23)
            self.state = 1332
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def variableDeclarationTuple(self):
            return self.getTypedRuleContext(SolidityParser.VariableDeclarationTupleContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_variableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationStatement" ):
                listener.enterVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationStatement" ):
                listener.exitVariableDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationStatement" ):
                return visitor.visitVariableDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationStatement(self):

        localctx = SolidityParser.VariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_variableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.state = 1345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41, 46, 50, 79, 80, 81, 82, 83, 107, 108, 109, 110, 111, 137]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1334
                self.variableDeclaration()
                self.state = 1337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 1335
                    self.match(SolidityParser.T__10)
                    self.state = 1336
                    self.expression(0)


                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1339
                self.variableDeclarationTuple()
                self.state = 1340
                self.match(SolidityParser.T__10)
                self.state = 1341
                self.expression(0)
                self.state = 1343
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interactiveSimpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveSimpleStatementContext,0)


        def interactiveIfStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveIfStatementContext,0)


        def interactiveForStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveForStatementContext,0)


        def interactiveWhileStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveWhileStatementContext,0)


        def interactiveDoWhileDoStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveDoWhileDoStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SolidityParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SolidityParser.BreakStatementContext,0)


        def interactiveTryStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveTryStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SolidityParser.ReturnStatementContext,0)


        def emitStatement(self):
            return self.getTypedRuleContext(SolidityParser.EmitStatementContext,0)


        def revertStatement(self):
            return self.getTypedRuleContext(SolidityParser.RevertStatementContext,0)


        def requireStatement(self):
            return self.getTypedRuleContext(SolidityParser.RequireStatementContext,0)


        def assertStatement(self):
            return self.getTypedRuleContext(SolidityParser.AssertStatementContext,0)


        def assemblyStatement(self):
            return self.getTypedRuleContext(SolidityParser.AssemblyStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveStatement" ):
                listener.enterInteractiveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveStatement" ):
                listener.exitInteractiveStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveStatement" ):
                return visitor.visitInteractiveStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveStatement(self):

        localctx = SolidityParser.InteractiveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_interactiveStatement)
        try:
            self.state = 1361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 34, 41, 44, 46, 50, 53, 54, 79, 80, 81, 82, 83, 84, 85, 86, 87, 105, 107, 108, 109, 110, 111, 112, 114, 115, 126, 137, 138, 139, 140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1347
                self.interactiveSimpleStatement()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1348
                self.interactiveIfStatement()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1349
                self.interactiveForStatement()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1350
                self.interactiveWhileStatement()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1351
                self.interactiveDoWhileDoStatement()
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1352
                self.continueStatement()
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1353
                self.breakStatement()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1354
                self.interactiveTryStatement()
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1355
                self.returnStatement()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1356
                self.emitStatement()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1357
                self.revertStatement()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1358
                self.requireStatement()
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1359
                self.assertStatement()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1360
                self.assemblyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveIfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveIfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveIfStatement" ):
                listener.enterInteractiveIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveIfStatement" ):
                listener.exitInteractiveIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveIfStatement" ):
                return visitor.visitInteractiveIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveIfStatement(self):

        localctx = SolidityParser.InteractiveIfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_interactiveIfStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self.match(SolidityParser.T__59)
            self.state = 1364
            self.match(SolidityParser.T__22)
            self.state = 1365
            self.expression(0)
            self.state = 1366
            self.match(SolidityParser.T__23)
            self.state = 1367
            self.match(SolidityParser.T__14)
            self.state = 1368
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveElseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interactiveIfStatement(self):
            return self.getTypedRuleContext(SolidityParser.InteractiveIfStatementContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveElseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveElseStatement" ):
                listener.enterInteractiveElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveElseStatement" ):
                listener.exitInteractiveElseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveElseStatement" ):
                return visitor.visitInteractiveElseStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveElseStatement(self):

        localctx = SolidityParser.InteractiveElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_interactiveElseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1370
            self.match(SolidityParser.T__60)
            self.state = 1374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.state = 1371
                self.interactiveIfStatement()
                pass
            elif token in [15]:
                self.state = 1372
                self.match(SolidityParser.T__14)
                self.state = 1373
                self.match(SolidityParser.T__16)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleStatement(self):
            return self.getTypedRuleContext(SolidityParser.SimpleStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionStatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveForStatement" ):
                listener.enterInteractiveForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveForStatement" ):
                listener.exitInteractiveForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveForStatement" ):
                return visitor.visitInteractiveForStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveForStatement(self):

        localctx = SolidityParser.InteractiveForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_interactiveForStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.match(SolidityParser.T__29)
            self.state = 1377
            self.match(SolidityParser.T__22)
            self.state = 1380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 34, 41, 44, 46, 50, 53, 54, 79, 80, 81, 82, 83, 84, 85, 86, 87, 105, 107, 108, 109, 110, 111, 112, 114, 115, 126, 137, 138, 139, 140]:
                self.state = 1378
                self.simpleStatement()
                pass
            elif token in [2]:
                self.state = 1379
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 23, 34, 44, 50, 53, 54, 79, 80, 81, 82, 83, 84, 85, 86, 87, 105, 107, 108, 109, 110, 111, 112, 114, 115, 126, 137, 138, 139, 140]:
                self.state = 1382
                self.expressionStatement()
                pass
            elif token in [2]:
                self.state = 1383
                self.match(SolidityParser.T__1)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 28165107045367872) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 4323596499821789695) != 0):
                self.state = 1386
                self.expression(0)


            self.state = 1389
            self.match(SolidityParser.T__23)
            self.state = 1390
            self.match(SolidityParser.T__14)
            self.state = 1391
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveWhileStatement" ):
                listener.enterInteractiveWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveWhileStatement" ):
                listener.exitInteractiveWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveWhileStatement" ):
                return visitor.visitInteractiveWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveWhileStatement(self):

        localctx = SolidityParser.InteractiveWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_interactiveWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self.match(SolidityParser.T__63)
            self.state = 1394
            self.match(SolidityParser.T__22)
            self.state = 1395
            self.expression(0)
            self.state = 1396
            self.match(SolidityParser.T__23)
            self.state = 1397
            self.match(SolidityParser.T__14)
            self.state = 1398
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveDoWhileDoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveDoWhileDoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveDoWhileDoStatement" ):
                listener.enterInteractiveDoWhileDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveDoWhileDoStatement" ):
                listener.exitInteractiveDoWhileDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveDoWhileDoStatement" ):
                return visitor.visitInteractiveDoWhileDoStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveDoWhileDoStatement(self):

        localctx = SolidityParser.InteractiveDoWhileDoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_interactiveDoWhileDoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(SolidityParser.T__72)
            self.state = 1401
            self.match(SolidityParser.T__14)
            self.state = 1402
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveDoWhileWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveDoWhileWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveDoWhileWhileStatement" ):
                listener.enterInteractiveDoWhileWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveDoWhileWhileStatement" ):
                listener.exitInteractiveDoWhileWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveDoWhileWhileStatement" ):
                return visitor.visitInteractiveDoWhileWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveDoWhileWhileStatement(self):

        localctx = SolidityParser.InteractiveDoWhileWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_interactiveDoWhileWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.match(SolidityParser.T__63)
            self.state = 1405
            self.match(SolidityParser.T__22)
            self.state = 1406
            self.expression(0)
            self.state = 1407
            self.match(SolidityParser.T__23)
            self.state = 1408
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveTryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveTryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveTryStatement" ):
                listener.enterInteractiveTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveTryStatement" ):
                listener.exitInteractiveTryStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveTryStatement" ):
                return visitor.visitInteractiveTryStatement(self)
            else:
                return visitor.visitChildren(self)




    def interactiveTryStatement(self):

        localctx = SolidityParser.InteractiveTryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_interactiveTryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.match(SolidityParser.T__61)
            self.state = 1411
            self.expression(0)
            self.state = 1417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 1412
                self.match(SolidityParser.T__26)
                self.state = 1413
                self.match(SolidityParser.T__22)
                self.state = 1414
                self.parameterList()
                self.state = 1415
                self.match(SolidityParser.T__23)


            self.state = 1419
            self.match(SolidityParser.T__14)
            self.state = 1420
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveCatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(SolidityParser.ParameterListContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_interactiveCatchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractiveCatchClause" ):
                listener.enterInteractiveCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractiveCatchClause" ):
                listener.exitInteractiveCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractiveCatchClause" ):
                return visitor.visitInteractiveCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def interactiveCatchClause(self):

        localctx = SolidityParser.InteractiveCatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_interactiveCatchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.match(SolidityParser.T__62)
            self.state = 1430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23 or _la==137:
                self.state = 1424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 1423
                    self.identifier()


                self.state = 1426
                self.match(SolidityParser.T__22)
                self.state = 1427
                self.parameterList()
                self.state = 1428
                self.match(SolidityParser.T__23)


            self.state = 1432
            self.match(SolidityParser.T__14)
            self.state = 1433
            self.match(SolidityParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementaryTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int(self):
            return self.getToken(SolidityParser.Int, 0)

        def Uint(self):
            return self.getToken(SolidityParser.Uint, 0)

        def Byte(self):
            return self.getToken(SolidityParser.Byte, 0)

        def Fixed(self):
            return self.getToken(SolidityParser.Fixed, 0)

        def Ufixed(self):
            return self.getToken(SolidityParser.Ufixed, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_elementaryTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementaryTypeName" ):
                listener.enterElementaryTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementaryTypeName" ):
                listener.exitElementaryTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementaryTypeName" ):
                return visitor.visitElementaryTypeName(self)
            else:
                return visitor.visitChildren(self)




    def elementaryTypeName(self):

        localctx = SolidityParser.ElementaryTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_elementaryTypeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1435
            _la = self._input.LA(1)
            if not(((((_la - 50)) & ~0x3f) == 0 and ((1 << (_la - 50)) & 4467570846994530305) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IdentifierExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierExp" ):
                listener.enterIdentifierExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierExp" ):
                listener.exitIdentifierExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierExp" ):
                return visitor.visitIdentifierExp(self)
            else:
                return visitor.visitChildren(self)


    class LiteralExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(SolidityParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExp" ):
                listener.enterLiteralExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExp" ):
                listener.exitLiteralExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExp" ):
                return visitor.visitLiteralExp(self)
            else:
                return visitor.visitChildren(self)


    class ConditionalExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExp" ):
                listener.enterConditionalExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExp" ):
                listener.exitConditionalExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalExp" ):
                return visitor.visitConditionalExp(self)
            else:
                return visitor.visitChildren(self)


    class ExponentiationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentiation" ):
                listener.enterExponentiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentiation" ):
                listener.exitExponentiation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentiation" ):
                return visitor.visitExponentiation(self)
            else:
                return visitor.visitChildren(self)


    class LiteralSubDenominationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literalWithSubDenomination(self):
            return self.getTypedRuleContext(SolidityParser.LiteralWithSubDenominationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralSubDenomination" ):
                listener.enterLiteralSubDenomination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralSubDenomination" ):
                listener.exitLiteralSubDenomination(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralSubDenomination" ):
                return visitor.visitLiteralSubDenomination(self)
            else:
                return visitor.visitChildren(self)


    class TupleExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tupleExpression(self):
            return self.getTypedRuleContext(SolidityParser.TupleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExp" ):
                listener.enterTupleExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExp" ):
                listener.exitTupleExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleExp" ):
                return visitor.visitTupleExp(self)
            else:
                return visitor.visitChildren(self)


    class AssignmentContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)


    class TypeConversionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConversion" ):
                listener.enterTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConversion" ):
                listener.exitTypeConversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConversion" ):
                return visitor.visitTypeConversion(self)
            else:
                return visitor.visitChildren(self)


    class UnaryPrefixOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPrefixOp" ):
                listener.enterUnaryPrefixOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPrefixOp" ):
                listener.exitUnaryPrefixOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryPrefixOp" ):
                return visitor.visitUnaryPrefixOp(self)
            else:
                return visitor.visitChildren(self)


    class BitXorOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitXorOp" ):
                listener.enterBitXorOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitXorOp" ):
                listener.exitBitXorOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitXorOp" ):
                return visitor.visitBitXorOp(self)
            else:
                return visitor.visitChildren(self)


    class AdditiveOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOp" ):
                listener.enterAdditiveOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOp" ):
                listener.exitAdditiveOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveOp" ):
                return visitor.visitAdditiveOp(self)
            else:
                return visitor.visitChildren(self)


    class PayableFunctionCallContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PayableKeyword(self):
            return self.getToken(SolidityParser.PayableKeyword, 0)
        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPayableFunctionCall" ):
                listener.enterPayableFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPayableFunctionCall" ):
                listener.exitPayableFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPayableFunctionCall" ):
                return visitor.visitPayableFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def callArgumentList(self):
            return self.getTypedRuleContext(SolidityParser.CallArgumentListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class NewExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def typeName(self):
            return self.getTypedRuleContext(SolidityParser.TypeNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExp" ):
                listener.enterNewExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExp" ):
                listener.exitNewExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewExp" ):
                return visitor.visitNewExp(self)
            else:
                return visitor.visitChildren(self)


    class BitAndOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndOp" ):
                listener.enterBitAndOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndOp" ):
                listener.exitBitAndOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitAndOp" ):
                return visitor.visitBitAndOp(self)
            else:
                return visitor.visitChildren(self)


    class IndexRangeAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexRangeAccess" ):
                listener.enterIndexRangeAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexRangeAccess" ):
                listener.exitIndexRangeAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexRangeAccess" ):
                return visitor.visitIndexRangeAccess(self)
            else:
                return visitor.visitChildren(self)


    class BitOrOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrOp" ):
                listener.enterBitOrOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrOp" ):
                listener.exitBitOrOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOrOp" ):
                return visitor.visitBitOrOp(self)
            else:
                return visitor.visitChildren(self)


    class UnarySuffixOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnarySuffixOp" ):
                listener.enterUnarySuffixOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnarySuffixOp" ):
                listener.exitUnarySuffixOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnarySuffixOp" ):
                return visitor.visitUnarySuffixOp(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicativeOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOp" ):
                listener.enterMultiplicativeOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOp" ):
                listener.exitMultiplicativeOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeOp" ):
                return visitor.visitMultiplicativeOp(self)
            else:
                return visitor.visitChildren(self)


    class IndexAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexAccess" ):
                listener.enterIndexAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexAccess" ):
                listener.exitIndexAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexAccess" ):
                return visitor.visitIndexAccess(self)
            else:
                return visitor.visitChildren(self)


    class EqualityOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOp" ):
                listener.enterEqualityOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOp" ):
                listener.exitEqualityOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityOp" ):
                return visitor.visitEqualityOp(self)
            else:
                return visitor.visitChildren(self)


    class AndOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndOperation" ):
                listener.enterAndOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndOperation" ):
                listener.exitAndOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndOperation" ):
                return visitor.visitAndOperation(self)
            else:
                return visitor.visitChildren(self)


    class RelationalOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalOp" ):
                listener.enterRelationalOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalOp" ):
                listener.exitRelationalOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalOp" ):
                return visitor.visitRelationalOp(self)
            else:
                return visitor.visitChildren(self)


    class OrOperationContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrOperation" ):
                listener.enterOrOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrOperation" ):
                listener.exitOrOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrOperation" ):
                return visitor.visitOrOperation(self)
            else:
                return visitor.visitChildren(self)


    class MemberAccessContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SolidityParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccess" ):
                return visitor.visitMemberAccess(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallOptionsContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallOptions" ):
                listener.enterFunctionCallOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallOptions" ):
                listener.exitFunctionCallOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallOptions" ):
                return visitor.visitFunctionCallOptions(self)
            else:
                return visitor.visitChildren(self)


    class ShiftOpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftOp" ):
                listener.enterShiftOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftOp" ):
                listener.exitShiftOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftOp" ):
                return visitor.visitShiftOp(self)
            else:
                return visitor.visitChildren(self)


    class TypeNameExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameExp" ):
                listener.enterTypeNameExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameExp" ):
                listener.exitTypeNameExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeNameExp" ):
                return visitor.visitTypeNameExp(self)
            else:
                return visitor.visitChildren(self)


    class InlineArrayExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SolidityParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineArrayExpression(self):
            return self.getTypedRuleContext(SolidityParser.InlineArrayExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineArrayExp" ):
                listener.enterInlineArrayExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineArrayExp" ):
                listener.exitInlineArrayExp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineArrayExp" ):
                return visitor.visitInlineArrayExp(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SolidityParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                localctx = SolidityParser.PayableFunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1438
                self.match(SolidityParser.PayableKeyword)
                self.state = 1439
                self.callArgumentList()
                pass

            elif la_ == 2:
                localctx = SolidityParser.TypeConversionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1440
                self.elementaryTypeName()
                self.state = 1441
                self.match(SolidityParser.T__22)
                self.state = 1442
                self.identifier()
                self.state = 1443
                self.match(SolidityParser.T__23)
                pass

            elif la_ == 3:
                localctx = SolidityParser.UnaryPrefixOpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1445
                _la = self._input.LA(1)
                if not(_la==6 or _la==34 or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1446
                self.expression(22)
                pass

            elif la_ == 4:
                localctx = SolidityParser.NewExpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1447
                self.match(SolidityParser.T__104)
                self.state = 1448
                self.typeName(0)
                pass

            elif la_ == 5:
                localctx = SolidityParser.TupleExpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1449
                self.tupleExpression()
                pass

            elif la_ == 6:
                localctx = SolidityParser.InlineArrayExpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1450
                self.inlineArrayExpression()
                pass

            elif la_ == 7:
                localctx = SolidityParser.IdentifierExpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1451
                self.identifier()
                pass

            elif la_ == 8:
                localctx = SolidityParser.LiteralExpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1452
                self.literal()
                pass

            elif la_ == 9:
                localctx = SolidityParser.LiteralSubDenominationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1453
                self.literalWithSubDenomination()
                pass

            elif la_ == 10:
                localctx = SolidityParser.TypeNameExpContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1454
                self.elementaryTypeName()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1545
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1543
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                    if la_ == 1:
                        localctx = SolidityParser.ExponentiationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1457
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1458
                        self.match(SolidityParser.T__87)
                        self.state = 1459
                        self.expression(21)
                        pass

                    elif la_ == 2:
                        localctx = SolidityParser.MultiplicativeOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1460
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1461
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 103079215112) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1462
                        self.expression(20)
                        pass

                    elif la_ == 3:
                        localctx = SolidityParser.AdditiveOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1463
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1464
                        _la = self._input.LA(1)
                        if not(_la==33 or _la==34):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1465
                        self.expression(19)
                        pass

                    elif la_ == 4:
                        localctx = SolidityParser.ShiftOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1466
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1467
                        _la = self._input.LA(1)
                        if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 7) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1468
                        self.expression(18)
                        pass

                    elif la_ == 5:
                        localctx = SolidityParser.BitAndOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1469
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1470
                        self.match(SolidityParser.T__31)
                        self.state = 1471
                        self.expression(17)
                        pass

                    elif la_ == 6:
                        localctx = SolidityParser.BitXorOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1472
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1473
                        self.match(SolidityParser.T__4)
                        self.state = 1474
                        self.expression(16)
                        pass

                    elif la_ == 7:
                        localctx = SolidityParser.BitOrOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1475
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1476
                        self.match(SolidityParser.T__30)
                        self.state = 1477
                        self.expression(15)
                        pass

                    elif la_ == 8:
                        localctx = SolidityParser.RelationalOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1478
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1479
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1920) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1480
                        self.expression(14)
                        pass

                    elif la_ == 9:
                        localctx = SolidityParser.EqualityOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1481
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1482
                        _la = self._input.LA(1)
                        if not(_la==37 or _la==38):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1483
                        self.expression(13)
                        pass

                    elif la_ == 10:
                        localctx = SolidityParser.AndOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1484
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1485
                        self.match(SolidityParser.T__91)
                        self.state = 1486
                        self.expression(12)
                        pass

                    elif la_ == 11:
                        localctx = SolidityParser.OrOperationContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1487
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1488
                        self.match(SolidityParser.T__3)
                        self.state = 1489
                        self.expression(11)
                        pass

                    elif la_ == 12:
                        localctx = SolidityParser.ConditionalExpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1490
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1491
                        self.match(SolidityParser.T__92)
                        self.state = 1492
                        self.expression(0)
                        self.state = 1493
                        self.match(SolidityParser.T__24)
                        self.state = 1494
                        self.expression(10)
                        pass

                    elif la_ == 13:
                        localctx = SolidityParser.AssignmentContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1496
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1497
                        _la = self._input.LA(1)
                        if not(_la==11 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 2047) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1498
                        self.expression(9)
                        pass

                    elif la_ == 14:
                        localctx = SolidityParser.IndexAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1499
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 1500
                        self.match(SolidityParser.T__43)
                        self.state = 1502
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 28165107045367872) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 4323596499821789695) != 0):
                            self.state = 1501
                            self.expression(0)


                        self.state = 1504
                        self.match(SolidityParser.T__44)
                        pass

                    elif la_ == 15:
                        localctx = SolidityParser.IndexRangeAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1505
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 1506
                        self.match(SolidityParser.T__43)
                        self.state = 1508
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 28165107045367872) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 4323596499821789695) != 0):
                            self.state = 1507
                            self.expression(0)


                        self.state = 1510
                        self.match(SolidityParser.T__24)
                        self.state = 1512
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 28165107045367872) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 4323596499821789695) != 0):
                            self.state = 1511
                            self.expression(0)


                        self.state = 1514
                        self.match(SolidityParser.T__44)
                        pass

                    elif la_ == 16:
                        localctx = SolidityParser.MemberAccessContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1515
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 1516
                        self.match(SolidityParser.T__25)
                        self.state = 1519
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [137]:
                            self.state = 1517
                            self.identifier()
                            pass
                        elif token in [50]:
                            self.state = 1518
                            self.match(SolidityParser.T__49)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 17:
                        localctx = SolidityParser.FunctionCallOptionsContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1521
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 1522
                        self.match(SolidityParser.T__14)
                        self.state = 1536
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==137:
                            self.state = 1523
                            self.identifier()
                            self.state = 1524
                            self.match(SolidityParser.T__24)
                            self.state = 1525
                            self.expression(0)
                            self.state = 1533
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==16:
                                self.state = 1526
                                self.match(SolidityParser.T__15)
                                self.state = 1527
                                self.identifier()
                                self.state = 1528
                                self.match(SolidityParser.T__24)
                                self.state = 1529
                                self.expression(0)
                                self.state = 1535
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 1538
                        self.match(SolidityParser.T__16)
                        pass

                    elif la_ == 18:
                        localctx = SolidityParser.FunctionCallContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1539
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1540
                        self.callArgumentList()
                        pass

                    elif la_ == 19:
                        localctx = SolidityParser.UnarySuffixOpContext(self, SolidityParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1541
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1542
                        _la = self._input.LA(1)
                        if not(_la==84 or _la==85):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 1547
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.StringLiteralContext,0)


        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(SolidityParser.BooleanLiteralContext,0)


        def hexStringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.HexStringLiteralContext,0)


        def unicodeStringLiteral(self):
            return self.getTypedRuleContext(SolidityParser.UnicodeStringLiteralContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = SolidityParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [138, 139]:
                self.state = 1548
                self.stringLiteral()
                pass
            elif token in [112, 115]:
                self.state = 1549
                self.numberLiteral()
                pass
            elif token in [53, 54]:
                self.state = 1550
                self.booleanLiteral()
                pass
            elif token in [114]:
                self.state = 1551
                self.hexStringLiteral()
                pass
            elif token in [140]:
                self.state = 1552
                self.unicodeStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralWithSubDenominationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numberLiteral(self):
            return self.getTypedRuleContext(SolidityParser.NumberLiteralContext,0)


        def SubDenomination(self):
            return self.getToken(SolidityParser.SubDenomination, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_literalWithSubDenomination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralWithSubDenomination" ):
                listener.enterLiteralWithSubDenomination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralWithSubDenomination" ):
                listener.exitLiteralWithSubDenomination(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralWithSubDenomination" ):
                return visitor.visitLiteralWithSubDenomination(self)
            else:
                return visitor.visitChildren(self)




    def literalWithSubDenomination(self):

        localctx = SolidityParser.LiteralWithSubDenominationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_literalWithSubDenomination)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            self.numberLiteral()
            self.state = 1556
            self.match(SolidityParser.SubDenomination)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SolidityParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_tupleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleExpression" ):
                listener.enterTupleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleExpression" ):
                listener.exitTupleExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleExpression" ):
                return visitor.visitTupleExpression(self)
            else:
                return visitor.visitChildren(self)




    def tupleExpression(self):

        localctx = SolidityParser.TupleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_tupleExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            self.match(SolidityParser.T__22)
            self.state = 1567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 28165107045367872) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 4323596499821789695) != 0):
                self.state = 1559
                self.expression(0)
                self.state = 1564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1560
                    self.match(SolidityParser.T__15)
                    self.state = 1561
                    self.expression(0)
                    self.state = 1566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1569
            self.match(SolidityParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalNumber(self):
            return self.getToken(SolidityParser.DecimalNumber, 0)

        def HexNumber(self):
            return self.getToken(SolidityParser.HexNumber, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_numberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numberLiteral(self):

        localctx = SolidityParser.NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_numberLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1571
            _la = self._input.LA(1)
            if not(_la==112 or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(SolidityParser.Identifier, 0)

        def getRuleIndex(self):
            return SolidityParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SolidityParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            self.match(SolidityParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinedValueTypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TypeKeyword(self):
            return self.getToken(SolidityParser.TypeKeyword, 0)

        def identifier(self):
            return self.getTypedRuleContext(SolidityParser.IdentifierContext,0)


        def elementaryTypeName(self):
            return self.getTypedRuleContext(SolidityParser.ElementaryTypeNameContext,0)


        def getRuleIndex(self):
            return SolidityParser.RULE_userDefinedValueTypeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedValueTypeDefinition" ):
                listener.enterUserDefinedValueTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedValueTypeDefinition" ):
                listener.exitUserDefinedValueTypeDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserDefinedValueTypeDefinition" ):
                return visitor.visitUserDefinedValueTypeDefinition(self)
            else:
                return visitor.visitChildren(self)




    def userDefinedValueTypeDefinition(self):

        localctx = SolidityParser.UserDefinedValueTypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_userDefinedValueTypeDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            self.match(SolidityParser.TypeKeyword)
            self.state = 1576
            self.identifier()
            self.state = 1577
            self.match(SolidityParser.T__19)
            self.state = 1578
            self.elementaryTypeName()
            self.state = 1579
            self.match(SolidityParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SolidityParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = SolidityParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            _la = self._input.LA(1)
            if not(_la==53 or _la==54):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexString(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.HexString)
            else:
                return self.getToken(SolidityParser.HexString, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_hexStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexStringLiteral" ):
                listener.enterHexStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexStringLiteral" ):
                listener.exitHexStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHexStringLiteral" ):
                return visitor.visitHexStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def hexStringLiteral(self):

        localctx = SolidityParser.HexStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_hexStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1584 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1583
                    self.match(SolidityParser.HexString)

                else:
                    raise NoViableAltException(self)
                self.state = 1586 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnicodeStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnicodeStringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.UnicodeStringLiteral)
            else:
                return self.getToken(SolidityParser.UnicodeStringLiteral, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_unicodeStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicodeStringLiteral" ):
                listener.enterUnicodeStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicodeStringLiteral" ):
                listener.exitUnicodeStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnicodeStringLiteral" ):
                return visitor.visitUnicodeStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def unicodeStringLiteral(self):

        localctx = SolidityParser.UnicodeStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_unicodeStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1588
                    self.match(SolidityParser.UnicodeStringLiteral)

                else:
                    raise NoViableAltException(self)
                self.state = 1591 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NonEmptyStringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.NonEmptyStringLiteral)
            else:
                return self.getToken(SolidityParser.NonEmptyStringLiteral, i)

        def EmptyStringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(SolidityParser.EmptyStringLiteral)
            else:
                return self.getToken(SolidityParser.EmptyStringLiteral, i)

        def getRuleIndex(self):
            return SolidityParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = SolidityParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1593
                    _la = self._input.LA(1)
                    if not(_la==138 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1596 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverrideSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SolidityParser.IdentifierPathContext)
            else:
                return self.getTypedRuleContext(SolidityParser.IdentifierPathContext,i)


        def getRuleIndex(self):
            return SolidityParser.RULE_overrideSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverrideSpecifier" ):
                listener.enterOverrideSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverrideSpecifier" ):
                listener.exitOverrideSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverrideSpecifier" ):
                return visitor.visitOverrideSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def overrideSpecifier(self):

        localctx = SolidityParser.OverrideSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_overrideSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1598
            self.match(SolidityParser.T__105)
            self.state = 1610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 1599
                self.match(SolidityParser.T__22)
                self.state = 1600
                self.identifierPath()
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 1601
                    self.match(SolidityParser.T__15)
                    self.state = 1602
                    self.identifierPath()
                    self.state = 1607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1608
                self.match(SolidityParser.T__23)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[39] = self.typeName_sempred
        self._predicates[115] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeName_sempred(self, localctx:TypeNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 21)
         




